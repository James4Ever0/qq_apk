package com.tencent.mobileqq.config.splashlogo;

import SecurityAccountServer.RespondQueryQQBindingStat;
import ablq;
import ablr;
import abls;
import ablt;
import ablu;
import ablv;
import ablw;
import ablx;
import ably;
import ablz;
import abmb;
import abmc;
import abmd;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Build.VERSION;
import android.preference.PreferenceManager;
import android.text.TextUtils;
import android.util.Xml;
import com.qq.im.poi.LbsPackConfig;
import com.tencent.av.business.manager.EffectConfigBase;
import com.tencent.av.business.manager.EffectOperateManager;
import com.tencent.av.gameplay.QavGPDownloader;
import com.tencent.av.gaudio.AVNotifyCenter;
import com.tencent.av.opengl.effects.EffectBeautyTools;
import com.tencent.av.opengl.effects.EffectFilterTools;
import com.tencent.av.redpacket.AVRedPacketDataCollector;
import com.tencent.av.redpacket.config.AVRedPacketConfigManager;
import com.tencent.av.service.AVRedPacketConfig;
import com.tencent.av.ui.AIOTopRightButtonConfig;
import com.tencent.av.ui.VoiceChangeData;
import com.tencent.av.utils.QAVConfigUtils;
import com.tencent.av.utils.ScoreManager;
import com.tencent.av.utils.SignalStrengthReport;
import com.tencent.biz.bmqq.util.BmqqSegmentUtil;
import com.tencent.biz.now.NowLiveManager;
import com.tencent.biz.pubaccount.Advertisement.manager.AdvertisementVideoPreloadManager;
import com.tencent.biz.pubaccount.ecshopassit.EcShopAssistantManager;
import com.tencent.biz.pubaccount.readinjoy.common.ReadInJoyReportManyApps;
import com.tencent.biz.pubaccount.readinjoy.common.ReadInJoyUtils;
import com.tencent.biz.pubaccount.readinjoy.engine.KandianHBManager;
import com.tencent.biz.pubaccount.readinjoy.engine.KandianMergeManager;
import com.tencent.biz.pubaccount.readinjoy.engine.SPEventReportSwitch;
import com.tencent.biz.pubaccount.readinjoy.logic.FeManager;
import com.tencent.biz.pubaccount.readinjoy.logic.SMRM;
import com.tencent.biz.pubaccount.subscript.SubscriptRecommendController;
import com.tencent.biz.pubaccount.util.PublicAccountConfigUtil;
import com.tencent.biz.qqstory.base.QQStoryManager;
import com.tencent.biz.qqstory.boundaries.StoryApi;
import com.tencent.biz.qqstory.takevideo.artfilter.ArtFilterManager;
import com.tencent.biz.qqstory.troop.TroopDynamicConfig;
import com.tencent.biz.qqstory.troop.TroopStoryManager;
import com.tencent.common.app.BaseApplicationImpl;
import com.tencent.common.config.AppSetting;
import com.tencent.device.devicemgr.SmartDeviceProxyMgr;
import com.tencent.device.qfind.QFindConfigUtil;
import com.tencent.hotpatch.PatchFileManager;
import com.tencent.hotpatch.config.PatchConfigManager;
import com.tencent.hotpatch.utils.PatchReporter;
import com.tencent.hotpatch.utils.PatchSharedPreUtil;
import com.tencent.mobileqq.activity.JumpActivity;
import com.tencent.mobileqq.activity.aio.AIOConfigManager;
import com.tencent.mobileqq.activity.aio.AppGuideTipsManager;
import com.tencent.mobileqq.activity.aio.HotReactiveHelper;
import com.tencent.mobileqq.activity.aio.item.TroopPobingItemBuilder;
import com.tencent.mobileqq.activity.aio.photo.PhotoListConfigManager;
import com.tencent.mobileqq.activity.aio.tim.TIMUserManager;
import com.tencent.mobileqq.activity.aio.zhitu.ZhituManager;
import com.tencent.mobileqq.activity.bless.BlessManager;
import com.tencent.mobileqq.activity.qwallet.PasswdRedBagManager;
import com.tencent.mobileqq.activity.qwallet.preload.PreloadManager;
import com.tencent.mobileqq.activity.richmedia.subtitles.RDConfigServletProxy;
import com.tencent.mobileqq.activity.shortvideo.ProgressiveUtils;
import com.tencent.mobileqq.apollo.ApolloManager;
import com.tencent.mobileqq.apollo.utils.ApolloConfigUtils;
import com.tencent.mobileqq.apollo.utils.ApolloConstant;
import com.tencent.mobileqq.app.BabyQHandler;
import com.tencent.mobileqq.app.ClubContentUpdateHandler;
import com.tencent.mobileqq.app.ConfigHandler;
import com.tencent.mobileqq.app.DeviceProfileManager;
import com.tencent.mobileqq.app.HotChatManager;
import com.tencent.mobileqq.app.MayknowRecommendManager;
import com.tencent.mobileqq.app.NearbyFlowerManager;
import com.tencent.mobileqq.app.NearbyGrayTipsManager;
import com.tencent.mobileqq.app.PhoneContactManagerImp;
import com.tencent.mobileqq.app.PhoneUnityBannerData;
import com.tencent.mobileqq.app.PhoneUnityManager;
import com.tencent.mobileqq.app.QQAppInterface;
import com.tencent.mobileqq.app.ThreadManager;
import com.tencent.mobileqq.app.TroopManager;
import com.tencent.mobileqq.app.msgnotify.MsgNotifyPushDialog;
import com.tencent.mobileqq.app.upgrade.UpgradeConfigManager;
import com.tencent.mobileqq.app.upgrade.UpgradeController;
import com.tencent.mobileqq.app.upgrade.UpgradeController.OnHandleUpgradeFinishListener;
import com.tencent.mobileqq.app.upgrade.UpgradeDetailWrapper;
import com.tencent.mobileqq.app.upgrade.UpgradeTIMManager;
import com.tencent.mobileqq.app.upgrade.UpgradeTIMWrapper;
import com.tencent.mobileqq.app.utils.BatchAddFriendForTroopConfig;
import com.tencent.mobileqq.app.utils.ClassicHeadActivityManager;
import com.tencent.mobileqq.ar.ARGlobalConfigManager;
import com.tencent.mobileqq.ar.ArConfigUtils;
import com.tencent.mobileqq.ar.ArResourceManager;
import com.tencent.mobileqq.ar.FaceScanDownloadManager;
import com.tencent.mobileqq.ar.aidl.ArConfigInfo;
import com.tencent.mobileqq.ar.aidl.ArEffectConfig;
import com.tencent.mobileqq.ark.ArkAiAppCenter;
import com.tencent.mobileqq.ark.ArkAppCenter;
import com.tencent.mobileqq.armap.ArMapUtil;
import com.tencent.mobileqq.armap.config.ARMapConfig;
import com.tencent.mobileqq.armap.config.ARMapConfigManager;
import com.tencent.mobileqq.businessCard.BusinessCardManager;
import com.tencent.mobileqq.camera.utils.CameraUtils;
import com.tencent.mobileqq.confess.ConfessConfig;
import com.tencent.mobileqq.confess.ConfessHandler;
import com.tencent.mobileqq.confess.ConfessManager;
import com.tencent.mobileqq.config.ConfigManager;
import com.tencent.mobileqq.config.ConfigParser;
import com.tencent.mobileqq.config.operation.QQOperateManager;
import com.tencent.mobileqq.config.operation.QQOperationViopTipTask;
import com.tencent.mobileqq.config.struct.NearbyBannerManager;
import com.tencent.mobileqq.config.struct.PicAndAdConf;
import com.tencent.mobileqq.config.struct.splashproto.ConfigurationService.Config;
import com.tencent.mobileqq.config.struct.splashproto.ConfigurationService.ConfigSeq;
import com.tencent.mobileqq.config.struct.splashproto.ConfigurationService.Content;
import com.tencent.mobileqq.config.struct.splashproto.ConfigurationService.DeviceInfo;
import com.tencent.mobileqq.config.struct.splashproto.ConfigurationService.OS;
import com.tencent.mobileqq.config.struct.splashproto.ConfigurationService.ReqGetConfig;
import com.tencent.mobileqq.config.struct.splashproto.ConfigurationService.RespGetConfig;
import com.tencent.mobileqq.config.struct.splashproto.ConfigurationService.Screen;
import com.tencent.mobileqq.cooperation.ApkUtils;
import com.tencent.mobileqq.data.AppGuideTipsConfig;
import com.tencent.mobileqq.data.Card;
import com.tencent.mobileqq.data.ExpiredPushBanner;
import com.tencent.mobileqq.data.MessageForFoldMsgGrayTips;
import com.tencent.mobileqq.data.ReportedBanner;
import com.tencent.mobileqq.data.nativemonitor.NativeMonitorConfig;
import com.tencent.mobileqq.data.nativemonitor.NativeMonitorConfigHelper;
import com.tencent.mobileqq.doutu.DoutuManager;
import com.tencent.mobileqq.flashchat.FlashChatManager;
import com.tencent.mobileqq.hotpic.HotPicManager;
import com.tencent.mobileqq.intervideo.now.NowDownloadEngineManager;
import com.tencent.mobileqq.jumplightalk.AIOJumpLightalkConfig;
import com.tencent.mobileqq.jumplightalk.CLJumpLightalkConfig;
import com.tencent.mobileqq.jumplightalk.CallTabLightalkConfig;
import com.tencent.mobileqq.jumplightalk.PCJumpLightalkConfig;
import com.tencent.mobileqq.jumplightalk.QQCallLightalkConfig;
import com.tencent.mobileqq.lightReply.LightReplyMenuManager;
import com.tencent.mobileqq.lovelanguage.LoveLanguageManager;
import com.tencent.mobileqq.managers.CUOpenCardGuideMng;
import com.tencent.mobileqq.managers.TimUpgradeHongdianManager;
import com.tencent.mobileqq.medalwall.MedalWallMng;
import com.tencent.mobileqq.model.PhoneContactManager;
import com.tencent.mobileqq.msf.sdk.MsfSdkUtils;
import com.tencent.mobileqq.msf.sdk.SettingCloneUtil;
import com.tencent.mobileqq.multimsg.LongTextMsgManager;
import com.tencent.mobileqq.nearby.NearbyFlowerUtil;
import com.tencent.mobileqq.nearby.NearbySPUtil;
import com.tencent.mobileqq.nearby.NearbyUtils;
import com.tencent.mobileqq.nearby.NearbyVideoUtils;
import com.tencent.mobileqq.now.enter.NowEnterManager;
import com.tencent.mobileqq.ocr.OCRManager;
import com.tencent.mobileqq.ocr.data.OcrConfig;
import com.tencent.mobileqq.olympic.OlympicActConfig;
import com.tencent.mobileqq.olympic.OlympicManager;
import com.tencent.mobileqq.olympic.OlympicServlet;
import com.tencent.mobileqq.olympic.utils.OlympicUtil;
import com.tencent.mobileqq.pb.ByteStringMicro;
import com.tencent.mobileqq.pb.InvalidProtocolBufferMicroException;
import com.tencent.mobileqq.pb.PBBytesField;
import com.tencent.mobileqq.pb.PBEnumField;
import com.tencent.mobileqq.pb.PBInt32Field;
import com.tencent.mobileqq.pb.PBRepeatField;
import com.tencent.mobileqq.pb.PBRepeatMessageField;
import com.tencent.mobileqq.pb.PBStringField;
import com.tencent.mobileqq.pb.PBUInt32Field;
import com.tencent.mobileqq.pb.PBUInt64Field;
import com.tencent.mobileqq.persistence.Entity;
import com.tencent.mobileqq.persistence.EntityManager;
import com.tencent.mobileqq.persistence.EntityManagerFactory;
import com.tencent.mobileqq.precover.PrecoverControl;
import com.tencent.mobileqq.precover.PrecoverManager;
import com.tencent.mobileqq.precover.PrecoverUtils;
import com.tencent.mobileqq.ptt.PttConfigController;
import com.tencent.mobileqq.qcall.LightalkSwitchManager;
import com.tencent.mobileqq.richmedia.capture.data.CapturePtvTemplateManager;
import com.tencent.mobileqq.richmedia.capture.data.CaptureVideoFilterManager;
import com.tencent.mobileqq.scribble.ScribbleResMgr;
import com.tencent.mobileqq.search.FunctionModuleConfigManager;
import com.tencent.mobileqq.search.SearchEntryConfigManager;
import com.tencent.mobileqq.search.util.PAOfflineSearchManager;
import com.tencent.mobileqq.search.util.SearchConfigManager;
import com.tencent.mobileqq.search.util.SearchConfigUtils;
import com.tencent.mobileqq.service.message.MessageCache;
import com.tencent.mobileqq.service.profile.ProfileUtil;
import com.tencent.mobileqq.shortvideo.ShortVideoPreDownloader;
import com.tencent.mobileqq.shortvideo.ShortVideoResourceManager;
import com.tencent.mobileqq.shortvideo.gesture.GestureMgrAppDownload;
import com.tencent.mobileqq.shortvideo.mediadevice.CameraCompatibleList;
import com.tencent.mobileqq.shortvideo.qmcf.QmcfDevicesStrategy;
import com.tencent.mobileqq.shortvideo.util.RecentDanceConfigMgr;
import com.tencent.mobileqq.statistics.DAUStatistic;
import com.tencent.mobileqq.statistics.GeneralConfigUtils;
import com.tencent.mobileqq.statistics.QZoneReport;
import com.tencent.mobileqq.statistics.ReportController;
import com.tencent.mobileqq.statistics.StatisticCollector;
import com.tencent.mobileqq.stt.SttManager;
import com.tencent.mobileqq.teamwork.TeamWorkUtils;
import com.tencent.mobileqq.teamwork.spread.AIOMessageSpreadManager;
import com.tencent.mobileqq.troop.data.TroopRankConfig;
import com.tencent.mobileqq.troop.homework.config.HomeworkConfig;
import com.tencent.mobileqq.troop.homework.recite.config.ReciteConfig;
import com.tencent.mobileqq.troop.utils.ChangeMachineManager;
import com.tencent.mobileqq.troop.utils.NearbyVideoChatManager;
import com.tencent.mobileqq.troop.utils.SchoolTroopKeywordManager;
import com.tencent.mobileqq.troop.utils.TroopAppMgr;
import com.tencent.mobileqq.troop.utils.TroopLinkManager;
import com.tencent.mobileqq.troop.utils.TroopRobotManager;
import com.tencent.mobileqq.troop.utils.TroopTopicMgr;
import com.tencent.mobileqq.util.JSONUtils;
import com.tencent.mobileqq.util.ProfileCardUtil;
import com.tencent.mobileqq.utils.Base64Util;
import com.tencent.mobileqq.utils.DeviceInfoUtil;
import com.tencent.mobileqq.utils.FileUtils;
import com.tencent.mobileqq.utils.HttpDownloadUtil;
import com.tencent.mobileqq.utils.PackageUtil;
import com.tencent.mobileqq.utils.QAVGroupConfig;
import com.tencent.mobileqq.utils.SharedPreUtils;
import com.tencent.mobileqq.utils.StringUtil;
import com.tencent.mobileqq.utils.httputils.PkgTools;
import com.tencent.mobileqq.vas.IndividuationABTestManager;
import com.tencent.mobileqq.vashealth.SportManager;
import com.tencent.mobileqq.vip.AioVipKeywordHelper;
import com.tencent.open.business.base.OpenConfig;
import com.tencent.qphone.base.remote.FromServiceMsg;
import com.tencent.qphone.base.util.BaseApplication;
import com.tencent.qphone.base.util.QLog;
import com.tencent.util.Pair;
import cooperation.photoplus.PhotoPlusManager;
import cooperation.pluginbridge.BridgeHelper;
import cooperation.qwallet.plugin.QWalletHelper;
import cooperation.readinjoy.ReadInJoyHelper;
import dov.com.qq.im.capture.QIMManager;
import dov.com.qq.im.capture.music.QIMMusicConfigManager;
import dov.com.qq.im.capture.paster.QIMPasterConfigManager;
import dov.com.qq.im.capture.text.DynamicTextConfigManager;
import dov.com.qq.im.capture.util.ConfigSimplifier;
import dov.com.tencent.mobileqq.richmedia.capture.util.SVParamManager;
import dov.com.tencent.mobileqq.shortvideo.QIMPtvTemplateManager;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.zip.InflaterInputStream;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import mqq.app.AppRuntime;
import mqq.app.MSFServlet;
import mqq.app.MobileQQ;
import mqq.app.NewIntent;
import mqq.app.Packet;
import mqq.os.MqqHandler;
import oicq.wlogin_sdk.tools.MD5;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xmlpull.v1.XmlPullParser;
import protocol.KQQConfig.UpgradeInfo;

public class ConfigServlet
  extends MSFServlet
{
  public static String a;
  private static final int[] jdField_a_of_type_ArrayOfInt = { 1, 2, 3, 5, 10, 13, 18, 23, 26, 31, 32, 33, 35, 38, 42, 249, 44, 46, 47, 49, 50, 53, 55, 207, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 206, 205, 72, 73, 74, 75, 76, 94, 78, 79, 92, 80, 84, 106, 223, 276, 298, 81, 82, 101, 102, 70, 83, 85, 147, 86, 93, 88, 90, 124, 95, 96, 97, 108, 146, 111, 176, 109, 115, 286, 118, 120, 119, 116, 130, 142, 121, 157, 211, 136, 132, 201, 129, 143, 140, 257, 232, 233, 216, 231, 148, 139, 145, 152, 153, 149, 158, 159, 160, 155, 164, 165, 170, 185, 167, 166, 171, 172, 180, 182, 177, 178, 181, 184, 187, 192, 168, 186, 250, 191, 193, 188, 195, 227, 202, 203, 190, 210, 199, 212, StoryApi.a(2131689489), StoryApi.a(2131689490), StoryApi.a(2131689491), StoryApi.a(2131689492), StoryApi.a(2131689494), 218, 226, 225, 222, 256, 228, 235, 234, 238, 242, 247, 244, 245, 253, 295, 252, 255, 254, 259, 260, 258, 262, 261, 204, 263, 270, 271, 267, 275, 268, 269, 272, 274, 279, 308, 281, 284, 280, 285, 287, 290, 292, 294, 289, 307, 306, 305, 304, 309, 310, 3205, 293, 297, 301, 302 };
  private static String b;
  private boolean jdField_a_of_type_Boolean;
  
  static
  {
    jdField_a_of_type_JavaLangString = "";
    jdField_b_of_type_JavaLangString = "用户";
  }
  
  private void A(ConfigurationService.Config paramConfig)
  {
    ThreadManager.getSubThreadHandler().post(new abls(this, paramConfig));
  }
  
  private void B(ConfigurationService.Config paramConfig)
  {
    int i = 0;
    if (QLog.isDevelopLevel()) {
      QLog.d("SPLASH_ConfigServlet", 2, new Object[] { "handlePrecoverConfig, version=", Integer.valueOf(paramConfig.version.get()), ", type=", Integer.valueOf(paramConfig.type.get()), ", msg_content_list=", paramConfig.msg_content_list.get() });
    }
    QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
    ArrayList localArrayList = new ArrayList();
    if ((paramConfig.msg_content_list != null) && (paramConfig.msg_content_list.size() > 0)) {}
    for (List localList = paramConfig.msg_content_list.get();; localList = null)
    {
      StringBuilder localStringBuilder;
      if (QLog.isColorLevel())
      {
        localStringBuilder = new StringBuilder().append("handlePrecoverConfig, configList.size=");
        if (localList != null) {
          break label252;
        }
      }
      label252:
      for (Object localObject = "null";; localObject = Integer.valueOf(localList.size()))
      {
        QLog.d("SPLASH_ConfigServlet", 2, localObject);
        if ((localList == null) || (localList.size() <= 0)) {
          break;
        }
        while (i < localList.size())
        {
          localObject = (ConfigurationService.Content)paramConfig.msg_content_list.get(i);
          if (localObject != null)
          {
            int j = ((ConfigurationService.Content)localObject).task_id.get();
            localObject = PrecoverUtils.a((ConfigurationService.Content)localObject);
            if (localObject != null) {
              localArrayList.add(new Pair(Integer.valueOf(j), localObject));
            }
          }
          i += 1;
        }
      }
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "handlePrecoverConfig, configList is empty");
      }
      PrecoverUtils.a(localQQAppInterface.getApp(), paramConfig.version.get(), jdField_a_of_type_JavaLangString);
      paramConfig = (PrecoverManager)localQQAppInterface.getManager(178);
      if (paramConfig != null)
      {
        paramConfig.a(localArrayList);
        paramConfig.a();
        paramConfig.a(true);
      }
      return;
    }
  }
  
  public static void C(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    int i = paramConfig.version.get();
    int j = SharedPreUtils.aN(BaseApplication.getContext(), jdField_a_of_type_JavaLangString);
    if (QLog.isColorLevel()) {
      QLog.i("SPLASH_ConfigServlet", 2, "handleReceiptConfig: ,version: " + paramConfig.version.get() + "| localVersion: " + j);
    }
    if (i != j)
    {
      SharedPreUtils.ad(BaseApplication.getContext(), jdField_a_of_type_JavaLangString, i);
      paramConfig = a(paramConfig);
      if ((paramConfig != null) && (paramConfig.size() > 0))
      {
        paramConfig = paramConfig.iterator();
        while (paramConfig.hasNext())
        {
          localObject = (String)paramConfig.next();
          try
          {
            localObject = new JSONObject((String)localObject);
            if (((JSONObject)localObject).has("kReceiptMsgEnable"))
            {
              i = ((JSONObject)localObject).getInt("kReceiptMsgEnable");
              SharedPreUtils.f(BaseApplication.getContext(), jdField_a_of_type_JavaLangString, "receipt_kReceiptMsgEnable", i);
            }
            if (((JSONObject)localObject).has("kReceiptMsgMaxSendTimes"))
            {
              i = ((JSONObject)localObject).getInt("kReceiptMsgMaxSendTimes");
              SharedPreUtils.f(BaseApplication.getContext(), jdField_a_of_type_JavaLangString, "receipt_kReceiptMsgSendTimes", i);
            }
          }
          catch (JSONException localJSONException)
          {
            localJSONException.printStackTrace();
          }
        }
        AIOConfigManager.a(paramQQAppInterface);
      }
    }
    while (!QLog.isColorLevel())
    {
      Object localObject;
      return;
    }
    QLog.i("SPLASH_ConfigServlet", 2, "handleReceiptConfig:localVersiont == version ");
  }
  
  private void C(ConfigurationService.Config paramConfig)
  {
    QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
    PreloadManager localPreloadManager = (PreloadManager)localQQAppInterface.getManager(150);
    if ((paramConfig.content_list != null) && (paramConfig.content_list.size() >= 0) && (paramConfig.version.has()))
    {
      i = paramConfig.version.get();
      j = SharedPreUtils.X(localQQAppInterface.getApp(), localQQAppInterface.getCurrentAccountUin());
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "received PRELOAD_CONFIG remote version: " + i + " | localVersion: " + j);
      }
      if (i != j)
      {
        localPreloadManager.a(paramConfig);
        localPreloadManager.c();
        SharedPreUtils.z(localQQAppInterface.getApp(), localQQAppInterface.getCurrentAccountUin(), i);
      }
      localPreloadManager.a(true);
    }
    while (!QLog.isColorLevel())
    {
      int i;
      int j;
      return;
    }
    QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 68,content_list is empty ,version: " + paramConfig.version.get());
  }
  
  private void D(ConfigurationService.Config paramConfig)
  {
    QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
    int i = paramConfig.version.get();
    int j = SharedPreUtils.I(localQQAppInterface.getApp(), localQQAppInterface.getAccount());
    if (QLog.isColorLevel()) {
      QLog.d("msgFold", 2, "received RedBagFoldMsgConfig remote version: " + i + " | localVersion: " + j);
    }
    if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
    {
      String str = (String)paramConfig.content_list.get(0);
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 69,content: " + str + ",version: " + paramConfig.version.get());
      }
      if (QLog.isColorLevel()) {
        QLog.d("msgFold", 2, "received RedBagFoldMsgConfig content: " + str);
      }
      if (i != j) {
        PasswdRedBagManager.a(localQQAppInterface, i, str);
      }
    }
    do
    {
      return;
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 69,content_list is empty ,version: " + paramConfig.version.get());
      }
      if (i != j) {
        break;
      }
    } while (!QLog.isColorLevel());
    QLog.d("msgFold", 2, "received RedBagFoldMsgConfig, content_list is empty, ignored because of SAME VERSION");
    return;
    if (QLog.isColorLevel()) {
      QLog.d("msgFold", 2, "received RedBagFoldMsgConfig, content_list is empty, use default config");
    }
    paramConfig = (PasswdRedBagManager)localQQAppInterface.getManager(124);
    paramConfig.jdField_a_of_type_Boolean = true;
    paramConfig.jdField_b_of_type_Boolean = MessageForFoldMsgGrayTips.PASSWD_REDBAG_MSG_SWITCH_DEFAULT;
    paramConfig.jdField_a_of_type_Int = MessageForFoldMsgGrayTips.PASSWD_REDBAG_MSG_DISPLAY_NUM_DEFAULT;
    paramConfig.c = MessageForFoldMsgGrayTips.PASSWD_REDBAG_MSG_SWITCH_INDEX;
    paramConfig.d = MessageForFoldMsgGrayTips.PASSWD_REDBAG_MSG_INDEX_WITH_ID;
    SharedPreUtils.a(localQQAppInterface.getApp(), localQQAppInterface.getAccount(), i, paramConfig.jdField_b_of_type_Boolean, paramConfig.jdField_a_of_type_Int, paramConfig.c, paramConfig.d);
  }
  
  private void E(ConfigurationService.Config paramConfig)
  {
    Object localObject = (QQAppInterface)getAppRuntime();
    if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
    {
      localObject = (MayknowRecommendManager)((QQAppInterface)localObject).getManager(158);
      if (paramConfig.content_list.size() < 0)
      {
        str = (String)paramConfig.content_list.get(0);
        i = paramConfig.version.get();
        j = ((MayknowRecommendManager)localObject).a();
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 74,content: " + str + ",version: " + paramConfig.version.get());
        }
        if ((i != j) || (paramConfig.content_list.size() > 0)) {
          ((MayknowRecommendManager)localObject).a(i, str);
        }
      }
    }
    while (!QLog.isColorLevel())
    {
      String str;
      int i;
      int j;
      return;
    }
    QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 74,content_list is empty ,version: " + paramConfig.version.get());
  }
  
  /* Error */
  private void F(ConfigurationService.Config paramConfig)
  {
    // Byte code:
    //   0: aload_0
    //   1: invokevirtual 109	com/tencent/mobileqq/config/splashlogo/ConfigServlet:getAppRuntime	()Lmqq/app/AppRuntime;
    //   4: checkcast 111	com/tencent/mobileqq/app/QQAppInterface
    //   7: astore 71
    //   9: aload_1
    //   10: getfield 73	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:version	Lcom/tencent/mobileqq/pb/PBInt32Field;
    //   13: invokevirtual 79	com/tencent/mobileqq/pb/PBInt32Field:get	()I
    //   16: istore 34
    //   18: aload 71
    //   20: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   23: aload 71
    //   25: invokevirtual 311	com/tencent/mobileqq/app/QQAppInterface:getAccount	()Ljava/lang/String;
    //   28: invokestatic 393	com/tencent/mobileqq/utils/SharedPreUtils:aO	(Landroid/content/Context;Ljava/lang/String;)I
    //   31: istore_2
    //   32: aload 71
    //   34: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   37: aload 71
    //   39: invokevirtual 311	com/tencent/mobileqq/app/QQAppInterface:getAccount	()Ljava/lang/String;
    //   42: invokestatic 396	com/tencent/mobileqq/utils/SharedPreUtils:aP	(Landroid/content/Context;Ljava/lang/String;)I
    //   45: istore_3
    //   46: getstatic 399	com/tencent/common/config/AppSetting:jdField_a_of_type_Int	I
    //   49: istore 4
    //   51: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   54: ifeq +49 -> 103
    //   57: ldc 63
    //   59: iconst_2
    //   60: ldc_w 401
    //   63: iconst_4
    //   64: anewarray 65	java/lang/Object
    //   67: dup
    //   68: iconst_0
    //   69: iload 34
    //   71: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   74: aastore
    //   75: dup
    //   76: iconst_1
    //   77: iload_2
    //   78: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   81: aastore
    //   82: dup
    //   83: iconst_2
    //   84: iload_3
    //   85: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   88: aastore
    //   89: dup
    //   90: iconst_3
    //   91: iload 4
    //   93: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   96: aastore
    //   97: invokestatic 405	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   100: invokestatic 141	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/String;)V
    //   103: iload_3
    //   104: iload 4
    //   106: if_icmpeq +20 -> 126
    //   109: aload 71
    //   111: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   114: aload 71
    //   116: invokevirtual 311	com/tencent/mobileqq/app/QQAppInterface:getAccount	()Ljava/lang/String;
    //   119: iload 4
    //   121: invokestatic 408	com/tencent/mobileqq/utils/SharedPreUtils:ae	(Landroid/content/Context;Ljava/lang/String;I)V
    //   124: iconst_0
    //   125: istore_2
    //   126: iload 34
    //   128: iload_2
    //   129: if_icmpeq +3257 -> 3386
    //   132: aload_1
    //   133: iload_2
    //   134: sipush 228
    //   137: invokestatic 411	com/tencent/mobileqq/config/splashlogo/ConfigServlet:b	(Lcom/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config;II)Ljava/lang/String;
    //   140: astore 72
    //   142: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   145: ifeq +12 -> 157
    //   148: ldc_w 413
    //   151: iconst_2
    //   152: aload 72
    //   154: invokestatic 141	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/String;)V
    //   157: aload 72
    //   159: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   162: ifne +3532 -> 3694
    //   165: iconst_0
    //   166: istore 20
    //   168: iconst_0
    //   169: istore 28
    //   171: iconst_0
    //   172: istore 29
    //   174: iconst_0
    //   175: istore 30
    //   177: iconst_0
    //   178: istore 31
    //   180: iconst_0
    //   181: istore 32
    //   183: iconst_0
    //   184: istore 33
    //   186: iconst_0
    //   187: istore_2
    //   188: iconst_0
    //   189: istore_3
    //   190: iconst_0
    //   191: istore 21
    //   193: iconst_0
    //   194: istore 22
    //   196: iconst_0
    //   197: istore 23
    //   199: iconst_0
    //   200: istore 24
    //   202: iconst_0
    //   203: istore 25
    //   205: iconst_0
    //   206: istore 26
    //   208: iconst_0
    //   209: istore 27
    //   211: aconst_null
    //   212: astore 67
    //   214: aconst_null
    //   215: astore 68
    //   217: aconst_null
    //   218: astore 69
    //   220: aconst_null
    //   221: astore 70
    //   223: aconst_null
    //   224: astore_1
    //   225: aconst_null
    //   226: astore 63
    //   228: aconst_null
    //   229: astore 64
    //   231: aconst_null
    //   232: astore 65
    //   234: aconst_null
    //   235: astore 66
    //   237: aconst_null
    //   238: astore 36
    //   240: ldc 13
    //   242: astore 39
    //   244: aconst_null
    //   245: astore 38
    //   247: aconst_null
    //   248: astore 60
    //   250: aconst_null
    //   251: astore 61
    //   253: aconst_null
    //   254: astore 62
    //   256: aconst_null
    //   257: astore 37
    //   259: iload_3
    //   260: istore 14
    //   262: iload 28
    //   264: istore 7
    //   266: aload 37
    //   268: astore 40
    //   270: aload 39
    //   272: astore 55
    //   274: aload 36
    //   276: astore 45
    //   278: aload_1
    //   279: astore 50
    //   281: iload 21
    //   283: istore 15
    //   285: iload 29
    //   287: istore 8
    //   289: aload 38
    //   291: astore 41
    //   293: aload 39
    //   295: astore 56
    //   297: aload 63
    //   299: astore 46
    //   301: aload 67
    //   303: astore 51
    //   305: iload 22
    //   307: istore 16
    //   309: iload 30
    //   311: istore 9
    //   313: aload 60
    //   315: astore 42
    //   317: aload 39
    //   319: astore 57
    //   321: aload 64
    //   323: astore 47
    //   325: aload 68
    //   327: astore 52
    //   329: iload 23
    //   331: istore 17
    //   333: iload 31
    //   335: istore 10
    //   337: aload 61
    //   339: astore 43
    //   341: aload 39
    //   343: astore 58
    //   345: aload 65
    //   347: astore 48
    //   349: aload 69
    //   351: astore 53
    //   353: iload 24
    //   355: istore 18
    //   357: iload 32
    //   359: istore 11
    //   361: aload 62
    //   363: astore 44
    //   365: aload 39
    //   367: astore 59
    //   369: aload 66
    //   371: astore 49
    //   373: aload 70
    //   375: astore 54
    //   377: invokestatic 425	javax/xml/parsers/DocumentBuilderFactory:newInstance	()Ljavax/xml/parsers/DocumentBuilderFactory;
    //   380: invokevirtual 429	javax/xml/parsers/DocumentBuilderFactory:newDocumentBuilder	()Ljavax/xml/parsers/DocumentBuilder;
    //   383: new 431	java/io/ByteArrayInputStream
    //   386: dup
    //   387: aload 72
    //   389: ldc_w 433
    //   392: invokevirtual 437	java/lang/String:getBytes	(Ljava/lang/String;)[B
    //   395: invokespecial 440	java/io/ByteArrayInputStream:<init>	([B)V
    //   398: invokevirtual 446	javax/xml/parsers/DocumentBuilder:parse	(Ljava/io/InputStream;)Lorg/w3c/dom/Document;
    //   401: astore 75
    //   403: iload_3
    //   404: istore 14
    //   406: iload 28
    //   408: istore 7
    //   410: aload 37
    //   412: astore 40
    //   414: aload 39
    //   416: astore 55
    //   418: aload 36
    //   420: astore 45
    //   422: aload_1
    //   423: astore 50
    //   425: iload 21
    //   427: istore 15
    //   429: iload 29
    //   431: istore 8
    //   433: aload 38
    //   435: astore 41
    //   437: aload 39
    //   439: astore 56
    //   441: aload 63
    //   443: astore 46
    //   445: aload 67
    //   447: astore 51
    //   449: iload 22
    //   451: istore 16
    //   453: iload 30
    //   455: istore 9
    //   457: aload 60
    //   459: astore 42
    //   461: aload 39
    //   463: astore 57
    //   465: aload 64
    //   467: astore 47
    //   469: aload 68
    //   471: astore 52
    //   473: iload 23
    //   475: istore 17
    //   477: iload 31
    //   479: istore 10
    //   481: aload 61
    //   483: astore 43
    //   485: aload 39
    //   487: astore 58
    //   489: aload 65
    //   491: astore 48
    //   493: aload 69
    //   495: astore 53
    //   497: iload 24
    //   499: istore 18
    //   501: iload 32
    //   503: istore 11
    //   505: aload 62
    //   507: astore 44
    //   509: aload 39
    //   511: astore 59
    //   513: aload 66
    //   515: astore 49
    //   517: aload 70
    //   519: astore 54
    //   521: aload 75
    //   523: ldc_w 448
    //   526: invokeinterface 454 2 0
    //   531: iconst_0
    //   532: invokeinterface 460 2 0
    //   537: invokeinterface 466 1 0
    //   542: invokeinterface 469 1 0
    //   547: astore 72
    //   549: iload_3
    //   550: istore 14
    //   552: iload 28
    //   554: istore 7
    //   556: aload 37
    //   558: astore 40
    //   560: aload 39
    //   562: astore 55
    //   564: aload 36
    //   566: astore 45
    //   568: aload_1
    //   569: astore 50
    //   571: iload 21
    //   573: istore 15
    //   575: iload 29
    //   577: istore 8
    //   579: aload 38
    //   581: astore 41
    //   583: aload 39
    //   585: astore 56
    //   587: aload 63
    //   589: astore 46
    //   591: aload 67
    //   593: astore 51
    //   595: iload 22
    //   597: istore 16
    //   599: iload 30
    //   601: istore 9
    //   603: aload 60
    //   605: astore 42
    //   607: aload 39
    //   609: astore 57
    //   611: aload 64
    //   613: astore 47
    //   615: aload 68
    //   617: astore 52
    //   619: iload 23
    //   621: istore 17
    //   623: iload 31
    //   625: istore 10
    //   627: aload 61
    //   629: astore 43
    //   631: aload 39
    //   633: astore 58
    //   635: aload 65
    //   637: astore 48
    //   639: aload 69
    //   641: astore 53
    //   643: iload 24
    //   645: istore 18
    //   647: iload 32
    //   649: istore 11
    //   651: aload 62
    //   653: astore 44
    //   655: aload 39
    //   657: astore 59
    //   659: aload 66
    //   661: astore 49
    //   663: aload 70
    //   665: astore 54
    //   667: aload 75
    //   669: ldc_w 471
    //   672: invokeinterface 454 2 0
    //   677: iconst_0
    //   678: invokeinterface 460 2 0
    //   683: invokeinterface 466 1 0
    //   688: invokeinterface 469 1 0
    //   693: astore 73
    //   695: iload_3
    //   696: istore 14
    //   698: iload 28
    //   700: istore 7
    //   702: aload 37
    //   704: astore 40
    //   706: aload 39
    //   708: astore 55
    //   710: aload 36
    //   712: astore 45
    //   714: aload_1
    //   715: astore 50
    //   717: iload 21
    //   719: istore 15
    //   721: iload 29
    //   723: istore 8
    //   725: aload 38
    //   727: astore 41
    //   729: aload 39
    //   731: astore 56
    //   733: aload 63
    //   735: astore 46
    //   737: aload 67
    //   739: astore 51
    //   741: iload 22
    //   743: istore 16
    //   745: iload 30
    //   747: istore 9
    //   749: aload 60
    //   751: astore 42
    //   753: aload 39
    //   755: astore 57
    //   757: aload 64
    //   759: astore 47
    //   761: aload 68
    //   763: astore 52
    //   765: iload 23
    //   767: istore 17
    //   769: iload 31
    //   771: istore 10
    //   773: aload 61
    //   775: astore 43
    //   777: aload 39
    //   779: astore 58
    //   781: aload 65
    //   783: astore 48
    //   785: aload 69
    //   787: astore 53
    //   789: iload 24
    //   791: istore 18
    //   793: iload 32
    //   795: istore 11
    //   797: aload 62
    //   799: astore 44
    //   801: aload 39
    //   803: astore 59
    //   805: aload 66
    //   807: astore 49
    //   809: aload 70
    //   811: astore 54
    //   813: aload 75
    //   815: ldc_w 473
    //   818: invokeinterface 454 2 0
    //   823: iconst_0
    //   824: invokeinterface 460 2 0
    //   829: invokeinterface 466 1 0
    //   834: invokeinterface 469 1 0
    //   839: astore 74
    //   841: iload_3
    //   842: istore 14
    //   844: iload 28
    //   846: istore 7
    //   848: aload 37
    //   850: astore 40
    //   852: aload 39
    //   854: astore 55
    //   856: aload 36
    //   858: astore 45
    //   860: aload_1
    //   861: astore 50
    //   863: iload 21
    //   865: istore 15
    //   867: iload 29
    //   869: istore 8
    //   871: aload 38
    //   873: astore 41
    //   875: aload 39
    //   877: astore 56
    //   879: aload 63
    //   881: astore 46
    //   883: aload 67
    //   885: astore 51
    //   887: iload 22
    //   889: istore 16
    //   891: iload 30
    //   893: istore 9
    //   895: aload 60
    //   897: astore 42
    //   899: aload 39
    //   901: astore 57
    //   903: aload 64
    //   905: astore 47
    //   907: aload 68
    //   909: astore 52
    //   911: iload 23
    //   913: istore 17
    //   915: iload 31
    //   917: istore 10
    //   919: aload 61
    //   921: astore 43
    //   923: aload 39
    //   925: astore 58
    //   927: aload 65
    //   929: astore 48
    //   931: aload 69
    //   933: astore 53
    //   935: iload 24
    //   937: istore 18
    //   939: iload 32
    //   941: istore 11
    //   943: aload 62
    //   945: astore 44
    //   947: aload 39
    //   949: astore 59
    //   951: aload 66
    //   953: astore 49
    //   955: aload 70
    //   957: astore 54
    //   959: aload 75
    //   961: ldc_w 475
    //   964: invokeinterface 454 2 0
    //   969: iconst_0
    //   970: invokeinterface 460 2 0
    //   975: invokeinterface 466 1 0
    //   980: invokeinterface 469 1 0
    //   985: astore_1
    //   986: iload_3
    //   987: istore 14
    //   989: iload 28
    //   991: istore 7
    //   993: aload 37
    //   995: astore 40
    //   997: aload 39
    //   999: astore 55
    //   1001: aload 36
    //   1003: astore 45
    //   1005: aload_1
    //   1006: astore 50
    //   1008: iload 21
    //   1010: istore 15
    //   1012: iload 29
    //   1014: istore 8
    //   1016: aload 38
    //   1018: astore 41
    //   1020: aload 39
    //   1022: astore 56
    //   1024: aload 63
    //   1026: astore 46
    //   1028: aload_1
    //   1029: astore 51
    //   1031: iload 22
    //   1033: istore 16
    //   1035: iload 30
    //   1037: istore 9
    //   1039: aload 60
    //   1041: astore 42
    //   1043: aload 39
    //   1045: astore 57
    //   1047: aload 64
    //   1049: astore 47
    //   1051: aload_1
    //   1052: astore 52
    //   1054: iload 23
    //   1056: istore 17
    //   1058: iload 31
    //   1060: istore 10
    //   1062: aload 61
    //   1064: astore 43
    //   1066: aload 39
    //   1068: astore 58
    //   1070: aload 65
    //   1072: astore 48
    //   1074: aload_1
    //   1075: astore 53
    //   1077: iload 24
    //   1079: istore 18
    //   1081: iload 32
    //   1083: istore 11
    //   1085: aload 62
    //   1087: astore 44
    //   1089: aload 39
    //   1091: astore 59
    //   1093: aload 66
    //   1095: astore 49
    //   1097: aload_1
    //   1098: astore 54
    //   1100: aload 75
    //   1102: ldc_w 477
    //   1105: invokeinterface 454 2 0
    //   1110: iconst_0
    //   1111: invokeinterface 460 2 0
    //   1116: invokeinterface 466 1 0
    //   1121: invokeinterface 469 1 0
    //   1126: astore 36
    //   1128: iload_3
    //   1129: istore 14
    //   1131: iload 28
    //   1133: istore 7
    //   1135: aload 37
    //   1137: astore 40
    //   1139: aload 39
    //   1141: astore 55
    //   1143: aload 36
    //   1145: astore 45
    //   1147: aload_1
    //   1148: astore 50
    //   1150: iload 21
    //   1152: istore 15
    //   1154: iload 29
    //   1156: istore 8
    //   1158: aload 38
    //   1160: astore 41
    //   1162: aload 39
    //   1164: astore 56
    //   1166: aload 36
    //   1168: astore 46
    //   1170: aload_1
    //   1171: astore 51
    //   1173: iload 22
    //   1175: istore 16
    //   1177: iload 30
    //   1179: istore 9
    //   1181: aload 60
    //   1183: astore 42
    //   1185: aload 39
    //   1187: astore 57
    //   1189: aload 36
    //   1191: astore 47
    //   1193: aload_1
    //   1194: astore 52
    //   1196: iload 23
    //   1198: istore 17
    //   1200: iload 31
    //   1202: istore 10
    //   1204: aload 61
    //   1206: astore 43
    //   1208: aload 39
    //   1210: astore 58
    //   1212: aload 36
    //   1214: astore 48
    //   1216: aload_1
    //   1217: astore 53
    //   1219: iload 24
    //   1221: istore 18
    //   1223: iload 32
    //   1225: istore 11
    //   1227: aload 62
    //   1229: astore 44
    //   1231: aload 39
    //   1233: astore 59
    //   1235: aload 36
    //   1237: astore 49
    //   1239: aload_1
    //   1240: astore 54
    //   1242: aload 75
    //   1244: ldc_w 479
    //   1247: invokeinterface 454 2 0
    //   1252: iconst_0
    //   1253: invokeinterface 460 2 0
    //   1258: invokeinterface 466 1 0
    //   1263: invokeinterface 469 1 0
    //   1268: astore 38
    //   1270: iload_3
    //   1271: istore 14
    //   1273: iload 28
    //   1275: istore 7
    //   1277: aload 38
    //   1279: astore 40
    //   1281: aload 39
    //   1283: astore 55
    //   1285: aload 36
    //   1287: astore 45
    //   1289: aload_1
    //   1290: astore 50
    //   1292: iload 21
    //   1294: istore 15
    //   1296: iload 29
    //   1298: istore 8
    //   1300: aload 38
    //   1302: astore 41
    //   1304: aload 39
    //   1306: astore 56
    //   1308: aload 36
    //   1310: astore 46
    //   1312: aload_1
    //   1313: astore 51
    //   1315: iload 22
    //   1317: istore 16
    //   1319: iload 30
    //   1321: istore 9
    //   1323: aload 38
    //   1325: astore 42
    //   1327: aload 39
    //   1329: astore 57
    //   1331: aload 36
    //   1333: astore 47
    //   1335: aload_1
    //   1336: astore 52
    //   1338: iload 23
    //   1340: istore 17
    //   1342: iload 31
    //   1344: istore 10
    //   1346: aload 38
    //   1348: astore 43
    //   1350: aload 39
    //   1352: astore 58
    //   1354: aload 36
    //   1356: astore 48
    //   1358: aload_1
    //   1359: astore 53
    //   1361: iload 24
    //   1363: istore 18
    //   1365: iload 32
    //   1367: istore 11
    //   1369: aload 38
    //   1371: astore 44
    //   1373: aload 39
    //   1375: astore 59
    //   1377: aload 36
    //   1379: astore 49
    //   1381: aload_1
    //   1382: astore 54
    //   1384: iload 25
    //   1386: istore 12
    //   1388: iload 33
    //   1390: istore 19
    //   1392: aload 39
    //   1394: astore 60
    //   1396: aload 75
    //   1398: ldc_w 481
    //   1401: invokeinterface 454 2 0
    //   1406: astore 61
    //   1408: aload 39
    //   1410: astore 37
    //   1412: aload 61
    //   1414: ifnull +428 -> 1842
    //   1417: aload 39
    //   1419: astore 37
    //   1421: iload_3
    //   1422: istore 14
    //   1424: iload 28
    //   1426: istore 7
    //   1428: aload 38
    //   1430: astore 40
    //   1432: aload 39
    //   1434: astore 55
    //   1436: aload 36
    //   1438: astore 45
    //   1440: aload_1
    //   1441: astore 50
    //   1443: iload 21
    //   1445: istore 15
    //   1447: iload 29
    //   1449: istore 8
    //   1451: aload 38
    //   1453: astore 41
    //   1455: aload 39
    //   1457: astore 56
    //   1459: aload 36
    //   1461: astore 46
    //   1463: aload_1
    //   1464: astore 51
    //   1466: iload 22
    //   1468: istore 16
    //   1470: iload 30
    //   1472: istore 9
    //   1474: aload 38
    //   1476: astore 42
    //   1478: aload 39
    //   1480: astore 57
    //   1482: aload 36
    //   1484: astore 47
    //   1486: aload_1
    //   1487: astore 52
    //   1489: iload 23
    //   1491: istore 17
    //   1493: iload 31
    //   1495: istore 10
    //   1497: aload 38
    //   1499: astore 43
    //   1501: aload 39
    //   1503: astore 58
    //   1505: aload 36
    //   1507: astore 48
    //   1509: aload_1
    //   1510: astore 53
    //   1512: iload 24
    //   1514: istore 18
    //   1516: iload 32
    //   1518: istore 11
    //   1520: aload 38
    //   1522: astore 44
    //   1524: aload 39
    //   1526: astore 59
    //   1528: aload 36
    //   1530: astore 49
    //   1532: aload_1
    //   1533: astore 54
    //   1535: iload 25
    //   1537: istore 12
    //   1539: iload 33
    //   1541: istore 19
    //   1543: aload 39
    //   1545: astore 60
    //   1547: aload 61
    //   1549: invokeinterface 484 1 0
    //   1554: ifle +288 -> 1842
    //   1557: iload_3
    //   1558: istore 14
    //   1560: iload 28
    //   1562: istore 7
    //   1564: aload 38
    //   1566: astore 40
    //   1568: aload 39
    //   1570: astore 55
    //   1572: aload 36
    //   1574: astore 45
    //   1576: aload_1
    //   1577: astore 50
    //   1579: iload 21
    //   1581: istore 15
    //   1583: iload 29
    //   1585: istore 8
    //   1587: aload 38
    //   1589: astore 41
    //   1591: aload 39
    //   1593: astore 56
    //   1595: aload 36
    //   1597: astore 46
    //   1599: aload_1
    //   1600: astore 51
    //   1602: iload 22
    //   1604: istore 16
    //   1606: iload 30
    //   1608: istore 9
    //   1610: aload 38
    //   1612: astore 42
    //   1614: aload 39
    //   1616: astore 57
    //   1618: aload 36
    //   1620: astore 47
    //   1622: aload_1
    //   1623: astore 52
    //   1625: iload 23
    //   1627: istore 17
    //   1629: iload 31
    //   1631: istore 10
    //   1633: aload 38
    //   1635: astore 43
    //   1637: aload 39
    //   1639: astore 58
    //   1641: aload 36
    //   1643: astore 48
    //   1645: aload_1
    //   1646: astore 53
    //   1648: iload 24
    //   1650: istore 18
    //   1652: iload 32
    //   1654: istore 11
    //   1656: aload 38
    //   1658: astore 44
    //   1660: aload 39
    //   1662: astore 59
    //   1664: aload 36
    //   1666: astore 49
    //   1668: aload_1
    //   1669: astore 54
    //   1671: iload 25
    //   1673: istore 12
    //   1675: iload 33
    //   1677: istore 19
    //   1679: aload 39
    //   1681: astore 60
    //   1683: aload 61
    //   1685: iconst_0
    //   1686: invokeinterface 460 2 0
    //   1691: invokeinterface 466 1 0
    //   1696: astore 61
    //   1698: aload 39
    //   1700: astore 37
    //   1702: aload 61
    //   1704: ifnull +138 -> 1842
    //   1707: iload_3
    //   1708: istore 14
    //   1710: iload 28
    //   1712: istore 7
    //   1714: aload 38
    //   1716: astore 40
    //   1718: aload 39
    //   1720: astore 55
    //   1722: aload 36
    //   1724: astore 45
    //   1726: aload_1
    //   1727: astore 50
    //   1729: iload 21
    //   1731: istore 15
    //   1733: iload 29
    //   1735: istore 8
    //   1737: aload 38
    //   1739: astore 41
    //   1741: aload 39
    //   1743: astore 56
    //   1745: aload 36
    //   1747: astore 46
    //   1749: aload_1
    //   1750: astore 51
    //   1752: iload 22
    //   1754: istore 16
    //   1756: iload 30
    //   1758: istore 9
    //   1760: aload 38
    //   1762: astore 42
    //   1764: aload 39
    //   1766: astore 57
    //   1768: aload 36
    //   1770: astore 47
    //   1772: aload_1
    //   1773: astore 52
    //   1775: iload 23
    //   1777: istore 17
    //   1779: iload 31
    //   1781: istore 10
    //   1783: aload 38
    //   1785: astore 43
    //   1787: aload 39
    //   1789: astore 58
    //   1791: aload 36
    //   1793: astore 48
    //   1795: aload_1
    //   1796: astore 53
    //   1798: iload 24
    //   1800: istore 18
    //   1802: iload 32
    //   1804: istore 11
    //   1806: aload 38
    //   1808: astore 44
    //   1810: aload 39
    //   1812: astore 59
    //   1814: aload 36
    //   1816: astore 49
    //   1818: aload_1
    //   1819: astore 54
    //   1821: iload 25
    //   1823: istore 12
    //   1825: iload 33
    //   1827: istore 19
    //   1829: aload 39
    //   1831: astore 60
    //   1833: aload 61
    //   1835: invokeinterface 469 1 0
    //   1840: astore 37
    //   1842: iload 27
    //   1844: istore 13
    //   1846: iload 26
    //   1848: istore 5
    //   1850: iload_2
    //   1851: istore 4
    //   1853: iload 20
    //   1855: istore 6
    //   1857: iload_3
    //   1858: istore 14
    //   1860: iload 28
    //   1862: istore 7
    //   1864: aload 38
    //   1866: astore 40
    //   1868: aload 37
    //   1870: astore 55
    //   1872: aload 36
    //   1874: astore 45
    //   1876: aload_1
    //   1877: astore 50
    //   1879: iload 21
    //   1881: istore 15
    //   1883: iload 29
    //   1885: istore 8
    //   1887: aload 38
    //   1889: astore 41
    //   1891: aload 37
    //   1893: astore 56
    //   1895: aload 36
    //   1897: astore 46
    //   1899: aload_1
    //   1900: astore 51
    //   1902: iload 22
    //   1904: istore 16
    //   1906: iload 30
    //   1908: istore 9
    //   1910: aload 38
    //   1912: astore 42
    //   1914: aload 37
    //   1916: astore 57
    //   1918: aload 36
    //   1920: astore 47
    //   1922: aload_1
    //   1923: astore 52
    //   1925: iload 23
    //   1927: istore 17
    //   1929: iload 31
    //   1931: istore 10
    //   1933: aload 38
    //   1935: astore 43
    //   1937: aload 37
    //   1939: astore 58
    //   1941: aload 36
    //   1943: astore 48
    //   1945: aload_1
    //   1946: astore 53
    //   1948: iload 24
    //   1950: istore 18
    //   1952: iload 32
    //   1954: istore 11
    //   1956: aload 38
    //   1958: astore 44
    //   1960: aload 37
    //   1962: astore 59
    //   1964: aload 36
    //   1966: astore 49
    //   1968: aload_1
    //   1969: astore 54
    //   1971: iload 25
    //   1973: istore 12
    //   1975: iload 33
    //   1977: istore 19
    //   1979: aload 37
    //   1981: astore 60
    //   1983: aload 72
    //   1985: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   1988: ifne +1266 -> 3254
    //   1991: iload 27
    //   1993: istore 13
    //   1995: iload 26
    //   1997: istore 5
    //   1999: iload_2
    //   2000: istore 4
    //   2002: iload 20
    //   2004: istore 6
    //   2006: iload_3
    //   2007: istore 14
    //   2009: iload 28
    //   2011: istore 7
    //   2013: aload 38
    //   2015: astore 40
    //   2017: aload 37
    //   2019: astore 55
    //   2021: aload 36
    //   2023: astore 45
    //   2025: aload_1
    //   2026: astore 50
    //   2028: iload 21
    //   2030: istore 15
    //   2032: iload 29
    //   2034: istore 8
    //   2036: aload 38
    //   2038: astore 41
    //   2040: aload 37
    //   2042: astore 56
    //   2044: aload 36
    //   2046: astore 46
    //   2048: aload_1
    //   2049: astore 51
    //   2051: iload 22
    //   2053: istore 16
    //   2055: iload 30
    //   2057: istore 9
    //   2059: aload 38
    //   2061: astore 42
    //   2063: aload 37
    //   2065: astore 57
    //   2067: aload 36
    //   2069: astore 47
    //   2071: aload_1
    //   2072: astore 52
    //   2074: iload 23
    //   2076: istore 17
    //   2078: iload 31
    //   2080: istore 10
    //   2082: aload 38
    //   2084: astore 43
    //   2086: aload 37
    //   2088: astore 58
    //   2090: aload 36
    //   2092: astore 48
    //   2094: aload_1
    //   2095: astore 53
    //   2097: iload 24
    //   2099: istore 18
    //   2101: iload 32
    //   2103: istore 11
    //   2105: aload 38
    //   2107: astore 44
    //   2109: aload 37
    //   2111: astore 59
    //   2113: aload 36
    //   2115: astore 49
    //   2117: aload_1
    //   2118: astore 54
    //   2120: iload 25
    //   2122: istore 12
    //   2124: iload 33
    //   2126: istore 19
    //   2128: aload 37
    //   2130: astore 60
    //   2132: aload 73
    //   2134: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   2137: ifne +1117 -> 3254
    //   2140: iload 27
    //   2142: istore 13
    //   2144: iload 26
    //   2146: istore 5
    //   2148: iload_2
    //   2149: istore 4
    //   2151: iload 20
    //   2153: istore 6
    //   2155: iload_3
    //   2156: istore 14
    //   2158: iload 28
    //   2160: istore 7
    //   2162: aload 38
    //   2164: astore 40
    //   2166: aload 37
    //   2168: astore 55
    //   2170: aload 36
    //   2172: astore 45
    //   2174: aload_1
    //   2175: astore 50
    //   2177: iload 21
    //   2179: istore 15
    //   2181: iload 29
    //   2183: istore 8
    //   2185: aload 38
    //   2187: astore 41
    //   2189: aload 37
    //   2191: astore 56
    //   2193: aload 36
    //   2195: astore 46
    //   2197: aload_1
    //   2198: astore 51
    //   2200: iload 22
    //   2202: istore 16
    //   2204: iload 30
    //   2206: istore 9
    //   2208: aload 38
    //   2210: astore 42
    //   2212: aload 37
    //   2214: astore 57
    //   2216: aload 36
    //   2218: astore 47
    //   2220: aload_1
    //   2221: astore 52
    //   2223: iload 23
    //   2225: istore 17
    //   2227: iload 31
    //   2229: istore 10
    //   2231: aload 38
    //   2233: astore 43
    //   2235: aload 37
    //   2237: astore 58
    //   2239: aload 36
    //   2241: astore 48
    //   2243: aload_1
    //   2244: astore 53
    //   2246: iload 24
    //   2248: istore 18
    //   2250: iload 32
    //   2252: istore 11
    //   2254: aload 38
    //   2256: astore 44
    //   2258: aload 37
    //   2260: astore 59
    //   2262: aload 36
    //   2264: astore 49
    //   2266: aload_1
    //   2267: astore 54
    //   2269: iload 25
    //   2271: istore 12
    //   2273: iload 33
    //   2275: istore 19
    //   2277: aload 37
    //   2279: astore 60
    //   2281: aload 36
    //   2283: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   2286: ifne +968 -> 3254
    //   2289: iload 27
    //   2291: istore 13
    //   2293: iload 26
    //   2295: istore 5
    //   2297: iload_2
    //   2298: istore 4
    //   2300: iload 20
    //   2302: istore 6
    //   2304: iload_3
    //   2305: istore 14
    //   2307: iload 28
    //   2309: istore 7
    //   2311: aload 38
    //   2313: astore 40
    //   2315: aload 37
    //   2317: astore 55
    //   2319: aload 36
    //   2321: astore 45
    //   2323: aload_1
    //   2324: astore 50
    //   2326: iload 21
    //   2328: istore 15
    //   2330: iload 29
    //   2332: istore 8
    //   2334: aload 38
    //   2336: astore 41
    //   2338: aload 37
    //   2340: astore 56
    //   2342: aload 36
    //   2344: astore 46
    //   2346: aload_1
    //   2347: astore 51
    //   2349: iload 22
    //   2351: istore 16
    //   2353: iload 30
    //   2355: istore 9
    //   2357: aload 38
    //   2359: astore 42
    //   2361: aload 37
    //   2363: astore 57
    //   2365: aload 36
    //   2367: astore 47
    //   2369: aload_1
    //   2370: astore 52
    //   2372: iload 23
    //   2374: istore 17
    //   2376: iload 31
    //   2378: istore 10
    //   2380: aload 38
    //   2382: astore 43
    //   2384: aload 37
    //   2386: astore 58
    //   2388: aload 36
    //   2390: astore 48
    //   2392: aload_1
    //   2393: astore 53
    //   2395: iload 24
    //   2397: istore 18
    //   2399: iload 32
    //   2401: istore 11
    //   2403: aload 38
    //   2405: astore 44
    //   2407: aload 37
    //   2409: astore 59
    //   2411: aload 36
    //   2413: astore 49
    //   2415: aload_1
    //   2416: astore 54
    //   2418: iload 25
    //   2420: istore 12
    //   2422: iload 33
    //   2424: istore 19
    //   2426: aload 37
    //   2428: astore 60
    //   2430: aload 38
    //   2432: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   2435: ifne +819 -> 3254
    //   2438: iload 27
    //   2440: istore 13
    //   2442: iload 26
    //   2444: istore 5
    //   2446: iload_2
    //   2447: istore 4
    //   2449: iload 20
    //   2451: istore 6
    //   2453: iload_3
    //   2454: istore 14
    //   2456: iload 28
    //   2458: istore 7
    //   2460: aload 38
    //   2462: astore 40
    //   2464: aload 37
    //   2466: astore 55
    //   2468: aload 36
    //   2470: astore 45
    //   2472: aload_1
    //   2473: astore 50
    //   2475: iload 21
    //   2477: istore 15
    //   2479: iload 29
    //   2481: istore 8
    //   2483: aload 38
    //   2485: astore 41
    //   2487: aload 37
    //   2489: astore 56
    //   2491: aload 36
    //   2493: astore 46
    //   2495: aload_1
    //   2496: astore 51
    //   2498: iload 22
    //   2500: istore 16
    //   2502: iload 30
    //   2504: istore 9
    //   2506: aload 38
    //   2508: astore 42
    //   2510: aload 37
    //   2512: astore 57
    //   2514: aload 36
    //   2516: astore 47
    //   2518: aload_1
    //   2519: astore 52
    //   2521: iload 23
    //   2523: istore 17
    //   2525: iload 31
    //   2527: istore 10
    //   2529: aload 38
    //   2531: astore 43
    //   2533: aload 37
    //   2535: astore 58
    //   2537: aload 36
    //   2539: astore 48
    //   2541: aload_1
    //   2542: astore 53
    //   2544: iload 24
    //   2546: istore 18
    //   2548: iload 32
    //   2550: istore 11
    //   2552: aload 38
    //   2554: astore 44
    //   2556: aload 37
    //   2558: astore 59
    //   2560: aload 36
    //   2562: astore 49
    //   2564: aload_1
    //   2565: astore 54
    //   2567: iload 25
    //   2569: istore 12
    //   2571: iload 33
    //   2573: istore 19
    //   2575: aload 37
    //   2577: astore 60
    //   2579: aload_1
    //   2580: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   2583: ifne +671 -> 3254
    //   2586: iload 27
    //   2588: istore 13
    //   2590: iload 26
    //   2592: istore 5
    //   2594: iload_2
    //   2595: istore 4
    //   2597: iload 20
    //   2599: istore 6
    //   2601: iload_3
    //   2602: istore 14
    //   2604: iload 28
    //   2606: istore 7
    //   2608: aload 38
    //   2610: astore 40
    //   2612: aload 37
    //   2614: astore 55
    //   2616: aload 36
    //   2618: astore 45
    //   2620: aload_1
    //   2621: astore 50
    //   2623: iload 21
    //   2625: istore 15
    //   2627: iload 29
    //   2629: istore 8
    //   2631: aload 38
    //   2633: astore 41
    //   2635: aload 37
    //   2637: astore 56
    //   2639: aload 36
    //   2641: astore 46
    //   2643: aload_1
    //   2644: astore 51
    //   2646: iload 22
    //   2648: istore 16
    //   2650: iload 30
    //   2652: istore 9
    //   2654: aload 38
    //   2656: astore 42
    //   2658: aload 37
    //   2660: astore 57
    //   2662: aload 36
    //   2664: astore 47
    //   2666: aload_1
    //   2667: astore 52
    //   2669: iload 23
    //   2671: istore 17
    //   2673: iload 31
    //   2675: istore 10
    //   2677: aload 38
    //   2679: astore 43
    //   2681: aload 37
    //   2683: astore 58
    //   2685: aload 36
    //   2687: astore 48
    //   2689: aload_1
    //   2690: astore 53
    //   2692: iload 24
    //   2694: istore 18
    //   2696: iload 32
    //   2698: istore 11
    //   2700: aload 38
    //   2702: astore 44
    //   2704: aload 37
    //   2706: astore 59
    //   2708: aload 36
    //   2710: astore 49
    //   2712: aload_1
    //   2713: astore 54
    //   2715: iload 25
    //   2717: istore 12
    //   2719: iload 33
    //   2721: istore 19
    //   2723: aload 37
    //   2725: astore 60
    //   2727: aload 74
    //   2729: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   2732: ifne +522 -> 3254
    //   2735: iload_3
    //   2736: istore 14
    //   2738: iload 28
    //   2740: istore 7
    //   2742: aload 38
    //   2744: astore 40
    //   2746: aload 37
    //   2748: astore 55
    //   2750: aload 36
    //   2752: astore 45
    //   2754: aload_1
    //   2755: astore 50
    //   2757: iload 21
    //   2759: istore 15
    //   2761: iload 29
    //   2763: istore 8
    //   2765: aload 38
    //   2767: astore 41
    //   2769: aload 37
    //   2771: astore 56
    //   2773: aload 36
    //   2775: astore 46
    //   2777: aload_1
    //   2778: astore 51
    //   2780: iload 22
    //   2782: istore 16
    //   2784: iload 30
    //   2786: istore 9
    //   2788: aload 38
    //   2790: astore 42
    //   2792: aload 37
    //   2794: astore 57
    //   2796: aload 36
    //   2798: astore 47
    //   2800: aload_1
    //   2801: astore 52
    //   2803: iload 23
    //   2805: istore 17
    //   2807: iload 31
    //   2809: istore 10
    //   2811: aload 38
    //   2813: astore 43
    //   2815: aload 37
    //   2817: astore 58
    //   2819: aload 36
    //   2821: astore 48
    //   2823: aload_1
    //   2824: astore 53
    //   2826: iload 24
    //   2828: istore 18
    //   2830: iload 32
    //   2832: istore 11
    //   2834: aload 38
    //   2836: astore 44
    //   2838: aload 37
    //   2840: astore 59
    //   2842: aload 36
    //   2844: astore 49
    //   2846: aload_1
    //   2847: astore 54
    //   2849: iload 25
    //   2851: istore 12
    //   2853: iload 33
    //   2855: istore 19
    //   2857: aload 37
    //   2859: astore 60
    //   2861: aload 72
    //   2863: invokestatic 487	java/lang/Integer:valueOf	(Ljava/lang/String;)Ljava/lang/Integer;
    //   2866: invokevirtual 490	java/lang/Integer:intValue	()I
    //   2869: istore_2
    //   2870: iload_3
    //   2871: istore 14
    //   2873: iload_2
    //   2874: istore 7
    //   2876: aload 38
    //   2878: astore 40
    //   2880: aload 37
    //   2882: astore 55
    //   2884: aload 36
    //   2886: astore 45
    //   2888: aload_1
    //   2889: astore 50
    //   2891: iload 21
    //   2893: istore 15
    //   2895: iload_2
    //   2896: istore 8
    //   2898: aload 38
    //   2900: astore 41
    //   2902: aload 37
    //   2904: astore 56
    //   2906: aload 36
    //   2908: astore 46
    //   2910: aload_1
    //   2911: astore 51
    //   2913: iload 22
    //   2915: istore 16
    //   2917: iload_2
    //   2918: istore 9
    //   2920: aload 38
    //   2922: astore 42
    //   2924: aload 37
    //   2926: astore 57
    //   2928: aload 36
    //   2930: astore 47
    //   2932: aload_1
    //   2933: astore 52
    //   2935: iload 23
    //   2937: istore 17
    //   2939: iload_2
    //   2940: istore 10
    //   2942: aload 38
    //   2944: astore 43
    //   2946: aload 37
    //   2948: astore 58
    //   2950: aload 36
    //   2952: astore 48
    //   2954: aload_1
    //   2955: astore 53
    //   2957: iload 24
    //   2959: istore 18
    //   2961: iload_2
    //   2962: istore 11
    //   2964: aload 38
    //   2966: astore 44
    //   2968: aload 37
    //   2970: astore 59
    //   2972: aload 36
    //   2974: astore 49
    //   2976: aload_1
    //   2977: astore 54
    //   2979: iload 25
    //   2981: istore 12
    //   2983: iload_2
    //   2984: istore 19
    //   2986: aload 37
    //   2988: astore 60
    //   2990: aload 73
    //   2992: invokestatic 487	java/lang/Integer:valueOf	(Ljava/lang/String;)Ljava/lang/Integer;
    //   2995: invokevirtual 490	java/lang/Integer:intValue	()I
    //   2998: istore_3
    //   2999: iload_3
    //   3000: istore 14
    //   3002: iload_2
    //   3003: istore 7
    //   3005: aload 38
    //   3007: astore 40
    //   3009: aload 37
    //   3011: astore 55
    //   3013: aload 36
    //   3015: astore 45
    //   3017: aload_1
    //   3018: astore 50
    //   3020: iload_3
    //   3021: istore 15
    //   3023: iload_2
    //   3024: istore 8
    //   3026: aload 38
    //   3028: astore 41
    //   3030: aload 37
    //   3032: astore 56
    //   3034: aload 36
    //   3036: astore 46
    //   3038: aload_1
    //   3039: astore 51
    //   3041: iload_3
    //   3042: istore 16
    //   3044: iload_2
    //   3045: istore 9
    //   3047: aload 38
    //   3049: astore 42
    //   3051: aload 37
    //   3053: astore 57
    //   3055: aload 36
    //   3057: astore 47
    //   3059: aload_1
    //   3060: astore 52
    //   3062: iload_3
    //   3063: istore 17
    //   3065: iload_2
    //   3066: istore 10
    //   3068: aload 38
    //   3070: astore 43
    //   3072: aload 37
    //   3074: astore 58
    //   3076: aload 36
    //   3078: astore 48
    //   3080: aload_1
    //   3081: astore 53
    //   3083: iload_3
    //   3084: istore 18
    //   3086: iload_2
    //   3087: istore 11
    //   3089: aload 38
    //   3091: astore 44
    //   3093: aload 37
    //   3095: astore 59
    //   3097: aload 36
    //   3099: astore 49
    //   3101: aload_1
    //   3102: astore 54
    //   3104: iload_3
    //   3105: istore 12
    //   3107: iload_2
    //   3108: istore 19
    //   3110: aload 37
    //   3112: astore 60
    //   3114: aload 74
    //   3116: invokestatic 487	java/lang/Integer:valueOf	(Ljava/lang/String;)Ljava/lang/Integer;
    //   3119: invokevirtual 490	java/lang/Integer:intValue	()I
    //   3122: istore 4
    //   3124: iload 4
    //   3126: istore 7
    //   3128: iload 7
    //   3130: istore 13
    //   3132: iload_3
    //   3133: istore 5
    //   3135: iload_2
    //   3136: istore 4
    //   3138: iload 20
    //   3140: istore 6
    //   3142: iload_2
    //   3143: iflt +111 -> 3254
    //   3146: iload 7
    //   3148: istore 13
    //   3150: iload_3
    //   3151: istore 5
    //   3153: iload_2
    //   3154: istore 4
    //   3156: iload 20
    //   3158: istore 6
    //   3160: iload_2
    //   3161: iconst_1
    //   3162: if_icmpgt +92 -> 3254
    //   3165: iload 7
    //   3167: istore 13
    //   3169: iload_3
    //   3170: istore 5
    //   3172: iload_2
    //   3173: istore 4
    //   3175: iload 20
    //   3177: istore 6
    //   3179: iload_3
    //   3180: iflt +74 -> 3254
    //   3183: iload 7
    //   3185: istore 13
    //   3187: iload_3
    //   3188: istore 5
    //   3190: iload_2
    //   3191: istore 4
    //   3193: iload 20
    //   3195: istore 6
    //   3197: iload_3
    //   3198: iconst_1
    //   3199: if_icmpgt +55 -> 3254
    //   3202: iload 7
    //   3204: istore 13
    //   3206: iload_3
    //   3207: istore 5
    //   3209: iload_2
    //   3210: istore 4
    //   3212: iload 20
    //   3214: istore 6
    //   3216: iload 7
    //   3218: iflt +36 -> 3254
    //   3221: iload 7
    //   3223: istore 13
    //   3225: iload_3
    //   3226: istore 5
    //   3228: iload_2
    //   3229: istore 4
    //   3231: iload 20
    //   3233: istore 6
    //   3235: iload 7
    //   3237: iconst_1
    //   3238: if_icmpgt +16 -> 3254
    //   3241: iconst_1
    //   3242: istore 6
    //   3244: iload_2
    //   3245: istore 4
    //   3247: iload_3
    //   3248: istore 5
    //   3250: iload 7
    //   3252: istore 13
    //   3254: aload 37
    //   3256: astore 39
    //   3258: aload_1
    //   3259: astore 37
    //   3261: iload 6
    //   3263: istore_2
    //   3264: aload 36
    //   3266: astore_1
    //   3267: iload 5
    //   3269: istore_3
    //   3270: iload 4
    //   3272: istore 6
    //   3274: iload 13
    //   3276: istore 5
    //   3278: aload 39
    //   3280: astore 36
    //   3282: iload_3
    //   3283: istore 4
    //   3285: iload 6
    //   3287: istore_3
    //   3288: iload_2
    //   3289: ifeq +97 -> 3386
    //   3292: invokestatic 495	com/tencent/mobileqq/activity/aio/qim/QIMUserManager:a	()Lcom/tencent/mobileqq/activity/aio/qim/QIMUserManager;
    //   3295: aload 71
    //   3297: invokevirtual 498	com/tencent/mobileqq/activity/aio/qim/QIMUserManager:a	(Lcom/tencent/mobileqq/app/QQAppInterface;)Ljava/lang/String;
    //   3300: astore 39
    //   3302: invokestatic 495	com/tencent/mobileqq/activity/aio/qim/QIMUserManager:a	()Lcom/tencent/mobileqq/activity/aio/qim/QIMUserManager;
    //   3305: aload 71
    //   3307: invokevirtual 500	com/tencent/mobileqq/activity/aio/qim/QIMUserManager:c	(Lcom/tencent/mobileqq/app/QQAppInterface;)Ljava/lang/String;
    //   3310: astore 40
    //   3312: iconst_0
    //   3313: istore 35
    //   3315: aload 39
    //   3317: aload_1
    //   3318: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   3321: ifeq +13 -> 3334
    //   3324: aload 40
    //   3326: aload 38
    //   3328: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   3331: ifne +6 -> 3337
    //   3334: iconst_1
    //   3335: istore 35
    //   3337: invokestatic 495	com/tencent/mobileqq/activity/aio/qim/QIMUserManager:a	()Lcom/tencent/mobileqq/activity/aio/qim/QIMUserManager;
    //   3340: iload_3
    //   3341: iload 4
    //   3343: aload_1
    //   3344: aload 36
    //   3346: aload 38
    //   3348: aload 37
    //   3350: iload 35
    //   3352: iload 5
    //   3354: invokevirtual 506	com/tencent/mobileqq/activity/aio/qim/QIMUserManager:a	(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZI)V
    //   3357: aload 71
    //   3359: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   3362: aload 71
    //   3364: invokevirtual 289	com/tencent/mobileqq/app/QQAppInterface:getCurrentAccountUin	()Ljava/lang/String;
    //   3367: iload 34
    //   3369: iload_3
    //   3370: iload 4
    //   3372: aload_1
    //   3373: aload 38
    //   3375: aload 36
    //   3377: aload 37
    //   3379: iload 35
    //   3381: iload 5
    //   3383: invokestatic 509	com/tencent/mobileqq/utils/SharedPreUtils:a	(Landroid/content/Context;Ljava/lang/String;IIILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZI)V
    //   3386: return
    //   3387: astore 39
    //   3389: ldc 13
    //   3391: astore 36
    //   3393: aconst_null
    //   3394: astore 37
    //   3396: iconst_0
    //   3397: istore_3
    //   3398: aconst_null
    //   3399: astore_1
    //   3400: aconst_null
    //   3401: astore 38
    //   3403: iconst_0
    //   3404: istore_2
    //   3405: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   3408: ifeq +16 -> 3424
    //   3411: ldc_w 413
    //   3414: iconst_2
    //   3415: aload 39
    //   3417: iconst_0
    //   3418: anewarray 65	java/lang/Object
    //   3421: invokestatic 512	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/Throwable;[Ljava/lang/Object;)V
    //   3424: iconst_0
    //   3425: istore 5
    //   3427: iconst_0
    //   3428: istore 6
    //   3430: aload 38
    //   3432: astore 39
    //   3434: aload_1
    //   3435: astore 38
    //   3437: iload_2
    //   3438: istore 4
    //   3440: iload 6
    //   3442: istore_2
    //   3443: aload 39
    //   3445: astore_1
    //   3446: goto -158 -> 3288
    //   3449: astore_1
    //   3450: iload 14
    //   3452: istore 4
    //   3454: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   3457: ifeq +15 -> 3472
    //   3460: ldc_w 413
    //   3463: iconst_2
    //   3464: aload_1
    //   3465: iconst_0
    //   3466: anewarray 65	java/lang/Object
    //   3469: invokestatic 512	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/Throwable;[Ljava/lang/Object;)V
    //   3472: iload 7
    //   3474: istore_3
    //   3475: aload 55
    //   3477: astore 36
    //   3479: aload 50
    //   3481: astore 37
    //   3483: iconst_0
    //   3484: istore 5
    //   3486: iconst_0
    //   3487: istore_2
    //   3488: aload 45
    //   3490: astore_1
    //   3491: aload 40
    //   3493: astore 38
    //   3495: goto -207 -> 3288
    //   3498: astore_1
    //   3499: iload 15
    //   3501: istore 4
    //   3503: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   3506: ifeq +15 -> 3521
    //   3509: ldc_w 413
    //   3512: iconst_2
    //   3513: aload_1
    //   3514: iconst_0
    //   3515: anewarray 65	java/lang/Object
    //   3518: invokestatic 512	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/Throwable;[Ljava/lang/Object;)V
    //   3521: iload 8
    //   3523: istore_3
    //   3524: aload 56
    //   3526: astore 36
    //   3528: aload 51
    //   3530: astore 37
    //   3532: iconst_0
    //   3533: istore 5
    //   3535: iconst_0
    //   3536: istore_2
    //   3537: aload 46
    //   3539: astore_1
    //   3540: aload 41
    //   3542: astore 38
    //   3544: goto -256 -> 3288
    //   3547: astore_1
    //   3548: iload 16
    //   3550: istore 4
    //   3552: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   3555: ifeq +15 -> 3570
    //   3558: ldc_w 413
    //   3561: iconst_2
    //   3562: aload_1
    //   3563: iconst_0
    //   3564: anewarray 65	java/lang/Object
    //   3567: invokestatic 512	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/Throwable;[Ljava/lang/Object;)V
    //   3570: iload 9
    //   3572: istore_3
    //   3573: aload 57
    //   3575: astore 36
    //   3577: aload 52
    //   3579: astore 37
    //   3581: iconst_0
    //   3582: istore 5
    //   3584: iconst_0
    //   3585: istore_2
    //   3586: aload 47
    //   3588: astore_1
    //   3589: aload 42
    //   3591: astore 38
    //   3593: goto -305 -> 3288
    //   3596: astore_1
    //   3597: iload 17
    //   3599: istore 4
    //   3601: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   3604: ifeq +15 -> 3619
    //   3607: ldc_w 413
    //   3610: iconst_2
    //   3611: aload_1
    //   3612: iconst_0
    //   3613: anewarray 65	java/lang/Object
    //   3616: invokestatic 512	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/Throwable;[Ljava/lang/Object;)V
    //   3619: iload 10
    //   3621: istore_3
    //   3622: aload 58
    //   3624: astore 36
    //   3626: aload 53
    //   3628: astore 37
    //   3630: iconst_0
    //   3631: istore 5
    //   3633: iconst_0
    //   3634: istore_2
    //   3635: aload 48
    //   3637: astore_1
    //   3638: aload 43
    //   3640: astore 38
    //   3642: goto -354 -> 3288
    //   3645: astore_1
    //   3646: iload 18
    //   3648: istore 4
    //   3650: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   3653: ifeq +15 -> 3668
    //   3656: ldc_w 413
    //   3659: iconst_2
    //   3660: aload_1
    //   3661: iconst_0
    //   3662: anewarray 65	java/lang/Object
    //   3665: invokestatic 512	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/Throwable;[Ljava/lang/Object;)V
    //   3668: iload 11
    //   3670: istore_3
    //   3671: aload 59
    //   3673: astore 36
    //   3675: aload 54
    //   3677: astore 37
    //   3679: iconst_0
    //   3680: istore 5
    //   3682: iconst_0
    //   3683: istore_2
    //   3684: aload 49
    //   3686: astore_1
    //   3687: aload 44
    //   3689: astore 38
    //   3691: goto -403 -> 3288
    //   3694: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   3697: ifeq -311 -> 3386
    //   3700: ldc 63
    //   3702: iconst_2
    //   3703: new 122	java/lang/StringBuilder
    //   3706: dup
    //   3707: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   3710: ldc_w 514
    //   3713: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   3716: aload_1
    //   3717: getfield 73	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:version	Lcom/tencent/mobileqq/pb/PBInt32Field;
    //   3720: invokevirtual 79	com/tencent/mobileqq/pb/PBInt32Field:get	()I
    //   3723: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   3726: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   3729: invokestatic 141	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/String;)V
    //   3732: return
    //   3733: astore 39
    //   3735: ldc 13
    //   3737: astore 36
    //   3739: aload_1
    //   3740: astore 37
    //   3742: iconst_0
    //   3743: istore_3
    //   3744: aconst_null
    //   3745: astore_1
    //   3746: aconst_null
    //   3747: astore 38
    //   3749: iconst_0
    //   3750: istore_2
    //   3751: goto -346 -> 3405
    //   3754: astore 39
    //   3756: ldc 13
    //   3758: astore 40
    //   3760: aload_1
    //   3761: astore 37
    //   3763: iconst_0
    //   3764: istore_3
    //   3765: aconst_null
    //   3766: astore_1
    //   3767: aload 36
    //   3769: astore 38
    //   3771: iconst_0
    //   3772: istore_2
    //   3773: aload 40
    //   3775: astore 36
    //   3777: goto -372 -> 3405
    //   3780: astore 39
    //   3782: aload_1
    //   3783: astore 37
    //   3785: iload 19
    //   3787: istore_3
    //   3788: aload 38
    //   3790: astore_1
    //   3791: aload 36
    //   3793: astore 38
    //   3795: iload 12
    //   3797: istore_2
    //   3798: aload 60
    //   3800: astore 36
    //   3802: goto -397 -> 3405
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	3805	0	this	ConfigServlet
    //   0	3805	1	paramConfig	ConfigurationService.Config
    //   31	3767	2	i	int
    //   45	3743	3	j	int
    //   49	3600	4	k	int
    //   1848	1833	5	m	int
    //   1855	1586	6	n	int
    //   264	3209	7	i1	int
    //   287	3235	8	i2	int
    //   311	3260	9	i3	int
    //   335	3285	10	i4	int
    //   359	3310	11	i5	int
    //   1386	2410	12	i6	int
    //   1844	1431	13	i7	int
    //   260	3191	14	i8	int
    //   283	3217	15	i9	int
    //   307	3242	16	i10	int
    //   331	3267	17	i11	int
    //   355	3292	18	i12	int
    //   1390	2396	19	i13	int
    //   166	3066	20	i14	int
    //   191	2701	21	i15	int
    //   194	2720	22	i16	int
    //   197	2739	23	i17	int
    //   200	2758	24	i18	int
    //   203	2777	25	i19	int
    //   206	2385	26	i20	int
    //   209	2378	27	i21	int
    //   169	2570	28	i22	int
    //   172	2590	29	i23	int
    //   175	2610	30	i24	int
    //   178	2630	31	i25	int
    //   181	2650	32	i26	int
    //   184	2670	33	i27	int
    //   16	3352	34	i28	int
    //   3313	67	35	bool	boolean
    //   238	3563	36	localObject1	Object
    //   257	3527	37	localObject2	Object
    //   245	3549	38	localObject3	Object
    //   242	3074	39	localObject4	Object
    //   3387	29	39	localParserConfigurationException1	javax.xml.parsers.ParserConfigurationException
    //   3432	12	39	localObject5	Object
    //   3733	1	39	localParserConfigurationException2	javax.xml.parsers.ParserConfigurationException
    //   3754	1	39	localParserConfigurationException3	javax.xml.parsers.ParserConfigurationException
    //   3780	1	39	localParserConfigurationException4	javax.xml.parsers.ParserConfigurationException
    //   268	3506	40	localObject6	Object
    //   291	3250	41	localObject7	Object
    //   315	3275	42	localObject8	Object
    //   339	3300	43	localObject9	Object
    //   363	3325	44	localObject10	Object
    //   276	3213	45	localObject11	Object
    //   299	3239	46	localObject12	Object
    //   323	3264	47	localObject13	Object
    //   347	3289	48	localObject14	Object
    //   371	3314	49	localObject15	Object
    //   279	3201	50	localConfig	ConfigurationService.Config
    //   303	3226	51	localObject16	Object
    //   327	3251	52	localObject17	Object
    //   351	3276	53	localObject18	Object
    //   375	3301	54	localObject19	Object
    //   272	3204	55	localObject20	Object
    //   295	3230	56	localObject21	Object
    //   319	3255	57	localObject22	Object
    //   343	3280	58	localObject23	Object
    //   367	3305	59	localObject24	Object
    //   248	3551	60	localObject25	Object
    //   251	1583	61	localObject26	Object
    //   254	974	62	localObject27	Object
    //   226	799	63	localObject28	Object
    //   229	819	64	localObject29	Object
    //   232	839	65	localObject30	Object
    //   235	859	66	localObject31	Object
    //   212	672	67	localObject32	Object
    //   215	693	68	localObject33	Object
    //   218	714	69	localObject34	Object
    //   221	735	70	localObject35	Object
    //   7	3356	71	localQQAppInterface	QQAppInterface
    //   140	2722	72	str1	String
    //   693	2298	73	str2	String
    //   839	2276	74	str3	String
    //   401	996	75	localDocument	Document
    // Exception table:
    //   from	to	target	type
    //   377	403	3387	javax/xml/parsers/ParserConfigurationException
    //   521	549	3387	javax/xml/parsers/ParserConfigurationException
    //   667	695	3387	javax/xml/parsers/ParserConfigurationException
    //   813	841	3387	javax/xml/parsers/ParserConfigurationException
    //   959	986	3387	javax/xml/parsers/ParserConfigurationException
    //   377	403	3449	java/lang/NumberFormatException
    //   521	549	3449	java/lang/NumberFormatException
    //   667	695	3449	java/lang/NumberFormatException
    //   813	841	3449	java/lang/NumberFormatException
    //   959	986	3449	java/lang/NumberFormatException
    //   1100	1128	3449	java/lang/NumberFormatException
    //   1242	1270	3449	java/lang/NumberFormatException
    //   1396	1408	3449	java/lang/NumberFormatException
    //   1547	1557	3449	java/lang/NumberFormatException
    //   1683	1698	3449	java/lang/NumberFormatException
    //   1833	1842	3449	java/lang/NumberFormatException
    //   1983	1991	3449	java/lang/NumberFormatException
    //   2132	2140	3449	java/lang/NumberFormatException
    //   2281	2289	3449	java/lang/NumberFormatException
    //   2430	2438	3449	java/lang/NumberFormatException
    //   2579	2586	3449	java/lang/NumberFormatException
    //   2727	2735	3449	java/lang/NumberFormatException
    //   2861	2870	3449	java/lang/NumberFormatException
    //   2990	2999	3449	java/lang/NumberFormatException
    //   3114	3124	3449	java/lang/NumberFormatException
    //   377	403	3498	java/io/UnsupportedEncodingException
    //   521	549	3498	java/io/UnsupportedEncodingException
    //   667	695	3498	java/io/UnsupportedEncodingException
    //   813	841	3498	java/io/UnsupportedEncodingException
    //   959	986	3498	java/io/UnsupportedEncodingException
    //   1100	1128	3498	java/io/UnsupportedEncodingException
    //   1242	1270	3498	java/io/UnsupportedEncodingException
    //   1396	1408	3498	java/io/UnsupportedEncodingException
    //   1547	1557	3498	java/io/UnsupportedEncodingException
    //   1683	1698	3498	java/io/UnsupportedEncodingException
    //   1833	1842	3498	java/io/UnsupportedEncodingException
    //   1983	1991	3498	java/io/UnsupportedEncodingException
    //   2132	2140	3498	java/io/UnsupportedEncodingException
    //   2281	2289	3498	java/io/UnsupportedEncodingException
    //   2430	2438	3498	java/io/UnsupportedEncodingException
    //   2579	2586	3498	java/io/UnsupportedEncodingException
    //   2727	2735	3498	java/io/UnsupportedEncodingException
    //   2861	2870	3498	java/io/UnsupportedEncodingException
    //   2990	2999	3498	java/io/UnsupportedEncodingException
    //   3114	3124	3498	java/io/UnsupportedEncodingException
    //   377	403	3547	java/io/IOException
    //   521	549	3547	java/io/IOException
    //   667	695	3547	java/io/IOException
    //   813	841	3547	java/io/IOException
    //   959	986	3547	java/io/IOException
    //   1100	1128	3547	java/io/IOException
    //   1242	1270	3547	java/io/IOException
    //   1396	1408	3547	java/io/IOException
    //   1547	1557	3547	java/io/IOException
    //   1683	1698	3547	java/io/IOException
    //   1833	1842	3547	java/io/IOException
    //   1983	1991	3547	java/io/IOException
    //   2132	2140	3547	java/io/IOException
    //   2281	2289	3547	java/io/IOException
    //   2430	2438	3547	java/io/IOException
    //   2579	2586	3547	java/io/IOException
    //   2727	2735	3547	java/io/IOException
    //   2861	2870	3547	java/io/IOException
    //   2990	2999	3547	java/io/IOException
    //   3114	3124	3547	java/io/IOException
    //   377	403	3596	org/xml/sax/SAXException
    //   521	549	3596	org/xml/sax/SAXException
    //   667	695	3596	org/xml/sax/SAXException
    //   813	841	3596	org/xml/sax/SAXException
    //   959	986	3596	org/xml/sax/SAXException
    //   1100	1128	3596	org/xml/sax/SAXException
    //   1242	1270	3596	org/xml/sax/SAXException
    //   1396	1408	3596	org/xml/sax/SAXException
    //   1547	1557	3596	org/xml/sax/SAXException
    //   1683	1698	3596	org/xml/sax/SAXException
    //   1833	1842	3596	org/xml/sax/SAXException
    //   1983	1991	3596	org/xml/sax/SAXException
    //   2132	2140	3596	org/xml/sax/SAXException
    //   2281	2289	3596	org/xml/sax/SAXException
    //   2430	2438	3596	org/xml/sax/SAXException
    //   2579	2586	3596	org/xml/sax/SAXException
    //   2727	2735	3596	org/xml/sax/SAXException
    //   2861	2870	3596	org/xml/sax/SAXException
    //   2990	2999	3596	org/xml/sax/SAXException
    //   3114	3124	3596	org/xml/sax/SAXException
    //   377	403	3645	java/lang/NullPointerException
    //   521	549	3645	java/lang/NullPointerException
    //   667	695	3645	java/lang/NullPointerException
    //   813	841	3645	java/lang/NullPointerException
    //   959	986	3645	java/lang/NullPointerException
    //   1100	1128	3645	java/lang/NullPointerException
    //   1242	1270	3645	java/lang/NullPointerException
    //   1396	1408	3645	java/lang/NullPointerException
    //   1547	1557	3645	java/lang/NullPointerException
    //   1683	1698	3645	java/lang/NullPointerException
    //   1833	1842	3645	java/lang/NullPointerException
    //   1983	1991	3645	java/lang/NullPointerException
    //   2132	2140	3645	java/lang/NullPointerException
    //   2281	2289	3645	java/lang/NullPointerException
    //   2430	2438	3645	java/lang/NullPointerException
    //   2579	2586	3645	java/lang/NullPointerException
    //   2727	2735	3645	java/lang/NullPointerException
    //   2861	2870	3645	java/lang/NullPointerException
    //   2990	2999	3645	java/lang/NullPointerException
    //   3114	3124	3645	java/lang/NullPointerException
    //   1100	1128	3733	javax/xml/parsers/ParserConfigurationException
    //   1242	1270	3754	javax/xml/parsers/ParserConfigurationException
    //   1396	1408	3780	javax/xml/parsers/ParserConfigurationException
    //   1547	1557	3780	javax/xml/parsers/ParserConfigurationException
    //   1683	1698	3780	javax/xml/parsers/ParserConfigurationException
    //   1833	1842	3780	javax/xml/parsers/ParserConfigurationException
    //   1983	1991	3780	javax/xml/parsers/ParserConfigurationException
    //   2132	2140	3780	javax/xml/parsers/ParserConfigurationException
    //   2281	2289	3780	javax/xml/parsers/ParserConfigurationException
    //   2430	2438	3780	javax/xml/parsers/ParserConfigurationException
    //   2579	2586	3780	javax/xml/parsers/ParserConfigurationException
    //   2727	2735	3780	javax/xml/parsers/ParserConfigurationException
    //   2861	2870	3780	javax/xml/parsers/ParserConfigurationException
    //   2990	2999	3780	javax/xml/parsers/ParserConfigurationException
    //   3114	3124	3780	javax/xml/parsers/ParserConfigurationException
  }
  
  private void G(ConfigurationService.Config paramConfig)
  {
    QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
    int n = paramConfig.version.get();
    int i = SharedPreUtils.aQ(localQQAppInterface.getApp(), localQQAppInterface.getAccount());
    int j = SharedPreUtils.aR(localQQAppInterface.getApp(), localQQAppInterface.getAccount());
    int k = AppSetting.jdField_a_of_type_Int;
    if (QLog.isColorLevel()) {
      QLog.d("SPLASH_ConfigServlet", 2, String.format("received TimUserSpecial remote version: %d, localVersion: %d ,originalAppId:%d, currentAppId:%d", new Object[] { Integer.valueOf(n), Integer.valueOf(i), Integer.valueOf(j), Integer.valueOf(k) }));
    }
    if (j != k)
    {
      SharedPreUtils.af(localQQAppInterface.getApp(), localQQAppInterface.getAccount(), k);
      i = 0;
    }
    Object localObject;
    int m;
    ConfigurationService.Config localConfig;
    String str;
    if (n != i)
    {
      localObject = a(paramConfig);
      if ((localObject == null) || (((List)localObject).size() <= 0)) {
        break label440;
      }
      m = 0;
      j = 0;
      localConfig = null;
      paramConfig = null;
      str = null;
    }
    for (;;)
    {
      boolean bool;
      try
      {
        localObject = new JSONObject((String)((List)localObject).get(0));
        if (!((JSONObject)localObject).has("TIMPersonality")) {
          break label484;
        }
        localObject = ((JSONObject)localObject).getJSONObject("TIMPersonality");
        if (!((JSONObject)localObject).has("aioTitleBgSwitch")) {
          break label479;
        }
        j = ((JSONObject)localObject).getInt("aioTitleBgSwitch");
        i = 1;
        if (((JSONObject)localObject).has("androidResourceURL")) {
          paramConfig = ((JSONObject)localObject).getString("androidResourceURL");
        }
        k = i;
        m = j;
        localConfig = paramConfig;
        if (((JSONObject)localObject).has("androidMD5"))
        {
          str = ((JSONObject)localObject).getString("androidMD5");
          localConfig = paramConfig;
          m = j;
          k = i;
        }
        if ((k != 0) && (!TextUtils.isEmpty(localConfig)) && (!TextUtils.isEmpty(str)))
        {
          paramConfig = TIMUserManager.a().a(localQQAppInterface);
          localObject = TIMUserManager.a().b(localQQAppInterface);
          bool = false;
          if ((!paramConfig.equals(localConfig)) || (!((String)localObject).equals(str))) {
            break label490;
          }
          TIMUserManager.a().a(0, m, localConfig, "", str, "", bool, 0);
          SharedPreUtils.b(localQQAppInterface.getApp(), localQQAppInterface.getCurrentAccountUin(), n, 0, m, localConfig, str, "", "", bool, 0);
        }
        return;
      }
      catch (JSONException paramConfig)
      {
        if (!QLog.isColorLevel()) {
          continue;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 256 exception =" + paramConfig.toString());
        return;
      }
      label440:
      if (QLog.isColorLevel())
      {
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 256,configStrList is empty ,version: " + paramConfig.version.get());
        return;
        label479:
        i = 0;
        continue;
        label484:
        k = 0;
        continue;
        label490:
        bool = true;
      }
    }
  }
  
  /* Error */
  private void H(ConfigurationService.Config paramConfig)
  {
    // Byte code:
    //   0: aload_0
    //   1: invokevirtual 109	com/tencent/mobileqq/config/splashlogo/ConfigServlet:getAppRuntime	()Lmqq/app/AppRuntime;
    //   4: checkcast 111	com/tencent/mobileqq/app/QQAppInterface
    //   7: astore 94
    //   9: aload_1
    //   10: getfield 73	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:version	Lcom/tencent/mobileqq/pb/PBInt32Field;
    //   13: invokevirtual 79	com/tencent/mobileqq/pb/PBInt32Field:get	()I
    //   16: istore 61
    //   18: aload 94
    //   20: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   23: aload 94
    //   25: invokevirtual 311	com/tencent/mobileqq/app/QQAppInterface:getAccount	()Ljava/lang/String;
    //   28: invokestatic 565	com/tencent/mobileqq/utils/SharedPreUtils:J	(Landroid/content/Context;Ljava/lang/String;)I
    //   31: istore_2
    //   32: aload 94
    //   34: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   37: aload 94
    //   39: invokevirtual 311	com/tencent/mobileqq/app/QQAppInterface:getAccount	()Ljava/lang/String;
    //   42: invokestatic 567	com/tencent/mobileqq/utils/SharedPreUtils:F	(Landroid/content/Context;Ljava/lang/String;)I
    //   45: istore_3
    //   46: getstatic 399	com/tencent/common/config/AppSetting:jdField_a_of_type_Int	I
    //   49: istore 4
    //   51: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   54: ifeq +50 -> 104
    //   57: ldc_w 569
    //   60: iconst_2
    //   61: ldc_w 571
    //   64: iconst_4
    //   65: anewarray 65	java/lang/Object
    //   68: dup
    //   69: iconst_0
    //   70: iload 61
    //   72: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   75: aastore
    //   76: dup
    //   77: iconst_1
    //   78: iload_2
    //   79: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   82: aastore
    //   83: dup
    //   84: iconst_2
    //   85: iload_3
    //   86: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   89: aastore
    //   90: dup
    //   91: iconst_3
    //   92: iload 4
    //   94: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   97: aastore
    //   98: invokestatic 405	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   101: invokestatic 141	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/String;)V
    //   104: iload_3
    //   105: iload 4
    //   107: if_icmpeq +20 -> 127
    //   110: aload 94
    //   112: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   115: aload 94
    //   117: invokevirtual 311	com/tencent/mobileqq/app/QQAppInterface:getAccount	()Ljava/lang/String;
    //   120: iload 4
    //   122: invokestatic 574	com/tencent/mobileqq/utils/SharedPreUtils:j	(Landroid/content/Context;Ljava/lang/String;I)V
    //   125: iconst_0
    //   126: istore_2
    //   127: iload 61
    //   129: iload_2
    //   130: if_icmpeq +6659 -> 6789
    //   133: aload_1
    //   134: getfield 281	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:content_list	Lcom/tencent/mobileqq/pb/PBRepeatField;
    //   137: ifnull +6614 -> 6751
    //   140: aload_1
    //   141: getfield 281	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:content_list	Lcom/tencent/mobileqq/pb/PBRepeatField;
    //   144: invokevirtual 284	com/tencent/mobileqq/pb/PBRepeatField:size	()I
    //   147: ifle +6604 -> 6751
    //   150: aload_1
    //   151: getfield 281	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:content_list	Lcom/tencent/mobileqq/pb/PBRepeatField;
    //   154: invokevirtual 575	com/tencent/mobileqq/pb/PBRepeatField:get	()Ljava/util/List;
    //   157: astore 72
    //   159: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   162: ifeq +38 -> 200
    //   165: ldc 63
    //   167: iconst_2
    //   168: ldc_w 577
    //   171: iconst_2
    //   172: anewarray 65	java/lang/Object
    //   175: dup
    //   176: iconst_0
    //   177: aload_1
    //   178: getfield 281	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:content_list	Lcom/tencent/mobileqq/pb/PBRepeatField;
    //   181: invokevirtual 284	com/tencent/mobileqq/pb/PBRepeatField:size	()I
    //   184: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   187: aastore
    //   188: dup
    //   189: iconst_1
    //   190: ldc_w 579
    //   193: aastore
    //   194: invokestatic 405	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   197: invokestatic 141	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/String;)V
    //   200: aload 72
    //   202: invokeinterface 229 1 0
    //   207: astore 95
    //   209: aload 95
    //   211: invokeinterface 234 1 0
    //   216: ifeq +6573 -> 6789
    //   219: aload 95
    //   221: invokeinterface 238 1 0
    //   226: checkcast 240	java/lang/String
    //   229: astore 79
    //   231: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   234: ifeq +62 -> 296
    //   237: ldc 63
    //   239: iconst_2
    //   240: new 122	java/lang/StringBuilder
    //   243: dup
    //   244: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   247: ldc_w 581
    //   250: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   253: aload 79
    //   255: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   258: ldc_w 325
    //   261: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   264: aload_1
    //   265: getfield 73	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:version	Lcom/tencent/mobileqq/pb/PBInt32Field;
    //   268: invokevirtual 79	com/tencent/mobileqq/pb/PBInt32Field:get	()I
    //   271: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   274: ldc_w 583
    //   277: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   280: aload_1
    //   281: getfield 281	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:content_list	Lcom/tencent/mobileqq/pb/PBRepeatField;
    //   284: invokevirtual 284	com/tencent/mobileqq/pb/PBRepeatField:size	()I
    //   287: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   290: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   293: invokestatic 141	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/String;)V
    //   296: ldc2_w 584
    //   299: lstore 63
    //   301: ldc 13
    //   303: astore 78
    //   305: ldc 13
    //   307: astore 77
    //   309: iconst_m1
    //   310: istore 21
    //   312: iconst_m1
    //   313: istore 20
    //   315: iconst_m1
    //   316: istore 19
    //   318: iconst_m1
    //   319: istore 18
    //   321: aconst_null
    //   322: astore 75
    //   324: iconst_0
    //   325: istore 17
    //   327: iconst_0
    //   328: istore 16
    //   330: iconst_0
    //   331: istore 15
    //   333: iconst_0
    //   334: istore 14
    //   336: iconst_0
    //   337: istore 13
    //   339: iconst_0
    //   340: istore 12
    //   342: iconst_0
    //   343: istore 11
    //   345: iconst_0
    //   346: istore 9
    //   348: iconst_0
    //   349: istore 6
    //   351: iconst_0
    //   352: istore 4
    //   354: iconst_0
    //   355: istore_3
    //   356: aconst_null
    //   357: astore 76
    //   359: aconst_null
    //   360: astore 74
    //   362: aconst_null
    //   363: astore 73
    //   365: aconst_null
    //   366: astore 72
    //   368: iconst_0
    //   369: istore 10
    //   371: bipush 50
    //   373: istore 8
    //   375: iconst_0
    //   376: istore 7
    //   378: iconst_0
    //   379: istore 5
    //   381: iconst_0
    //   382: istore_2
    //   383: aload 79
    //   385: ldc_w 587
    //   388: invokevirtual 591	java/lang/String:split	(Ljava/lang/String;)[Ljava/lang/String;
    //   391: astore 96
    //   393: aload 96
    //   395: ifnull +6158 -> 6553
    //   398: aload 96
    //   400: arraylength
    //   401: istore 62
    //   403: iconst_0
    //   404: istore 42
    //   406: iconst_0
    //   407: istore 4
    //   409: iconst_0
    //   410: istore 5
    //   412: iconst_0
    //   413: istore 6
    //   415: bipush 50
    //   417: istore 7
    //   419: iconst_0
    //   420: istore_2
    //   421: aconst_null
    //   422: astore 72
    //   424: aconst_null
    //   425: astore 73
    //   427: aconst_null
    //   428: astore 74
    //   430: aconst_null
    //   431: astore 75
    //   433: iconst_0
    //   434: istore 19
    //   436: iconst_0
    //   437: istore 20
    //   439: iconst_0
    //   440: istore_3
    //   441: iconst_0
    //   442: istore 23
    //   444: iconst_0
    //   445: istore 8
    //   447: iconst_0
    //   448: istore 22
    //   450: iconst_0
    //   451: istore 18
    //   453: iconst_0
    //   454: istore 17
    //   456: iconst_0
    //   457: istore 16
    //   459: iconst_0
    //   460: istore 11
    //   462: iconst_0
    //   463: istore 9
    //   465: aconst_null
    //   466: astore 79
    //   468: iconst_m1
    //   469: istore 21
    //   471: iconst_m1
    //   472: istore 14
    //   474: iconst_m1
    //   475: istore 13
    //   477: iconst_m1
    //   478: istore 12
    //   480: ldc 13
    //   482: astore 78
    //   484: ldc 13
    //   486: astore 76
    //   488: ldc2_w 584
    //   491: lstore 65
    //   493: iload 4
    //   495: istore 40
    //   497: iload 5
    //   499: istore 41
    //   501: iload 6
    //   503: istore 10
    //   505: iload 7
    //   507: istore 15
    //   509: iload_2
    //   510: istore 24
    //   512: aload 72
    //   514: astore 85
    //   516: aload 73
    //   518: astore 84
    //   520: aload 74
    //   522: astore 80
    //   524: aload 75
    //   526: astore 77
    //   528: iload 19
    //   530: istore 25
    //   532: iload 20
    //   534: istore 26
    //   536: iload_3
    //   537: istore 27
    //   539: iload 23
    //   541: istore 28
    //   543: iload 8
    //   545: istore 29
    //   547: iload 22
    //   549: istore 30
    //   551: iload 18
    //   553: istore 31
    //   555: iload 17
    //   557: istore 32
    //   559: iload 16
    //   561: istore 33
    //   563: iload 11
    //   565: istore 34
    //   567: iload 9
    //   569: istore 35
    //   571: aload 79
    //   573: astore 81
    //   575: iload 21
    //   577: istore 36
    //   579: iload 14
    //   581: istore 37
    //   583: iload 13
    //   585: istore 38
    //   587: iload 12
    //   589: istore 39
    //   591: aload 78
    //   593: astore 82
    //   595: aload 76
    //   597: astore 83
    //   599: lload 65
    //   601: lstore 63
    //   603: iload 42
    //   605: iload 62
    //   607: if_icmpge +6035 -> 6642
    //   610: aload 96
    //   612: iload 42
    //   614: aaload
    //   615: astore 97
    //   617: iload_2
    //   618: istore 26
    //   620: aload 72
    //   622: astore 80
    //   624: aload 73
    //   626: astore 81
    //   628: aload 74
    //   630: astore 82
    //   632: aload 75
    //   634: astore 83
    //   636: iload 19
    //   638: istore 27
    //   640: iload 20
    //   642: istore 28
    //   644: iload_3
    //   645: istore 29
    //   647: iload 23
    //   649: istore 30
    //   651: iload 8
    //   653: istore 31
    //   655: iload 22
    //   657: istore 32
    //   659: iload 18
    //   661: istore 33
    //   663: iload 17
    //   665: istore 34
    //   667: iload 16
    //   669: istore 35
    //   671: iload 11
    //   673: istore 36
    //   675: iload 9
    //   677: istore 37
    //   679: aload 79
    //   681: astore 84
    //   683: iload 21
    //   685: istore 24
    //   687: iload 14
    //   689: istore 25
    //   691: iload 13
    //   693: istore 38
    //   695: iload 12
    //   697: istore 39
    //   699: aload 78
    //   701: astore 85
    //   703: aload 76
    //   705: astore 86
    //   707: lload 65
    //   709: lstore 67
    //   711: aload 97
    //   713: ldc_w 593
    //   716: invokevirtual 596	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
    //   719: ifeq +1409 -> 2128
    //   722: iload_2
    //   723: istore 26
    //   725: aload 72
    //   727: astore 80
    //   729: aload 73
    //   731: astore 81
    //   733: aload 74
    //   735: astore 82
    //   737: aload 75
    //   739: astore 83
    //   741: iload 19
    //   743: istore 27
    //   745: iload 20
    //   747: istore 28
    //   749: iload_3
    //   750: istore 29
    //   752: iload 23
    //   754: istore 30
    //   756: iload 8
    //   758: istore 31
    //   760: iload 22
    //   762: istore 32
    //   764: iload 18
    //   766: istore 33
    //   768: iload 17
    //   770: istore 34
    //   772: iload 16
    //   774: istore 35
    //   776: iload 11
    //   778: istore 36
    //   780: iload 9
    //   782: istore 37
    //   784: aload 79
    //   786: astore 84
    //   788: iload 21
    //   790: istore 24
    //   792: iload 14
    //   794: istore 25
    //   796: iload 13
    //   798: istore 38
    //   800: iload 12
    //   802: istore 39
    //   804: aload 78
    //   806: astore 85
    //   808: aload 76
    //   810: astore 86
    //   812: lload 65
    //   814: lstore 67
    //   816: aload 97
    //   818: ldc_w 598
    //   821: invokevirtual 591	java/lang/String:split	(Ljava/lang/String;)[Ljava/lang/String;
    //   824: iconst_1
    //   825: aaload
    //   826: invokevirtual 601	java/lang/String:trim	()Ljava/lang/String;
    //   829: astore 77
    //   831: iload_2
    //   832: istore 26
    //   834: aload 72
    //   836: astore 80
    //   838: aload 73
    //   840: astore 81
    //   842: aload 74
    //   844: astore 82
    //   846: aload 75
    //   848: astore 83
    //   850: iload 19
    //   852: istore 27
    //   854: iload 20
    //   856: istore 28
    //   858: iload_3
    //   859: istore 29
    //   861: iload 23
    //   863: istore 30
    //   865: iload 8
    //   867: istore 31
    //   869: iload 22
    //   871: istore 32
    //   873: iload 18
    //   875: istore 33
    //   877: iload 17
    //   879: istore 34
    //   881: iload 16
    //   883: istore 35
    //   885: iload 11
    //   887: istore 36
    //   889: iload 9
    //   891: istore 37
    //   893: aload 79
    //   895: astore 84
    //   897: iload 21
    //   899: istore 24
    //   901: iload 14
    //   903: istore 25
    //   905: iload 13
    //   907: istore 38
    //   909: iload 12
    //   911: istore 39
    //   913: aload 78
    //   915: astore 85
    //   917: aload 76
    //   919: astore 86
    //   921: lload 65
    //   923: lstore 67
    //   925: aload 77
    //   927: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   930: istore 71
    //   932: iload 4
    //   934: istore 41
    //   936: iload 5
    //   938: istore 43
    //   940: iload 6
    //   942: istore 44
    //   944: iload 7
    //   946: istore 45
    //   948: iload_2
    //   949: istore 40
    //   951: aload 72
    //   953: astore 87
    //   955: aload 73
    //   957: astore 88
    //   959: aload 74
    //   961: astore 89
    //   963: aload 75
    //   965: astore 90
    //   967: iload 19
    //   969: istore 46
    //   971: iload 20
    //   973: istore 47
    //   975: iload_3
    //   976: istore 48
    //   978: iload 23
    //   980: istore 49
    //   982: iload 8
    //   984: istore 50
    //   986: iload 22
    //   988: istore 51
    //   990: iload 18
    //   992: istore 52
    //   994: iload 17
    //   996: istore 53
    //   998: iload 16
    //   1000: istore 54
    //   1002: iload 11
    //   1004: istore 55
    //   1006: iload 9
    //   1008: istore 56
    //   1010: aload 79
    //   1012: astore 91
    //   1014: iload 21
    //   1016: istore 57
    //   1018: iload 14
    //   1020: istore 58
    //   1022: iload 13
    //   1024: istore 59
    //   1026: iload 12
    //   1028: istore 60
    //   1030: aload 78
    //   1032: astore 92
    //   1034: aload 76
    //   1036: astore 93
    //   1038: lload 65
    //   1040: lstore 69
    //   1042: iload 71
    //   1044: ifne +116 -> 1160
    //   1047: aload 77
    //   1049: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   1052: istore 43
    //   1054: lload 65
    //   1056: lstore 69
    //   1058: aload 76
    //   1060: astore 93
    //   1062: aload 78
    //   1064: astore 92
    //   1066: iload 12
    //   1068: istore 60
    //   1070: iload 13
    //   1072: istore 59
    //   1074: iload 14
    //   1076: istore 58
    //   1078: iload 21
    //   1080: istore 57
    //   1082: aload 79
    //   1084: astore 91
    //   1086: iload 9
    //   1088: istore 56
    //   1090: iload 11
    //   1092: istore 55
    //   1094: iload 16
    //   1096: istore 54
    //   1098: iload 17
    //   1100: istore 53
    //   1102: iload 18
    //   1104: istore 52
    //   1106: iload 22
    //   1108: istore 51
    //   1110: iload 8
    //   1112: istore 50
    //   1114: iload 23
    //   1116: istore 49
    //   1118: iload_3
    //   1119: istore 48
    //   1121: iload 20
    //   1123: istore 47
    //   1125: iload 19
    //   1127: istore 46
    //   1129: aload 75
    //   1131: astore 90
    //   1133: aload 74
    //   1135: astore 89
    //   1137: aload 73
    //   1139: astore 88
    //   1141: aload 72
    //   1143: astore 87
    //   1145: iload_2
    //   1146: istore 40
    //   1148: iload 7
    //   1150: istore 45
    //   1152: iload 6
    //   1154: istore 44
    //   1156: iload 4
    //   1158: istore 41
    //   1160: iload 42
    //   1162: iconst_1
    //   1163: iadd
    //   1164: istore 42
    //   1166: iload 41
    //   1168: istore 4
    //   1170: iload 43
    //   1172: istore 5
    //   1174: iload 44
    //   1176: istore 6
    //   1178: iload 45
    //   1180: istore 7
    //   1182: iload 40
    //   1184: istore_2
    //   1185: aload 87
    //   1187: astore 72
    //   1189: aload 88
    //   1191: astore 73
    //   1193: aload 89
    //   1195: astore 74
    //   1197: aload 90
    //   1199: astore 75
    //   1201: iload 46
    //   1203: istore 19
    //   1205: iload 47
    //   1207: istore 20
    //   1209: iload 48
    //   1211: istore_3
    //   1212: iload 49
    //   1214: istore 23
    //   1216: iload 50
    //   1218: istore 8
    //   1220: iload 51
    //   1222: istore 22
    //   1224: iload 52
    //   1226: istore 18
    //   1228: iload 53
    //   1230: istore 17
    //   1232: iload 54
    //   1234: istore 16
    //   1236: iload 55
    //   1238: istore 11
    //   1240: iload 56
    //   1242: istore 9
    //   1244: aload 91
    //   1246: astore 79
    //   1248: iload 57
    //   1250: istore 21
    //   1252: iload 58
    //   1254: istore 14
    //   1256: iload 59
    //   1258: istore 13
    //   1260: iload 60
    //   1262: istore 12
    //   1264: aload 92
    //   1266: astore 78
    //   1268: aload 93
    //   1270: astore 76
    //   1272: lload 69
    //   1274: lstore 65
    //   1276: goto -783 -> 493
    //   1279: astore 77
    //   1281: iload_2
    //   1282: istore 26
    //   1284: aload 72
    //   1286: astore 80
    //   1288: aload 73
    //   1290: astore 81
    //   1292: aload 74
    //   1294: astore 82
    //   1296: aload 75
    //   1298: astore 83
    //   1300: iload 19
    //   1302: istore 27
    //   1304: iload 20
    //   1306: istore 28
    //   1308: iload_3
    //   1309: istore 29
    //   1311: iload 23
    //   1313: istore 30
    //   1315: iload 8
    //   1317: istore 31
    //   1319: iload 22
    //   1321: istore 32
    //   1323: iload 18
    //   1325: istore 33
    //   1327: iload 17
    //   1329: istore 34
    //   1331: iload 16
    //   1333: istore 35
    //   1335: iload 11
    //   1337: istore 36
    //   1339: iload 9
    //   1341: istore 37
    //   1343: aload 79
    //   1345: astore 84
    //   1347: iload 21
    //   1349: istore 24
    //   1351: iload 14
    //   1353: istore 25
    //   1355: iload 13
    //   1357: istore 38
    //   1359: iload 12
    //   1361: istore 39
    //   1363: aload 78
    //   1365: astore 85
    //   1367: aload 76
    //   1369: astore 86
    //   1371: lload 65
    //   1373: lstore 67
    //   1375: aload 77
    //   1377: invokevirtual 605	java/lang/Exception:printStackTrace	()V
    //   1380: iload 4
    //   1382: istore 41
    //   1384: iload 5
    //   1386: istore 43
    //   1388: iload 6
    //   1390: istore 44
    //   1392: iload 7
    //   1394: istore 45
    //   1396: iload_2
    //   1397: istore 40
    //   1399: aload 72
    //   1401: astore 87
    //   1403: aload 73
    //   1405: astore 88
    //   1407: aload 74
    //   1409: astore 89
    //   1411: aload 75
    //   1413: astore 90
    //   1415: iload 19
    //   1417: istore 46
    //   1419: iload 20
    //   1421: istore 47
    //   1423: iload_3
    //   1424: istore 48
    //   1426: iload 23
    //   1428: istore 49
    //   1430: iload 8
    //   1432: istore 50
    //   1434: iload 22
    //   1436: istore 51
    //   1438: iload 18
    //   1440: istore 52
    //   1442: iload 17
    //   1444: istore 53
    //   1446: iload 16
    //   1448: istore 54
    //   1450: iload 11
    //   1452: istore 55
    //   1454: iload 9
    //   1456: istore 56
    //   1458: aload 79
    //   1460: astore 91
    //   1462: iload 21
    //   1464: istore 57
    //   1466: iload 14
    //   1468: istore 58
    //   1470: iload 13
    //   1472: istore 59
    //   1474: iload 12
    //   1476: istore 60
    //   1478: aload 78
    //   1480: astore 92
    //   1482: aload 76
    //   1484: astore 93
    //   1486: lload 65
    //   1488: lstore 69
    //   1490: goto -330 -> 1160
    //   1493: astore 79
    //   1495: lload 67
    //   1497: lstore 63
    //   1499: aload 86
    //   1501: astore 78
    //   1503: aload 85
    //   1505: astore 77
    //   1507: iload 39
    //   1509: istore 21
    //   1511: iload 38
    //   1513: istore 20
    //   1515: iload 25
    //   1517: istore 19
    //   1519: iload 24
    //   1521: istore 18
    //   1523: aload 84
    //   1525: astore 75
    //   1527: iload 37
    //   1529: istore 17
    //   1531: iload 36
    //   1533: istore 16
    //   1535: iload 35
    //   1537: istore 15
    //   1539: iload 34
    //   1541: istore 14
    //   1543: iload 33
    //   1545: istore 13
    //   1547: iload 32
    //   1549: istore 12
    //   1551: iload 31
    //   1553: istore 11
    //   1555: iload 30
    //   1557: istore 9
    //   1559: iload 27
    //   1561: istore_3
    //   1562: aload 83
    //   1564: astore 76
    //   1566: aload 82
    //   1568: astore 74
    //   1570: aload 81
    //   1572: astore 73
    //   1574: aload 80
    //   1576: astore 72
    //   1578: iload 26
    //   1580: istore 10
    //   1582: iload 6
    //   1584: istore_2
    //   1585: iload 4
    //   1587: istore 22
    //   1589: iload 29
    //   1591: istore 6
    //   1593: iload 28
    //   1595: istore 4
    //   1597: iload 7
    //   1599: istore 8
    //   1601: iload_2
    //   1602: istore 7
    //   1604: iload 22
    //   1606: istore_2
    //   1607: aload 79
    //   1609: invokevirtual 605	java/lang/Exception:printStackTrace	()V
    //   1612: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   1615: ifeq +34 -> 1649
    //   1618: ldc_w 607
    //   1621: iconst_2
    //   1622: new 122	java/lang/StringBuilder
    //   1625: dup
    //   1626: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   1629: ldc_w 609
    //   1632: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1635: aload 79
    //   1637: invokevirtual 612	java/lang/Exception:getMessage	()Ljava/lang/String;
    //   1640: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1643: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1646: invokestatic 615	com/tencent/qphone/base/util/QLog:e	(Ljava/lang/String;ILjava/lang/String;)V
    //   1649: iload 10
    //   1651: istore 22
    //   1653: iload 8
    //   1655: istore 23
    //   1657: aload 74
    //   1659: astore 79
    //   1661: iload 9
    //   1663: istore 10
    //   1665: iload 6
    //   1667: istore 9
    //   1669: iload 4
    //   1671: istore 8
    //   1673: iload_3
    //   1674: istore 6
    //   1676: iload 23
    //   1678: istore 4
    //   1680: iload 22
    //   1682: istore_3
    //   1683: aload 72
    //   1685: astore 74
    //   1687: aload 79
    //   1689: astore 72
    //   1691: iload_2
    //   1692: ifeq +118 -> 1810
    //   1695: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   1698: ifeq +40 -> 1738
    //   1701: ldc_w 617
    //   1704: iconst_2
    //   1705: ldc_w 619
    //   1708: iconst_4
    //   1709: anewarray 65	java/lang/Object
    //   1712: dup
    //   1713: iconst_0
    //   1714: aload 76
    //   1716: aastore
    //   1717: dup
    //   1718: iconst_1
    //   1719: aload 72
    //   1721: aastore
    //   1722: dup
    //   1723: iconst_2
    //   1724: aload 73
    //   1726: aastore
    //   1727: dup
    //   1728: iconst_3
    //   1729: aload 74
    //   1731: aastore
    //   1732: invokestatic 405	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   1735: invokestatic 141	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/String;)V
    //   1738: aload 94
    //   1740: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   1743: aload 94
    //   1745: invokevirtual 311	com/tencent/mobileqq/app/QQAppInterface:getAccount	()Ljava/lang/String;
    //   1748: iload 7
    //   1750: aload 76
    //   1752: aload 72
    //   1754: aload 73
    //   1756: aload 74
    //   1758: iload_3
    //   1759: iload 4
    //   1761: iload 5
    //   1763: invokestatic 622	com/tencent/mobileqq/utils/SharedPreUtils:a	(Landroid/content/Context;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;III)V
    //   1766: aload 94
    //   1768: iload 7
    //   1770: aload 76
    //   1772: aload 72
    //   1774: aload 73
    //   1776: aload 74
    //   1778: iload_3
    //   1779: iload 4
    //   1781: iload 5
    //   1783: invokestatic 627	com/tencent/mobileqq/activity/aio/item/PokeItemHelper:a	(Lcom/tencent/mobileqq/app/QQAppInterface;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;III)V
    //   1786: iconst_0
    //   1787: putstatic 628	com/tencent/mobileqq/activity/aio/item/PokeItemHelper:jdField_b_of_type_Boolean	Z
    //   1790: iconst_0
    //   1791: putstatic 629	com/tencent/mobileqq/activity/aio/item/PokeItemHelper:c	Z
    //   1794: iconst_0
    //   1795: invokestatic 630	com/tencent/mobileqq/utils/SharedPreUtils:a	(Z)V
    //   1798: aload 94
    //   1800: aload 76
    //   1802: aload 72
    //   1804: getstatic 632	com/tencent/mobileqq/activity/aio/item/PokeItemHelper:d	Ljava/lang/String;
    //   1807: invokestatic 635	com/tencent/mobileqq/activity/aio/item/PokeItemHelper:a	(Lcom/tencent/mobileqq/app/QQAppInterface;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
    //   1810: iload 15
    //   1812: ifeq +196 -> 2008
    //   1815: iload 14
    //   1817: ifeq +191 -> 2008
    //   1820: iload 13
    //   1822: ifeq +186 -> 2008
    //   1825: iload 12
    //   1827: ifeq +181 -> 2008
    //   1830: iload 11
    //   1832: ifeq +176 -> 2008
    //   1835: aload 94
    //   1837: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   1840: aload 94
    //   1842: invokevirtual 289	com/tencent/mobileqq/app/QQAppInterface:getCurrentAccountUin	()Ljava/lang/String;
    //   1845: iconst_0
    //   1846: invokevirtual 639	com/tencent/qphone/base/util/BaseApplication:getSharedPreferences	(Ljava/lang/String;I)Landroid/content/SharedPreferences;
    //   1849: invokeinterface 645 1 0
    //   1854: ldc_w 647
    //   1857: iconst_0
    //   1858: invokeinterface 653 3 0
    //   1863: invokeinterface 656 1 0
    //   1868: pop
    //   1869: aload 94
    //   1871: iconst_0
    //   1872: invokestatic 659	com/tencent/mobileqq/activity/aio/item/PokeItemHelper:b	(Lcom/tencent/mobileqq/app/QQAppInterface;Z)V
    //   1875: aload 94
    //   1877: iconst_0
    //   1878: invokestatic 661	com/tencent/mobileqq/activity/aio/item/PokeItemHelper:a	(Lcom/tencent/mobileqq/app/QQAppInterface;Z)V
    //   1881: iload 21
    //   1883: iload 20
    //   1885: iload 19
    //   1887: iload 18
    //   1889: invokestatic 664	com/tencent/mobileqq/activity/aio/item/PokeItemHelper:a	(IIII)V
    //   1892: aload 94
    //   1894: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   1897: aload 94
    //   1899: invokevirtual 311	com/tencent/mobileqq/app/QQAppInterface:getAccount	()Ljava/lang/String;
    //   1902: iload 61
    //   1904: iconst_1
    //   1905: iload 21
    //   1907: iload 20
    //   1909: iload 19
    //   1911: iload 18
    //   1913: invokestatic 667	com/tencent/mobileqq/utils/SharedPreUtils:a	(Landroid/content/Context;Ljava/lang/String;IZIIII)V
    //   1916: aload 75
    //   1918: invokestatic 669	com/tencent/mobileqq/activity/aio/item/PokeItemHelper:a	(Ljava/lang/String;)V
    //   1921: aload 94
    //   1923: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   1926: aload 94
    //   1928: invokevirtual 311	com/tencent/mobileqq/app/QQAppInterface:getAccount	()Ljava/lang/String;
    //   1931: iload 61
    //   1933: aload 75
    //   1935: invokestatic 672	com/tencent/mobileqq/utils/SharedPreUtils:a	(Landroid/content/Context;Ljava/lang/String;ILjava/lang/String;)V
    //   1938: iload 8
    //   1940: invokestatic 675	com/tencent/mobileqq/activity/aio/item/PokeItemHelper:a	(I)V
    //   1943: aload 94
    //   1945: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   1948: aload 94
    //   1950: invokevirtual 311	com/tencent/mobileqq/app/QQAppInterface:getAccount	()Ljava/lang/String;
    //   1953: iload 61
    //   1955: iload 8
    //   1957: invokestatic 678	com/tencent/mobileqq/utils/SharedPreUtils:a	(Landroid/content/Context;Ljava/lang/String;II)V
    //   1960: iload 6
    //   1962: invokestatic 680	com/tencent/mobileqq/activity/aio/item/PokeItemHelper:b	(I)V
    //   1965: aload 94
    //   1967: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   1970: aload 94
    //   1972: invokevirtual 311	com/tencent/mobileqq/app/QQAppInterface:getAccount	()Ljava/lang/String;
    //   1975: iload 61
    //   1977: iload 6
    //   1979: invokestatic 682	com/tencent/mobileqq/utils/SharedPreUtils:b	(Landroid/content/Context;Ljava/lang/String;II)V
    //   1982: iload 10
    //   1984: iload 9
    //   1986: invokestatic 685	com/tencent/mobileqq/activity/aio/item/PokeItemHelper:a	(II)V
    //   1989: aload 94
    //   1991: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   1994: aload 94
    //   1996: invokevirtual 311	com/tencent/mobileqq/app/QQAppInterface:getAccount	()Ljava/lang/String;
    //   1999: iload 61
    //   2001: iload 10
    //   2003: iload 9
    //   2005: invokestatic 688	com/tencent/mobileqq/utils/SharedPreUtils:a	(Landroid/content/Context;Ljava/lang/String;III)V
    //   2008: iload 17
    //   2010: ifeq +110 -> 2120
    //   2013: iload 16
    //   2015: ifeq +105 -> 2120
    //   2018: iload 16
    //   2020: ifeq +100 -> 2120
    //   2023: aload 94
    //   2025: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   2028: invokestatic 694	android/preference/PreferenceManager:getDefaultSharedPreferences	(Landroid/content/Context;)Landroid/content/SharedPreferences;
    //   2031: new 122	java/lang/StringBuilder
    //   2034: dup
    //   2035: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   2038: aload 94
    //   2040: invokevirtual 311	com/tencent/mobileqq/app/QQAppInterface:getAccount	()Ljava/lang/String;
    //   2043: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2046: ldc_w 696
    //   2049: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2052: ldc_w 698
    //   2055: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   2058: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   2061: ldc 13
    //   2063: invokeinterface 701 3 0
    //   2068: astore 72
    //   2070: aload 94
    //   2072: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   2075: aload 94
    //   2077: invokevirtual 311	com/tencent/mobileqq/app/QQAppInterface:getAccount	()Ljava/lang/String;
    //   2080: iload 61
    //   2082: lload 63
    //   2084: aload 78
    //   2086: aload 77
    //   2088: invokestatic 704	com/tencent/mobileqq/utils/SharedPreUtils:a	(Landroid/content/Context;Ljava/lang/String;IJLjava/lang/String;Ljava/lang/String;)V
    //   2091: aload 78
    //   2093: ifnull +27 -> 2120
    //   2096: aload 78
    //   2098: aload 72
    //   2100: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2103: ifne +17 -> 2120
    //   2106: aload 94
    //   2108: bipush 117
    //   2110: invokevirtual 707	com/tencent/mobileqq/app/QQAppInterface:a	(I)Lcom/tencent/mobileqq/app/BusinessHandler;
    //   2113: checkcast 709	com/tencent/mobileqq/app/utils/PokeBigResHandler
    //   2116: iconst_1
    //   2117: invokevirtual 710	com/tencent/mobileqq/app/utils/PokeBigResHandler:a	(Z)V
    //   2120: iload 6
    //   2122: invokestatic 680	com/tencent/mobileqq/activity/aio/item/PokeItemHelper:b	(I)V
    //   2125: goto -1916 -> 209
    //   2128: iload_2
    //   2129: istore 26
    //   2131: aload 72
    //   2133: astore 80
    //   2135: aload 73
    //   2137: astore 81
    //   2139: aload 74
    //   2141: astore 82
    //   2143: aload 75
    //   2145: astore 83
    //   2147: iload 19
    //   2149: istore 27
    //   2151: iload 20
    //   2153: istore 28
    //   2155: iload_3
    //   2156: istore 29
    //   2158: iload 23
    //   2160: istore 30
    //   2162: iload 8
    //   2164: istore 31
    //   2166: iload 22
    //   2168: istore 32
    //   2170: iload 18
    //   2172: istore 33
    //   2174: iload 17
    //   2176: istore 34
    //   2178: iload 16
    //   2180: istore 35
    //   2182: iload 11
    //   2184: istore 36
    //   2186: iload 9
    //   2188: istore 37
    //   2190: aload 79
    //   2192: astore 84
    //   2194: iload 21
    //   2196: istore 24
    //   2198: iload 14
    //   2200: istore 25
    //   2202: iload 13
    //   2204: istore 38
    //   2206: iload 12
    //   2208: istore 39
    //   2210: aload 78
    //   2212: astore 85
    //   2214: aload 76
    //   2216: astore 86
    //   2218: lload 65
    //   2220: lstore 67
    //   2222: aload 97
    //   2224: ldc_w 712
    //   2227: invokevirtual 596	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
    //   2230: ifeq +658 -> 2888
    //   2233: iload_2
    //   2234: istore 26
    //   2236: aload 72
    //   2238: astore 80
    //   2240: aload 73
    //   2242: astore 81
    //   2244: aload 74
    //   2246: astore 82
    //   2248: aload 75
    //   2250: astore 83
    //   2252: iload 19
    //   2254: istore 27
    //   2256: iload 20
    //   2258: istore 28
    //   2260: iload_3
    //   2261: istore 29
    //   2263: iload 23
    //   2265: istore 30
    //   2267: iload 8
    //   2269: istore 31
    //   2271: iload 22
    //   2273: istore 32
    //   2275: iload 18
    //   2277: istore 33
    //   2279: iload 17
    //   2281: istore 34
    //   2283: iload 16
    //   2285: istore 35
    //   2287: iload 11
    //   2289: istore 36
    //   2291: iload 9
    //   2293: istore 37
    //   2295: aload 79
    //   2297: astore 84
    //   2299: iload 21
    //   2301: istore 24
    //   2303: iload 14
    //   2305: istore 25
    //   2307: iload 13
    //   2309: istore 38
    //   2311: iload 12
    //   2313: istore 39
    //   2315: aload 78
    //   2317: astore 85
    //   2319: aload 76
    //   2321: astore 86
    //   2323: lload 65
    //   2325: lstore 67
    //   2327: aload 97
    //   2329: ldc_w 598
    //   2332: invokevirtual 591	java/lang/String:split	(Ljava/lang/String;)[Ljava/lang/String;
    //   2335: iconst_1
    //   2336: aaload
    //   2337: invokevirtual 601	java/lang/String:trim	()Ljava/lang/String;
    //   2340: astore 77
    //   2342: iload_2
    //   2343: istore 26
    //   2345: aload 72
    //   2347: astore 80
    //   2349: aload 73
    //   2351: astore 81
    //   2353: aload 74
    //   2355: astore 82
    //   2357: aload 75
    //   2359: astore 83
    //   2361: iload 19
    //   2363: istore 27
    //   2365: iload 20
    //   2367: istore 28
    //   2369: iload_3
    //   2370: istore 29
    //   2372: iload 23
    //   2374: istore 30
    //   2376: iload 8
    //   2378: istore 31
    //   2380: iload 22
    //   2382: istore 32
    //   2384: iload 18
    //   2386: istore 33
    //   2388: iload 17
    //   2390: istore 34
    //   2392: iload 16
    //   2394: istore 35
    //   2396: iload 11
    //   2398: istore 36
    //   2400: iload 9
    //   2402: istore 37
    //   2404: aload 79
    //   2406: astore 84
    //   2408: iload 21
    //   2410: istore 24
    //   2412: iload 14
    //   2414: istore 25
    //   2416: iload 13
    //   2418: istore 38
    //   2420: iload 12
    //   2422: istore 39
    //   2424: aload 78
    //   2426: astore 85
    //   2428: aload 76
    //   2430: astore 86
    //   2432: lload 65
    //   2434: lstore 67
    //   2436: aload 77
    //   2438: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   2441: istore 71
    //   2443: iload 4
    //   2445: istore 41
    //   2447: iload 5
    //   2449: istore 43
    //   2451: iload 6
    //   2453: istore 44
    //   2455: iload 7
    //   2457: istore 45
    //   2459: iload_2
    //   2460: istore 40
    //   2462: aload 72
    //   2464: astore 87
    //   2466: aload 73
    //   2468: astore 88
    //   2470: aload 74
    //   2472: astore 89
    //   2474: aload 75
    //   2476: astore 90
    //   2478: iload 19
    //   2480: istore 46
    //   2482: iload 20
    //   2484: istore 47
    //   2486: iload_3
    //   2487: istore 48
    //   2489: iload 23
    //   2491: istore 49
    //   2493: iload 8
    //   2495: istore 50
    //   2497: iload 22
    //   2499: istore 51
    //   2501: iload 18
    //   2503: istore 52
    //   2505: iload 17
    //   2507: istore 53
    //   2509: iload 16
    //   2511: istore 54
    //   2513: iload 11
    //   2515: istore 55
    //   2517: iload 9
    //   2519: istore 56
    //   2521: aload 79
    //   2523: astore 91
    //   2525: iload 21
    //   2527: istore 57
    //   2529: iload 14
    //   2531: istore 58
    //   2533: iload 13
    //   2535: istore 59
    //   2537: iload 12
    //   2539: istore 60
    //   2541: aload 78
    //   2543: astore 92
    //   2545: aload 76
    //   2547: astore 93
    //   2549: lload 65
    //   2551: lstore 69
    //   2553: iload 71
    //   2555: ifne -1395 -> 1160
    //   2558: aload 77
    //   2560: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   2563: istore 44
    //   2565: iload 4
    //   2567: istore 41
    //   2569: iload 5
    //   2571: istore 43
    //   2573: iload 7
    //   2575: istore 45
    //   2577: iload_2
    //   2578: istore 40
    //   2580: aload 72
    //   2582: astore 87
    //   2584: aload 73
    //   2586: astore 88
    //   2588: aload 74
    //   2590: astore 89
    //   2592: aload 75
    //   2594: astore 90
    //   2596: iload 19
    //   2598: istore 46
    //   2600: iload 20
    //   2602: istore 47
    //   2604: iload_3
    //   2605: istore 48
    //   2607: iload 23
    //   2609: istore 49
    //   2611: iload 8
    //   2613: istore 50
    //   2615: iload 22
    //   2617: istore 51
    //   2619: iload 18
    //   2621: istore 52
    //   2623: iload 17
    //   2625: istore 53
    //   2627: iload 16
    //   2629: istore 54
    //   2631: iload 11
    //   2633: istore 55
    //   2635: iload 9
    //   2637: istore 56
    //   2639: aload 79
    //   2641: astore 91
    //   2643: iload 21
    //   2645: istore 57
    //   2647: iload 14
    //   2649: istore 58
    //   2651: iload 13
    //   2653: istore 59
    //   2655: iload 12
    //   2657: istore 60
    //   2659: aload 78
    //   2661: astore 92
    //   2663: aload 76
    //   2665: astore 93
    //   2667: lload 65
    //   2669: lstore 69
    //   2671: goto -1511 -> 1160
    //   2674: astore 77
    //   2676: iload_2
    //   2677: istore 26
    //   2679: aload 72
    //   2681: astore 80
    //   2683: aload 73
    //   2685: astore 81
    //   2687: aload 74
    //   2689: astore 82
    //   2691: aload 75
    //   2693: astore 83
    //   2695: iload 19
    //   2697: istore 27
    //   2699: iload 20
    //   2701: istore 28
    //   2703: iload_3
    //   2704: istore 29
    //   2706: iload 23
    //   2708: istore 30
    //   2710: iload 8
    //   2712: istore 31
    //   2714: iload 22
    //   2716: istore 32
    //   2718: iload 18
    //   2720: istore 33
    //   2722: iload 17
    //   2724: istore 34
    //   2726: iload 16
    //   2728: istore 35
    //   2730: iload 11
    //   2732: istore 36
    //   2734: iload 9
    //   2736: istore 37
    //   2738: aload 79
    //   2740: astore 84
    //   2742: iload 21
    //   2744: istore 24
    //   2746: iload 14
    //   2748: istore 25
    //   2750: iload 13
    //   2752: istore 38
    //   2754: iload 12
    //   2756: istore 39
    //   2758: aload 78
    //   2760: astore 85
    //   2762: aload 76
    //   2764: astore 86
    //   2766: lload 65
    //   2768: lstore 67
    //   2770: aload 77
    //   2772: invokevirtual 605	java/lang/Exception:printStackTrace	()V
    //   2775: iload 4
    //   2777: istore 41
    //   2779: iload 5
    //   2781: istore 43
    //   2783: iload 6
    //   2785: istore 44
    //   2787: iload 7
    //   2789: istore 45
    //   2791: iload_2
    //   2792: istore 40
    //   2794: aload 72
    //   2796: astore 87
    //   2798: aload 73
    //   2800: astore 88
    //   2802: aload 74
    //   2804: astore 89
    //   2806: aload 75
    //   2808: astore 90
    //   2810: iload 19
    //   2812: istore 46
    //   2814: iload 20
    //   2816: istore 47
    //   2818: iload_3
    //   2819: istore 48
    //   2821: iload 23
    //   2823: istore 49
    //   2825: iload 8
    //   2827: istore 50
    //   2829: iload 22
    //   2831: istore 51
    //   2833: iload 18
    //   2835: istore 52
    //   2837: iload 17
    //   2839: istore 53
    //   2841: iload 16
    //   2843: istore 54
    //   2845: iload 11
    //   2847: istore 55
    //   2849: iload 9
    //   2851: istore 56
    //   2853: aload 79
    //   2855: astore 91
    //   2857: iload 21
    //   2859: istore 57
    //   2861: iload 14
    //   2863: istore 58
    //   2865: iload 13
    //   2867: istore 59
    //   2869: iload 12
    //   2871: istore 60
    //   2873: aload 78
    //   2875: astore 92
    //   2877: aload 76
    //   2879: astore 93
    //   2881: lload 65
    //   2883: lstore 69
    //   2885: goto -1725 -> 1160
    //   2888: iload_2
    //   2889: istore 26
    //   2891: aload 72
    //   2893: astore 80
    //   2895: aload 73
    //   2897: astore 81
    //   2899: aload 74
    //   2901: astore 82
    //   2903: aload 75
    //   2905: astore 83
    //   2907: iload 19
    //   2909: istore 27
    //   2911: iload 20
    //   2913: istore 28
    //   2915: iload_3
    //   2916: istore 29
    //   2918: iload 23
    //   2920: istore 30
    //   2922: iload 8
    //   2924: istore 31
    //   2926: iload 22
    //   2928: istore 32
    //   2930: iload 18
    //   2932: istore 33
    //   2934: iload 17
    //   2936: istore 34
    //   2938: iload 16
    //   2940: istore 35
    //   2942: iload 11
    //   2944: istore 36
    //   2946: iload 9
    //   2948: istore 37
    //   2950: aload 79
    //   2952: astore 84
    //   2954: iload 21
    //   2956: istore 24
    //   2958: iload 14
    //   2960: istore 25
    //   2962: iload 13
    //   2964: istore 38
    //   2966: iload 12
    //   2968: istore 39
    //   2970: aload 78
    //   2972: astore 85
    //   2974: aload 76
    //   2976: astore 86
    //   2978: lload 65
    //   2980: lstore 67
    //   2982: aload 97
    //   2984: ldc_w 714
    //   2987: invokevirtual 596	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
    //   2990: istore 71
    //   2992: iload 71
    //   2994: ifeq +565 -> 3559
    //   2997: iload_2
    //   2998: istore 10
    //   3000: aload 72
    //   3002: astore 80
    //   3004: aload 73
    //   3006: astore 81
    //   3008: aload 74
    //   3010: astore 82
    //   3012: aload 75
    //   3014: astore 83
    //   3016: new 242	org/json/JSONObject
    //   3019: dup
    //   3020: aload 97
    //   3022: ldc_w 598
    //   3025: invokevirtual 591	java/lang/String:split	(Ljava/lang/String;)[Ljava/lang/String;
    //   3028: iconst_1
    //   3029: aaload
    //   3030: invokespecial 245	org/json/JSONObject:<init>	(Ljava/lang/String;)V
    //   3033: astore 84
    //   3035: iload_2
    //   3036: istore 10
    //   3038: aload 72
    //   3040: astore 80
    //   3042: aload 73
    //   3044: astore 81
    //   3046: aload 74
    //   3048: astore 82
    //   3050: aload 75
    //   3052: astore 83
    //   3054: aload 84
    //   3056: ldc_w 716
    //   3059: invokevirtual 719	org/json/JSONObject:optString	(Ljava/lang/String;)Ljava/lang/String;
    //   3062: astore 77
    //   3064: iload_2
    //   3065: istore 10
    //   3067: aload 72
    //   3069: astore 80
    //   3071: aload 73
    //   3073: astore 81
    //   3075: aload 74
    //   3077: astore 82
    //   3079: aload 77
    //   3081: astore 83
    //   3083: aload 84
    //   3085: ldc_w 721
    //   3088: invokevirtual 719	org/json/JSONObject:optString	(Ljava/lang/String;)Ljava/lang/String;
    //   3091: astore 75
    //   3093: iload_2
    //   3094: istore 10
    //   3096: aload 72
    //   3098: astore 80
    //   3100: aload 73
    //   3102: astore 81
    //   3104: aload 75
    //   3106: astore 82
    //   3108: aload 77
    //   3110: astore 83
    //   3112: aload 84
    //   3114: ldc_w 723
    //   3117: invokevirtual 719	org/json/JSONObject:optString	(Ljava/lang/String;)Ljava/lang/String;
    //   3120: astore 73
    //   3122: aload 84
    //   3124: ldc_w 725
    //   3127: invokevirtual 719	org/json/JSONObject:optString	(Ljava/lang/String;)Ljava/lang/String;
    //   3130: astore 74
    //   3132: aload 73
    //   3134: iconst_1
    //   3135: aload 73
    //   3137: invokevirtual 728	java/lang/String:length	()I
    //   3140: iconst_1
    //   3141: isub
    //   3142: invokevirtual 732	java/lang/String:substring	(II)Ljava/lang/String;
    //   3145: astore 72
    //   3147: aload 72
    //   3149: astore 73
    //   3151: aload 74
    //   3153: iconst_1
    //   3154: aload 74
    //   3156: invokevirtual 728	java/lang/String:length	()I
    //   3159: iconst_1
    //   3160: isub
    //   3161: invokevirtual 732	java/lang/String:substring	(II)Ljava/lang/String;
    //   3164: astore 87
    //   3166: iload_2
    //   3167: istore 10
    //   3169: aload 87
    //   3171: astore 80
    //   3173: aload 73
    //   3175: astore 81
    //   3177: aload 75
    //   3179: astore 82
    //   3181: aload 77
    //   3183: astore 83
    //   3185: aload 84
    //   3187: ldc_w 734
    //   3190: invokevirtual 737	org/json/JSONObject:optInt	(Ljava/lang/String;)I
    //   3193: istore 40
    //   3195: iload 40
    //   3197: istore 10
    //   3199: aload 87
    //   3201: astore 80
    //   3203: aload 73
    //   3205: astore 81
    //   3207: aload 75
    //   3209: astore 82
    //   3211: aload 77
    //   3213: astore 83
    //   3215: aload 84
    //   3217: ldc_w 739
    //   3220: invokevirtual 737	org/json/JSONObject:optInt	(Ljava/lang/String;)I
    //   3223: istore 45
    //   3225: iconst_1
    //   3226: istore 41
    //   3228: iload 5
    //   3230: istore 43
    //   3232: iload 6
    //   3234: istore 44
    //   3236: aload 73
    //   3238: astore 88
    //   3240: aload 75
    //   3242: astore 89
    //   3244: aload 77
    //   3246: astore 90
    //   3248: iload 19
    //   3250: istore 46
    //   3252: iload 20
    //   3254: istore 47
    //   3256: iload_3
    //   3257: istore 48
    //   3259: iload 23
    //   3261: istore 49
    //   3263: iload 8
    //   3265: istore 50
    //   3267: iload 22
    //   3269: istore 51
    //   3271: iload 18
    //   3273: istore 52
    //   3275: iload 17
    //   3277: istore 53
    //   3279: iload 16
    //   3281: istore 54
    //   3283: iload 11
    //   3285: istore 55
    //   3287: iload 9
    //   3289: istore 56
    //   3291: aload 79
    //   3293: astore 91
    //   3295: iload 21
    //   3297: istore 57
    //   3299: iload 14
    //   3301: istore 58
    //   3303: iload 13
    //   3305: istore 59
    //   3307: iload 12
    //   3309: istore 60
    //   3311: aload 78
    //   3313: astore 92
    //   3315: aload 76
    //   3317: astore 93
    //   3319: lload 65
    //   3321: lstore 69
    //   3323: goto -2163 -> 1160
    //   3326: astore 77
    //   3328: aload 83
    //   3330: astore 74
    //   3332: aload 82
    //   3334: astore 75
    //   3336: aload 81
    //   3338: astore 73
    //   3340: aload 80
    //   3342: astore 72
    //   3344: iload 10
    //   3346: istore_2
    //   3347: iload_2
    //   3348: istore 26
    //   3350: aload 72
    //   3352: astore 80
    //   3354: aload 73
    //   3356: astore 81
    //   3358: aload 75
    //   3360: astore 82
    //   3362: aload 74
    //   3364: astore 83
    //   3366: iload 19
    //   3368: istore 27
    //   3370: iload 20
    //   3372: istore 28
    //   3374: iload_3
    //   3375: istore 29
    //   3377: iload 23
    //   3379: istore 30
    //   3381: iload 8
    //   3383: istore 31
    //   3385: iload 22
    //   3387: istore 32
    //   3389: iload 18
    //   3391: istore 33
    //   3393: iload 17
    //   3395: istore 34
    //   3397: iload 16
    //   3399: istore 35
    //   3401: iload 11
    //   3403: istore 36
    //   3405: iload 9
    //   3407: istore 37
    //   3409: aload 79
    //   3411: astore 84
    //   3413: iload 21
    //   3415: istore 24
    //   3417: iload 14
    //   3419: istore 25
    //   3421: iload 13
    //   3423: istore 38
    //   3425: iload 12
    //   3427: istore 39
    //   3429: aload 78
    //   3431: astore 85
    //   3433: aload 76
    //   3435: astore 86
    //   3437: lload 65
    //   3439: lstore 67
    //   3441: aload 77
    //   3443: invokevirtual 605	java/lang/Exception:printStackTrace	()V
    //   3446: iload 4
    //   3448: istore 41
    //   3450: iload 5
    //   3452: istore 43
    //   3454: iload 6
    //   3456: istore 44
    //   3458: iload 7
    //   3460: istore 45
    //   3462: iload_2
    //   3463: istore 40
    //   3465: aload 72
    //   3467: astore 87
    //   3469: aload 73
    //   3471: astore 88
    //   3473: aload 75
    //   3475: astore 89
    //   3477: aload 74
    //   3479: astore 90
    //   3481: iload 19
    //   3483: istore 46
    //   3485: iload 20
    //   3487: istore 47
    //   3489: iload_3
    //   3490: istore 48
    //   3492: iload 23
    //   3494: istore 49
    //   3496: iload 8
    //   3498: istore 50
    //   3500: iload 22
    //   3502: istore 51
    //   3504: iload 18
    //   3506: istore 52
    //   3508: iload 17
    //   3510: istore 53
    //   3512: iload 16
    //   3514: istore 54
    //   3516: iload 11
    //   3518: istore 55
    //   3520: iload 9
    //   3522: istore 56
    //   3524: aload 79
    //   3526: astore 91
    //   3528: iload 21
    //   3530: istore 57
    //   3532: iload 14
    //   3534: istore 58
    //   3536: iload 13
    //   3538: istore 59
    //   3540: iload 12
    //   3542: istore 60
    //   3544: aload 78
    //   3546: astore 92
    //   3548: aload 76
    //   3550: astore 93
    //   3552: lload 65
    //   3554: lstore 69
    //   3556: goto -2396 -> 1160
    //   3559: iload_2
    //   3560: istore 26
    //   3562: aload 72
    //   3564: astore 80
    //   3566: aload 73
    //   3568: astore 81
    //   3570: aload 74
    //   3572: astore 82
    //   3574: aload 75
    //   3576: astore 83
    //   3578: iload 19
    //   3580: istore 27
    //   3582: iload 20
    //   3584: istore 28
    //   3586: iload_3
    //   3587: istore 29
    //   3589: iload 23
    //   3591: istore 30
    //   3593: iload 8
    //   3595: istore 31
    //   3597: iload 22
    //   3599: istore 32
    //   3601: iload 18
    //   3603: istore 33
    //   3605: iload 17
    //   3607: istore 34
    //   3609: iload 16
    //   3611: istore 35
    //   3613: iload 11
    //   3615: istore 36
    //   3617: iload 9
    //   3619: istore 37
    //   3621: aload 79
    //   3623: astore 84
    //   3625: iload 21
    //   3627: istore 24
    //   3629: iload 14
    //   3631: istore 25
    //   3633: iload 13
    //   3635: istore 38
    //   3637: iload 12
    //   3639: istore 39
    //   3641: aload 78
    //   3643: astore 85
    //   3645: aload 76
    //   3647: astore 86
    //   3649: lload 65
    //   3651: lstore 67
    //   3653: iload 9
    //   3655: istore 10
    //   3657: lload 65
    //   3659: lstore 63
    //   3661: aload 97
    //   3663: ldc_w 741
    //   3666: invokevirtual 596	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
    //   3669: ifeq +121 -> 3790
    //   3672: iload_2
    //   3673: istore 26
    //   3675: aload 72
    //   3677: astore 80
    //   3679: aload 73
    //   3681: astore 81
    //   3683: aload 74
    //   3685: astore 82
    //   3687: aload 75
    //   3689: astore 83
    //   3691: iload 19
    //   3693: istore 27
    //   3695: iload 20
    //   3697: istore 28
    //   3699: iload_3
    //   3700: istore 29
    //   3702: iload 23
    //   3704: istore 30
    //   3706: iload 8
    //   3708: istore 31
    //   3710: iload 22
    //   3712: istore 32
    //   3714: iload 18
    //   3716: istore 33
    //   3718: iload 17
    //   3720: istore 34
    //   3722: iload 16
    //   3724: istore 35
    //   3726: iload 11
    //   3728: istore 36
    //   3730: iload 9
    //   3732: istore 37
    //   3734: aload 79
    //   3736: astore 84
    //   3738: iload 21
    //   3740: istore 24
    //   3742: iload 14
    //   3744: istore 25
    //   3746: iload 13
    //   3748: istore 38
    //   3750: iload 12
    //   3752: istore 39
    //   3754: aload 78
    //   3756: astore 85
    //   3758: aload 76
    //   3760: astore 86
    //   3762: lload 65
    //   3764: lstore 67
    //   3766: aload 97
    //   3768: ldc_w 598
    //   3771: invokevirtual 591	java/lang/String:split	(Ljava/lang/String;)[Ljava/lang/String;
    //   3774: iconst_1
    //   3775: aaload
    //   3776: invokevirtual 601	java/lang/String:trim	()Ljava/lang/String;
    //   3779: invokestatic 746	java/lang/Long:valueOf	(Ljava/lang/String;)Ljava/lang/Long;
    //   3782: invokevirtual 750	java/lang/Long:longValue	()J
    //   3785: lstore 63
    //   3787: iconst_1
    //   3788: istore 10
    //   3790: iload_2
    //   3791: istore 26
    //   3793: aload 72
    //   3795: astore 80
    //   3797: aload 73
    //   3799: astore 81
    //   3801: aload 74
    //   3803: astore 82
    //   3805: aload 75
    //   3807: astore 83
    //   3809: iload 19
    //   3811: istore 27
    //   3813: iload 20
    //   3815: istore 28
    //   3817: iload_3
    //   3818: istore 29
    //   3820: iload 23
    //   3822: istore 30
    //   3824: iload 8
    //   3826: istore 31
    //   3828: iload 22
    //   3830: istore 32
    //   3832: iload 18
    //   3834: istore 33
    //   3836: iload 17
    //   3838: istore 34
    //   3840: iload 16
    //   3842: istore 35
    //   3844: iload 11
    //   3846: istore 36
    //   3848: iload 10
    //   3850: istore 37
    //   3852: aload 79
    //   3854: astore 84
    //   3856: iload 21
    //   3858: istore 24
    //   3860: iload 14
    //   3862: istore 25
    //   3864: iload 13
    //   3866: istore 38
    //   3868: iload 12
    //   3870: istore 39
    //   3872: aload 78
    //   3874: astore 85
    //   3876: aload 76
    //   3878: astore 86
    //   3880: lload 63
    //   3882: lstore 67
    //   3884: iload 11
    //   3886: istore 9
    //   3888: aload 76
    //   3890: astore 77
    //   3892: aload 97
    //   3894: ldc_w 698
    //   3897: invokevirtual 596	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
    //   3900: ifeq +115 -> 4015
    //   3903: iload_2
    //   3904: istore 26
    //   3906: aload 72
    //   3908: astore 80
    //   3910: aload 73
    //   3912: astore 81
    //   3914: aload 74
    //   3916: astore 82
    //   3918: aload 75
    //   3920: astore 83
    //   3922: iload 19
    //   3924: istore 27
    //   3926: iload 20
    //   3928: istore 28
    //   3930: iload_3
    //   3931: istore 29
    //   3933: iload 23
    //   3935: istore 30
    //   3937: iload 8
    //   3939: istore 31
    //   3941: iload 22
    //   3943: istore 32
    //   3945: iload 18
    //   3947: istore 33
    //   3949: iload 17
    //   3951: istore 34
    //   3953: iload 16
    //   3955: istore 35
    //   3957: iload 11
    //   3959: istore 36
    //   3961: iload 10
    //   3963: istore 37
    //   3965: aload 79
    //   3967: astore 84
    //   3969: iload 21
    //   3971: istore 24
    //   3973: iload 14
    //   3975: istore 25
    //   3977: iload 13
    //   3979: istore 38
    //   3981: iload 12
    //   3983: istore 39
    //   3985: aload 78
    //   3987: astore 85
    //   3989: aload 76
    //   3991: astore 86
    //   3993: lload 63
    //   3995: lstore 67
    //   3997: aload 97
    //   3999: ldc_w 598
    //   4002: invokevirtual 591	java/lang/String:split	(Ljava/lang/String;)[Ljava/lang/String;
    //   4005: iconst_1
    //   4006: aaload
    //   4007: invokevirtual 601	java/lang/String:trim	()Ljava/lang/String;
    //   4010: astore 77
    //   4012: iconst_1
    //   4013: istore 9
    //   4015: iload_2
    //   4016: istore 26
    //   4018: aload 72
    //   4020: astore 80
    //   4022: aload 73
    //   4024: astore 81
    //   4026: aload 74
    //   4028: astore 82
    //   4030: aload 75
    //   4032: astore 83
    //   4034: iload 19
    //   4036: istore 27
    //   4038: iload 20
    //   4040: istore 28
    //   4042: iload_3
    //   4043: istore 29
    //   4045: iload 23
    //   4047: istore 30
    //   4049: iload 8
    //   4051: istore 31
    //   4053: iload 22
    //   4055: istore 32
    //   4057: iload 18
    //   4059: istore 33
    //   4061: iload 17
    //   4063: istore 34
    //   4065: iload 16
    //   4067: istore 35
    //   4069: iload 9
    //   4071: istore 36
    //   4073: iload 10
    //   4075: istore 37
    //   4077: aload 79
    //   4079: astore 84
    //   4081: iload 21
    //   4083: istore 24
    //   4085: iload 14
    //   4087: istore 25
    //   4089: iload 13
    //   4091: istore 38
    //   4093: iload 12
    //   4095: istore 39
    //   4097: aload 78
    //   4099: astore 85
    //   4101: aload 77
    //   4103: astore 86
    //   4105: lload 63
    //   4107: lstore 67
    //   4109: aload 78
    //   4111: astore 76
    //   4113: aload 97
    //   4115: ldc_w 752
    //   4118: invokevirtual 596	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
    //   4121: ifeq +112 -> 4233
    //   4124: iload_2
    //   4125: istore 26
    //   4127: aload 72
    //   4129: astore 80
    //   4131: aload 73
    //   4133: astore 81
    //   4135: aload 74
    //   4137: astore 82
    //   4139: aload 75
    //   4141: astore 83
    //   4143: iload 19
    //   4145: istore 27
    //   4147: iload 20
    //   4149: istore 28
    //   4151: iload_3
    //   4152: istore 29
    //   4154: iload 23
    //   4156: istore 30
    //   4158: iload 8
    //   4160: istore 31
    //   4162: iload 22
    //   4164: istore 32
    //   4166: iload 18
    //   4168: istore 33
    //   4170: iload 17
    //   4172: istore 34
    //   4174: iload 16
    //   4176: istore 35
    //   4178: iload 9
    //   4180: istore 36
    //   4182: iload 10
    //   4184: istore 37
    //   4186: aload 79
    //   4188: astore 84
    //   4190: iload 21
    //   4192: istore 24
    //   4194: iload 14
    //   4196: istore 25
    //   4198: iload 13
    //   4200: istore 38
    //   4202: iload 12
    //   4204: istore 39
    //   4206: aload 78
    //   4208: astore 85
    //   4210: aload 77
    //   4212: astore 86
    //   4214: lload 63
    //   4216: lstore 67
    //   4218: aload 97
    //   4220: ldc_w 598
    //   4223: invokevirtual 591	java/lang/String:split	(Ljava/lang/String;)[Ljava/lang/String;
    //   4226: iconst_1
    //   4227: aaload
    //   4228: invokevirtual 601	java/lang/String:trim	()Ljava/lang/String;
    //   4231: astore 76
    //   4233: iload_2
    //   4234: istore 26
    //   4236: aload 72
    //   4238: astore 80
    //   4240: aload 73
    //   4242: astore 81
    //   4244: aload 74
    //   4246: astore 82
    //   4248: aload 75
    //   4250: astore 83
    //   4252: iload 19
    //   4254: istore 27
    //   4256: iload 20
    //   4258: istore 28
    //   4260: iload_3
    //   4261: istore 29
    //   4263: iload 23
    //   4265: istore 30
    //   4267: iload 8
    //   4269: istore 31
    //   4271: iload 22
    //   4273: istore 32
    //   4275: iload 18
    //   4277: istore 33
    //   4279: iload 17
    //   4281: istore 34
    //   4283: iload 16
    //   4285: istore 35
    //   4287: iload 9
    //   4289: istore 36
    //   4291: iload 10
    //   4293: istore 37
    //   4295: aload 79
    //   4297: astore 84
    //   4299: iload 21
    //   4301: istore 24
    //   4303: iload 14
    //   4305: istore 25
    //   4307: iload 13
    //   4309: istore 38
    //   4311: iload 12
    //   4313: istore 39
    //   4315: aload 76
    //   4317: astore 85
    //   4319: aload 77
    //   4321: astore 86
    //   4323: lload 63
    //   4325: lstore 67
    //   4327: iload 16
    //   4329: istore 11
    //   4331: iload 12
    //   4333: istore 15
    //   4335: aload 97
    //   4337: ldc_w 754
    //   4340: invokevirtual 596	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
    //   4343: ifeq +170 -> 4513
    //   4346: iload_2
    //   4347: istore 26
    //   4349: aload 72
    //   4351: astore 80
    //   4353: aload 73
    //   4355: astore 81
    //   4357: aload 74
    //   4359: astore 82
    //   4361: aload 75
    //   4363: astore 83
    //   4365: iload 19
    //   4367: istore 27
    //   4369: iload 20
    //   4371: istore 28
    //   4373: iload_3
    //   4374: istore 29
    //   4376: iload 23
    //   4378: istore 30
    //   4380: iload 8
    //   4382: istore 31
    //   4384: iload 22
    //   4386: istore 32
    //   4388: iload 18
    //   4390: istore 33
    //   4392: iload 17
    //   4394: istore 34
    //   4396: iload 16
    //   4398: istore 35
    //   4400: iload 9
    //   4402: istore 36
    //   4404: iload 10
    //   4406: istore 37
    //   4408: aload 79
    //   4410: astore 84
    //   4412: iload 21
    //   4414: istore 24
    //   4416: iload 14
    //   4418: istore 25
    //   4420: iload 13
    //   4422: istore 38
    //   4424: iload 12
    //   4426: istore 39
    //   4428: aload 76
    //   4430: astore 85
    //   4432: aload 77
    //   4434: astore 86
    //   4436: lload 63
    //   4438: lstore 67
    //   4440: aload 97
    //   4442: ldc_w 598
    //   4445: invokevirtual 591	java/lang/String:split	(Ljava/lang/String;)[Ljava/lang/String;
    //   4448: iconst_1
    //   4449: aaload
    //   4450: invokevirtual 601	java/lang/String:trim	()Ljava/lang/String;
    //   4453: invokestatic 487	java/lang/Integer:valueOf	(Ljava/lang/String;)Ljava/lang/Integer;
    //   4456: invokevirtual 490	java/lang/Integer:intValue	()I
    //   4459: istore 12
    //   4461: iload 12
    //   4463: istore 11
    //   4465: iload 12
    //   4467: ifeq +2718 -> 7185
    //   4470: iload 12
    //   4472: istore 11
    //   4474: iload 12
    //   4476: iconst_1
    //   4477: if_icmpeq +2708 -> 7185
    //   4480: iload 12
    //   4482: istore 11
    //   4484: iload 12
    //   4486: iconst_2
    //   4487: if_icmpeq +2698 -> 7185
    //   4490: iload 12
    //   4492: istore 11
    //   4494: iload 12
    //   4496: iconst_3
    //   4497: if_icmpeq +2688 -> 7185
    //   4500: iload 12
    //   4502: iconst_4
    //   4503: if_icmpne +2722 -> 7225
    //   4506: iload 12
    //   4508: istore 11
    //   4510: goto +2675 -> 7185
    //   4513: iload_2
    //   4514: istore 26
    //   4516: aload 72
    //   4518: astore 80
    //   4520: aload 73
    //   4522: astore 81
    //   4524: aload 74
    //   4526: astore 82
    //   4528: aload 75
    //   4530: astore 83
    //   4532: iload 19
    //   4534: istore 27
    //   4536: iload 20
    //   4538: istore 28
    //   4540: iload_3
    //   4541: istore 29
    //   4543: iload 23
    //   4545: istore 30
    //   4547: iload 8
    //   4549: istore 31
    //   4551: iload 22
    //   4553: istore 32
    //   4555: iload 18
    //   4557: istore 33
    //   4559: iload 17
    //   4561: istore 34
    //   4563: iload 11
    //   4565: istore 35
    //   4567: iload 9
    //   4569: istore 36
    //   4571: iload 10
    //   4573: istore 37
    //   4575: aload 79
    //   4577: astore 84
    //   4579: iload 21
    //   4581: istore 24
    //   4583: iload 14
    //   4585: istore 25
    //   4587: iload 13
    //   4589: istore 38
    //   4591: iload 15
    //   4593: istore 39
    //   4595: aload 76
    //   4597: astore 85
    //   4599: aload 77
    //   4601: astore 86
    //   4603: lload 63
    //   4605: lstore 67
    //   4607: iload 17
    //   4609: istore 12
    //   4611: iload 13
    //   4613: istore 16
    //   4615: aload 97
    //   4617: ldc_w 756
    //   4620: invokevirtual 596	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
    //   4623: ifeq +150 -> 4773
    //   4626: iload_2
    //   4627: istore 26
    //   4629: aload 72
    //   4631: astore 80
    //   4633: aload 73
    //   4635: astore 81
    //   4637: aload 74
    //   4639: astore 82
    //   4641: aload 75
    //   4643: astore 83
    //   4645: iload 19
    //   4647: istore 27
    //   4649: iload 20
    //   4651: istore 28
    //   4653: iload_3
    //   4654: istore 29
    //   4656: iload 23
    //   4658: istore 30
    //   4660: iload 8
    //   4662: istore 31
    //   4664: iload 22
    //   4666: istore 32
    //   4668: iload 18
    //   4670: istore 33
    //   4672: iload 17
    //   4674: istore 34
    //   4676: iload 11
    //   4678: istore 35
    //   4680: iload 9
    //   4682: istore 36
    //   4684: iload 10
    //   4686: istore 37
    //   4688: aload 79
    //   4690: astore 84
    //   4692: iload 21
    //   4694: istore 24
    //   4696: iload 14
    //   4698: istore 25
    //   4700: iload 13
    //   4702: istore 38
    //   4704: iload 15
    //   4706: istore 39
    //   4708: aload 76
    //   4710: astore 85
    //   4712: aload 77
    //   4714: astore 86
    //   4716: lload 63
    //   4718: lstore 67
    //   4720: aload 97
    //   4722: ldc_w 598
    //   4725: invokevirtual 591	java/lang/String:split	(Ljava/lang/String;)[Ljava/lang/String;
    //   4728: iconst_1
    //   4729: aaload
    //   4730: invokevirtual 601	java/lang/String:trim	()Ljava/lang/String;
    //   4733: invokestatic 487	java/lang/Integer:valueOf	(Ljava/lang/String;)Ljava/lang/Integer;
    //   4736: invokevirtual 490	java/lang/Integer:intValue	()I
    //   4739: istore 13
    //   4741: iload 13
    //   4743: istore 12
    //   4745: iload 13
    //   4747: ifeq +2448 -> 7195
    //   4750: iload 13
    //   4752: istore 12
    //   4754: iload 13
    //   4756: iconst_1
    //   4757: if_icmpeq +2438 -> 7195
    //   4760: iload 13
    //   4762: iconst_2
    //   4763: if_icmpne +2468 -> 7231
    //   4766: iload 13
    //   4768: istore 12
    //   4770: goto +2425 -> 7195
    //   4773: iload_2
    //   4774: istore 26
    //   4776: aload 72
    //   4778: astore 80
    //   4780: aload 73
    //   4782: astore 81
    //   4784: aload 74
    //   4786: astore 82
    //   4788: aload 75
    //   4790: astore 83
    //   4792: iload 19
    //   4794: istore 27
    //   4796: iload 20
    //   4798: istore 28
    //   4800: iload_3
    //   4801: istore 29
    //   4803: iload 23
    //   4805: istore 30
    //   4807: iload 8
    //   4809: istore 31
    //   4811: iload 22
    //   4813: istore 32
    //   4815: iload 18
    //   4817: istore 33
    //   4819: iload 12
    //   4821: istore 34
    //   4823: iload 11
    //   4825: istore 35
    //   4827: iload 9
    //   4829: istore 36
    //   4831: iload 10
    //   4833: istore 37
    //   4835: aload 79
    //   4837: astore 84
    //   4839: iload 21
    //   4841: istore 24
    //   4843: iload 14
    //   4845: istore 25
    //   4847: iload 16
    //   4849: istore 38
    //   4851: iload 15
    //   4853: istore 39
    //   4855: aload 76
    //   4857: astore 85
    //   4859: aload 77
    //   4861: astore 86
    //   4863: lload 63
    //   4865: lstore 67
    //   4867: iload 18
    //   4869: istore 13
    //   4871: iload 14
    //   4873: istore 17
    //   4875: aload 97
    //   4877: ldc_w 758
    //   4880: invokevirtual 596	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
    //   4883: ifeq +126 -> 5009
    //   4886: iload_2
    //   4887: istore 26
    //   4889: aload 72
    //   4891: astore 80
    //   4893: aload 73
    //   4895: astore 81
    //   4897: aload 74
    //   4899: astore 82
    //   4901: aload 75
    //   4903: astore 83
    //   4905: iload 19
    //   4907: istore 27
    //   4909: iload 20
    //   4911: istore 28
    //   4913: iload_3
    //   4914: istore 29
    //   4916: iload 23
    //   4918: istore 30
    //   4920: iload 8
    //   4922: istore 31
    //   4924: iload 22
    //   4926: istore 32
    //   4928: iload 18
    //   4930: istore 33
    //   4932: iload 12
    //   4934: istore 34
    //   4936: iload 11
    //   4938: istore 35
    //   4940: iload 9
    //   4942: istore 36
    //   4944: iload 10
    //   4946: istore 37
    //   4948: aload 79
    //   4950: astore 84
    //   4952: iload 21
    //   4954: istore 24
    //   4956: iload 14
    //   4958: istore 25
    //   4960: iload 16
    //   4962: istore 38
    //   4964: iload 15
    //   4966: istore 39
    //   4968: aload 76
    //   4970: astore 85
    //   4972: aload 77
    //   4974: astore 86
    //   4976: lload 63
    //   4978: lstore 67
    //   4980: aload 97
    //   4982: ldc_w 598
    //   4985: invokevirtual 591	java/lang/String:split	(Ljava/lang/String;)[Ljava/lang/String;
    //   4988: iconst_1
    //   4989: aaload
    //   4990: invokevirtual 601	java/lang/String:trim	()Ljava/lang/String;
    //   4993: invokestatic 487	java/lang/Integer:valueOf	(Ljava/lang/String;)Ljava/lang/Integer;
    //   4996: invokevirtual 490	java/lang/Integer:intValue	()I
    //   4999: istore 13
    //   5001: iload 13
    //   5003: ifle +1346 -> 6349
    //   5006: goto +2199 -> 7205
    //   5009: iload_2
    //   5010: istore 26
    //   5012: aload 72
    //   5014: astore 80
    //   5016: aload 73
    //   5018: astore 81
    //   5020: aload 74
    //   5022: astore 82
    //   5024: aload 75
    //   5026: astore 83
    //   5028: iload 19
    //   5030: istore 27
    //   5032: iload 20
    //   5034: istore 28
    //   5036: iload_3
    //   5037: istore 29
    //   5039: iload 23
    //   5041: istore 30
    //   5043: iload 8
    //   5045: istore 31
    //   5047: iload 22
    //   5049: istore 32
    //   5051: iload 13
    //   5053: istore 33
    //   5055: iload 12
    //   5057: istore 34
    //   5059: iload 11
    //   5061: istore 35
    //   5063: iload 9
    //   5065: istore 36
    //   5067: iload 10
    //   5069: istore 37
    //   5071: aload 79
    //   5073: astore 84
    //   5075: iload 21
    //   5077: istore 24
    //   5079: iload 17
    //   5081: istore 25
    //   5083: iload 16
    //   5085: istore 38
    //   5087: iload 15
    //   5089: istore 39
    //   5091: aload 76
    //   5093: astore 85
    //   5095: aload 77
    //   5097: astore 86
    //   5099: lload 63
    //   5101: lstore 67
    //   5103: iload 22
    //   5105: istore 14
    //   5107: iload 21
    //   5109: istore 18
    //   5111: aload 97
    //   5113: ldc_w 760
    //   5116: invokevirtual 596	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
    //   5119: ifeq +126 -> 5245
    //   5122: iload_2
    //   5123: istore 26
    //   5125: aload 72
    //   5127: astore 80
    //   5129: aload 73
    //   5131: astore 81
    //   5133: aload 74
    //   5135: astore 82
    //   5137: aload 75
    //   5139: astore 83
    //   5141: iload 19
    //   5143: istore 27
    //   5145: iload 20
    //   5147: istore 28
    //   5149: iload_3
    //   5150: istore 29
    //   5152: iload 23
    //   5154: istore 30
    //   5156: iload 8
    //   5158: istore 31
    //   5160: iload 22
    //   5162: istore 32
    //   5164: iload 13
    //   5166: istore 33
    //   5168: iload 12
    //   5170: istore 34
    //   5172: iload 11
    //   5174: istore 35
    //   5176: iload 9
    //   5178: istore 36
    //   5180: iload 10
    //   5182: istore 37
    //   5184: aload 79
    //   5186: astore 84
    //   5188: iload 21
    //   5190: istore 24
    //   5192: iload 17
    //   5194: istore 25
    //   5196: iload 16
    //   5198: istore 38
    //   5200: iload 15
    //   5202: istore 39
    //   5204: aload 76
    //   5206: astore 85
    //   5208: aload 77
    //   5210: astore 86
    //   5212: lload 63
    //   5214: lstore 67
    //   5216: aload 97
    //   5218: ldc_w 598
    //   5221: invokevirtual 591	java/lang/String:split	(Ljava/lang/String;)[Ljava/lang/String;
    //   5224: iconst_1
    //   5225: aaload
    //   5226: invokevirtual 601	java/lang/String:trim	()Ljava/lang/String;
    //   5229: invokestatic 487	java/lang/Integer:valueOf	(Ljava/lang/String;)Ljava/lang/Integer;
    //   5232: invokevirtual 490	java/lang/Integer:intValue	()I
    //   5235: istore 14
    //   5237: iload 14
    //   5239: ifle +1212 -> 6451
    //   5242: goto +1973 -> 7215
    //   5245: iload 4
    //   5247: istore 41
    //   5249: iload 5
    //   5251: istore 43
    //   5253: iload 6
    //   5255: istore 44
    //   5257: iload 7
    //   5259: istore 45
    //   5261: iload_2
    //   5262: istore 40
    //   5264: aload 72
    //   5266: astore 87
    //   5268: aload 73
    //   5270: astore 88
    //   5272: aload 74
    //   5274: astore 89
    //   5276: aload 75
    //   5278: astore 90
    //   5280: iload 19
    //   5282: istore 46
    //   5284: iload 20
    //   5286: istore 47
    //   5288: iload_3
    //   5289: istore 48
    //   5291: iload 23
    //   5293: istore 49
    //   5295: iload 8
    //   5297: istore 50
    //   5299: iload 14
    //   5301: istore 51
    //   5303: iload 13
    //   5305: istore 52
    //   5307: iload 12
    //   5309: istore 53
    //   5311: iload 11
    //   5313: istore 54
    //   5315: iload 9
    //   5317: istore 55
    //   5319: iload 10
    //   5321: istore 56
    //   5323: aload 79
    //   5325: astore 91
    //   5327: iload 18
    //   5329: istore 57
    //   5331: iload 17
    //   5333: istore 58
    //   5335: iload 16
    //   5337: istore 59
    //   5339: iload 15
    //   5341: istore 60
    //   5343: aload 76
    //   5345: astore 92
    //   5347: aload 77
    //   5349: astore 93
    //   5351: lload 63
    //   5353: lstore 69
    //   5355: iload_2
    //   5356: istore 26
    //   5358: aload 72
    //   5360: astore 80
    //   5362: aload 73
    //   5364: astore 81
    //   5366: aload 74
    //   5368: astore 82
    //   5370: aload 75
    //   5372: astore 83
    //   5374: iload 19
    //   5376: istore 27
    //   5378: iload 20
    //   5380: istore 28
    //   5382: iload_3
    //   5383: istore 29
    //   5385: iload 23
    //   5387: istore 30
    //   5389: iload 8
    //   5391: istore 31
    //   5393: iload 14
    //   5395: istore 32
    //   5397: iload 13
    //   5399: istore 33
    //   5401: iload 12
    //   5403: istore 34
    //   5405: iload 11
    //   5407: istore 35
    //   5409: iload 9
    //   5411: istore 36
    //   5413: iload 10
    //   5415: istore 37
    //   5417: aload 79
    //   5419: astore 84
    //   5421: iload 18
    //   5423: istore 24
    //   5425: iload 17
    //   5427: istore 25
    //   5429: iload 16
    //   5431: istore 38
    //   5433: iload 15
    //   5435: istore 39
    //   5437: aload 76
    //   5439: astore 85
    //   5441: aload 77
    //   5443: astore 86
    //   5445: lload 63
    //   5447: lstore 67
    //   5449: aload 97
    //   5451: ldc_w 762
    //   5454: invokevirtual 596	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
    //   5457: ifeq -4297 -> 1160
    //   5460: iload_2
    //   5461: istore 26
    //   5463: aload 72
    //   5465: astore 80
    //   5467: aload 73
    //   5469: astore 81
    //   5471: aload 74
    //   5473: astore 82
    //   5475: aload 75
    //   5477: astore 83
    //   5479: iload 19
    //   5481: istore 27
    //   5483: iload 20
    //   5485: istore 28
    //   5487: iload_3
    //   5488: istore 29
    //   5490: iload 23
    //   5492: istore 30
    //   5494: iload 8
    //   5496: istore 31
    //   5498: iload 14
    //   5500: istore 32
    //   5502: iload 13
    //   5504: istore 33
    //   5506: iload 12
    //   5508: istore 34
    //   5510: iload 11
    //   5512: istore 35
    //   5514: iload 9
    //   5516: istore 36
    //   5518: iload 10
    //   5520: istore 37
    //   5522: aload 79
    //   5524: astore 84
    //   5526: iload 18
    //   5528: istore 24
    //   5530: iload 17
    //   5532: istore 25
    //   5534: iload 16
    //   5536: istore 38
    //   5538: iload 15
    //   5540: istore 39
    //   5542: aload 76
    //   5544: astore 85
    //   5546: aload 77
    //   5548: astore 86
    //   5550: lload 63
    //   5552: lstore 67
    //   5554: aload 97
    //   5556: ldc_w 598
    //   5559: invokevirtual 591	java/lang/String:split	(Ljava/lang/String;)[Ljava/lang/String;
    //   5562: astore 87
    //   5564: iload_2
    //   5565: istore 26
    //   5567: aload 72
    //   5569: astore 80
    //   5571: aload 73
    //   5573: astore 81
    //   5575: aload 74
    //   5577: astore 82
    //   5579: aload 75
    //   5581: astore 83
    //   5583: iload 19
    //   5585: istore 27
    //   5587: iload 20
    //   5589: istore 28
    //   5591: iload_3
    //   5592: istore 29
    //   5594: iload 23
    //   5596: istore 30
    //   5598: iload 8
    //   5600: istore 31
    //   5602: iload 14
    //   5604: istore 32
    //   5606: iload 13
    //   5608: istore 33
    //   5610: iload 12
    //   5612: istore 34
    //   5614: iload 11
    //   5616: istore 35
    //   5618: iload 9
    //   5620: istore 36
    //   5622: iload 10
    //   5624: istore 37
    //   5626: aload 79
    //   5628: astore 84
    //   5630: iload 18
    //   5632: istore 24
    //   5634: iload 17
    //   5636: istore 25
    //   5638: iload 16
    //   5640: istore 38
    //   5642: iload 15
    //   5644: istore 39
    //   5646: aload 76
    //   5648: astore 85
    //   5650: aload 77
    //   5652: astore 86
    //   5654: lload 63
    //   5656: lstore 67
    //   5658: aload 87
    //   5660: iconst_1
    //   5661: aaload
    //   5662: invokestatic 764	com/tencent/mobileqq/activity/aio/item/PokeItemHelper:a	(Ljava/lang/String;)Ljava/lang/String;
    //   5665: astore 78
    //   5667: iload_2
    //   5668: istore 26
    //   5670: aload 72
    //   5672: astore 80
    //   5674: aload 73
    //   5676: astore 81
    //   5678: aload 74
    //   5680: astore 82
    //   5682: aload 75
    //   5684: astore 83
    //   5686: iload 19
    //   5688: istore 27
    //   5690: iload 20
    //   5692: istore 28
    //   5694: iload_3
    //   5695: istore 29
    //   5697: iload 23
    //   5699: istore 30
    //   5701: iload 8
    //   5703: istore 31
    //   5705: iload 14
    //   5707: istore 32
    //   5709: iload 13
    //   5711: istore 33
    //   5713: iload 12
    //   5715: istore 34
    //   5717: iload 11
    //   5719: istore 35
    //   5721: iload 9
    //   5723: istore 36
    //   5725: iload 10
    //   5727: istore 37
    //   5729: aload 78
    //   5731: astore 84
    //   5733: iload 18
    //   5735: istore 24
    //   5737: iload 17
    //   5739: istore 25
    //   5741: iload 16
    //   5743: istore 38
    //   5745: iload 15
    //   5747: istore 39
    //   5749: aload 76
    //   5751: astore 85
    //   5753: aload 77
    //   5755: astore 86
    //   5757: lload 63
    //   5759: lstore 67
    //   5761: aload 87
    //   5763: iconst_1
    //   5764: aaload
    //   5765: invokestatic 766	com/tencent/mobileqq/activity/aio/item/PokeItemHelper:c	(Ljava/lang/String;)I
    //   5768: istore 21
    //   5770: aload 87
    //   5772: iconst_1
    //   5773: aaload
    //   5774: invokestatic 768	com/tencent/mobileqq/activity/aio/item/PokeItemHelper:b	(Ljava/lang/String;)I
    //   5777: istore 22
    //   5779: aload 87
    //   5781: iconst_1
    //   5782: aaload
    //   5783: invokestatic 770	com/tencent/mobileqq/activity/aio/item/PokeItemHelper:a	(Ljava/lang/String;)I
    //   5786: istore 24
    //   5788: iload 21
    //   5790: iconst_1
    //   5791: if_icmpeq +1387 -> 7178
    //   5794: iload 21
    //   5796: iconst_2
    //   5797: if_icmpeq +1381 -> 7178
    //   5800: iconst_0
    //   5801: istore 19
    //   5803: iload_3
    //   5804: istore 20
    //   5806: iload 19
    //   5808: ifeq +31 -> 5839
    //   5811: aload 87
    //   5813: iconst_1
    //   5814: aaload
    //   5815: invokestatic 772	com/tencent/mobileqq/activity/aio/item/PokeItemHelper:d	(Ljava/lang/String;)I
    //   5818: istore 20
    //   5820: iload 20
    //   5822: istore_3
    //   5823: iload_3
    //   5824: ifle +12 -> 5836
    //   5827: iload_3
    //   5828: istore 20
    //   5830: iload_3
    //   5831: bipush 6
    //   5833: if_icmple +6 -> 5839
    //   5836: iconst_1
    //   5837: istore 20
    //   5839: iload 22
    //   5841: iconst_1
    //   5842: if_icmpeq +1330 -> 7172
    //   5845: iconst_0
    //   5846: istore_3
    //   5847: iload 24
    //   5849: ifgt +1316 -> 7165
    //   5852: iconst_3
    //   5853: istore 8
    //   5855: iconst_1
    //   5856: istore 22
    //   5858: iconst_1
    //   5859: istore 21
    //   5861: iload 4
    //   5863: istore 41
    //   5865: iload 5
    //   5867: istore 43
    //   5869: iload 6
    //   5871: istore 44
    //   5873: iload 7
    //   5875: istore 45
    //   5877: iload_2
    //   5878: istore 40
    //   5880: aload 72
    //   5882: astore 87
    //   5884: aload 73
    //   5886: astore 88
    //   5888: aload 74
    //   5890: astore 89
    //   5892: aload 75
    //   5894: astore 90
    //   5896: iload 8
    //   5898: istore 46
    //   5900: iload_3
    //   5901: istore 47
    //   5903: iload 20
    //   5905: istore 48
    //   5907: iload 19
    //   5909: istore 49
    //   5911: iload 21
    //   5913: istore 50
    //   5915: iload 14
    //   5917: istore 51
    //   5919: iload 13
    //   5921: istore 52
    //   5923: iload 12
    //   5925: istore 53
    //   5927: iload 11
    //   5929: istore 54
    //   5931: iload 9
    //   5933: istore 55
    //   5935: iload 10
    //   5937: istore 56
    //   5939: aload 78
    //   5941: astore 91
    //   5943: iload 18
    //   5945: istore 57
    //   5947: iload 17
    //   5949: istore 58
    //   5951: iload 16
    //   5953: istore 59
    //   5955: iload 15
    //   5957: istore 60
    //   5959: aload 76
    //   5961: astore 92
    //   5963: aload 77
    //   5965: astore 93
    //   5967: lload 63
    //   5969: lstore 69
    //   5971: iload_2
    //   5972: istore 26
    //   5974: aload 72
    //   5976: astore 80
    //   5978: aload 73
    //   5980: astore 81
    //   5982: aload 74
    //   5984: astore 82
    //   5986: aload 75
    //   5988: astore 83
    //   5990: iload 8
    //   5992: istore 27
    //   5994: iload_3
    //   5995: istore 28
    //   5997: iload 20
    //   5999: istore 29
    //   6001: iload 19
    //   6003: istore 30
    //   6005: iload 22
    //   6007: istore 31
    //   6009: iload 14
    //   6011: istore 32
    //   6013: iload 13
    //   6015: istore 33
    //   6017: iload 12
    //   6019: istore 34
    //   6021: iload 11
    //   6023: istore 35
    //   6025: iload 9
    //   6027: istore 36
    //   6029: iload 10
    //   6031: istore 37
    //   6033: aload 78
    //   6035: astore 84
    //   6037: iload 18
    //   6039: istore 24
    //   6041: iload 17
    //   6043: istore 25
    //   6045: iload 16
    //   6047: istore 38
    //   6049: iload 15
    //   6051: istore 39
    //   6053: aload 76
    //   6055: astore 85
    //   6057: aload 77
    //   6059: astore 86
    //   6061: lload 63
    //   6063: lstore 67
    //   6065: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   6068: ifeq -4908 -> 1160
    //   6071: iload_2
    //   6072: istore 26
    //   6074: aload 72
    //   6076: astore 80
    //   6078: aload 73
    //   6080: astore 81
    //   6082: aload 74
    //   6084: astore 82
    //   6086: aload 75
    //   6088: astore 83
    //   6090: iload 8
    //   6092: istore 27
    //   6094: iload_3
    //   6095: istore 28
    //   6097: iload 20
    //   6099: istore 29
    //   6101: iload 19
    //   6103: istore 30
    //   6105: iload 22
    //   6107: istore 31
    //   6109: iload 14
    //   6111: istore 32
    //   6113: iload 13
    //   6115: istore 33
    //   6117: iload 12
    //   6119: istore 34
    //   6121: iload 11
    //   6123: istore 35
    //   6125: iload 9
    //   6127: istore 36
    //   6129: iload 10
    //   6131: istore 37
    //   6133: aload 78
    //   6135: astore 84
    //   6137: iload 18
    //   6139: istore 24
    //   6141: iload 17
    //   6143: istore 25
    //   6145: iload 16
    //   6147: istore 38
    //   6149: iload 15
    //   6151: istore 39
    //   6153: aload 76
    //   6155: astore 85
    //   6157: aload 77
    //   6159: astore 86
    //   6161: lload 63
    //   6163: lstore 67
    //   6165: ldc_w 569
    //   6168: iconst_2
    //   6169: new 122	java/lang/StringBuilder
    //   6172: dup
    //   6173: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   6176: ldc_w 774
    //   6179: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   6182: aload 78
    //   6184: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   6187: ldc_w 776
    //   6190: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   6193: iload 19
    //   6195: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   6198: ldc_w 778
    //   6201: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   6204: iload 20
    //   6206: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   6209: ldc_w 780
    //   6212: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   6215: iload_3
    //   6216: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   6219: ldc_w 782
    //   6222: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   6225: iload 8
    //   6227: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   6230: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   6233: invokestatic 141	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/String;)V
    //   6236: iload 4
    //   6238: istore 41
    //   6240: iload 5
    //   6242: istore 43
    //   6244: iload 6
    //   6246: istore 44
    //   6248: iload 7
    //   6250: istore 45
    //   6252: iload_2
    //   6253: istore 40
    //   6255: aload 72
    //   6257: astore 87
    //   6259: aload 73
    //   6261: astore 88
    //   6263: aload 74
    //   6265: astore 89
    //   6267: aload 75
    //   6269: astore 90
    //   6271: iload 8
    //   6273: istore 46
    //   6275: iload_3
    //   6276: istore 47
    //   6278: iload 20
    //   6280: istore 48
    //   6282: iload 19
    //   6284: istore 49
    //   6286: iload 21
    //   6288: istore 50
    //   6290: iload 14
    //   6292: istore 51
    //   6294: iload 13
    //   6296: istore 52
    //   6298: iload 12
    //   6300: istore 53
    //   6302: iload 11
    //   6304: istore 54
    //   6306: iload 9
    //   6308: istore 55
    //   6310: iload 10
    //   6312: istore 56
    //   6314: aload 78
    //   6316: astore 91
    //   6318: iload 18
    //   6320: istore 57
    //   6322: iload 17
    //   6324: istore 58
    //   6326: iload 16
    //   6328: istore 59
    //   6330: iload 15
    //   6332: istore 60
    //   6334: aload 76
    //   6336: astore 92
    //   6338: aload 77
    //   6340: astore 93
    //   6342: lload 63
    //   6344: lstore 69
    //   6346: goto -5186 -> 1160
    //   6349: iload_2
    //   6350: istore 26
    //   6352: aload 72
    //   6354: astore 80
    //   6356: aload 73
    //   6358: astore 81
    //   6360: aload 74
    //   6362: astore 82
    //   6364: aload 75
    //   6366: astore 83
    //   6368: iload 19
    //   6370: istore 27
    //   6372: iload 20
    //   6374: istore 28
    //   6376: iload_3
    //   6377: istore 29
    //   6379: iload 23
    //   6381: istore 30
    //   6383: iload 8
    //   6385: istore 31
    //   6387: iload 22
    //   6389: istore 32
    //   6391: iload 18
    //   6393: istore 33
    //   6395: iload 12
    //   6397: istore 34
    //   6399: iload 11
    //   6401: istore 35
    //   6403: iload 9
    //   6405: istore 36
    //   6407: iload 10
    //   6409: istore 37
    //   6411: aload 79
    //   6413: astore 84
    //   6415: iload 21
    //   6417: istore 24
    //   6419: iload 13
    //   6421: istore 25
    //   6423: iload 16
    //   6425: istore 38
    //   6427: iload 15
    //   6429: istore 39
    //   6431: aload 76
    //   6433: astore 85
    //   6435: aload 77
    //   6437: astore 86
    //   6439: lload 63
    //   6441: lstore 67
    //   6443: getstatic 785	com/tencent/mobileqq/activity/aio/item/PokeItemHelper:g	I
    //   6446: istore 13
    //   6448: goto +757 -> 7205
    //   6451: iload_2
    //   6452: istore 26
    //   6454: aload 72
    //   6456: astore 80
    //   6458: aload 73
    //   6460: astore 81
    //   6462: aload 74
    //   6464: astore 82
    //   6466: aload 75
    //   6468: astore 83
    //   6470: iload 19
    //   6472: istore 27
    //   6474: iload 20
    //   6476: istore 28
    //   6478: iload_3
    //   6479: istore 29
    //   6481: iload 23
    //   6483: istore 30
    //   6485: iload 8
    //   6487: istore 31
    //   6489: iload 22
    //   6491: istore 32
    //   6493: iload 13
    //   6495: istore 33
    //   6497: iload 12
    //   6499: istore 34
    //   6501: iload 11
    //   6503: istore 35
    //   6505: iload 9
    //   6507: istore 36
    //   6509: iload 10
    //   6511: istore 37
    //   6513: aload 79
    //   6515: astore 84
    //   6517: iload 14
    //   6519: istore 24
    //   6521: iload 17
    //   6523: istore 25
    //   6525: iload 16
    //   6527: istore 38
    //   6529: iload 15
    //   6531: istore 39
    //   6533: aload 76
    //   6535: astore 85
    //   6537: aload 77
    //   6539: astore 86
    //   6541: lload 63
    //   6543: lstore 67
    //   6545: getstatic 788	com/tencent/mobileqq/activity/aio/item/PokeItemHelper:h	I
    //   6548: istore 14
    //   6550: goto +665 -> 7215
    //   6553: iconst_0
    //   6554: istore 40
    //   6556: iconst_0
    //   6557: istore 41
    //   6559: iconst_0
    //   6560: istore 10
    //   6562: bipush 50
    //   6564: istore 15
    //   6566: iconst_0
    //   6567: istore 24
    //   6569: aconst_null
    //   6570: astore 85
    //   6572: aconst_null
    //   6573: astore 84
    //   6575: aconst_null
    //   6576: astore 80
    //   6578: aconst_null
    //   6579: astore 77
    //   6581: iconst_0
    //   6582: istore 25
    //   6584: iconst_0
    //   6585: istore 26
    //   6587: iconst_0
    //   6588: istore 27
    //   6590: iconst_0
    //   6591: istore 28
    //   6593: iconst_0
    //   6594: istore 29
    //   6596: iconst_0
    //   6597: istore 30
    //   6599: iconst_0
    //   6600: istore 31
    //   6602: iconst_0
    //   6603: istore 32
    //   6605: iconst_0
    //   6606: istore 33
    //   6608: iconst_0
    //   6609: istore 34
    //   6611: iconst_0
    //   6612: istore 35
    //   6614: aconst_null
    //   6615: astore 81
    //   6617: iconst_m1
    //   6618: istore 36
    //   6620: iconst_m1
    //   6621: istore 37
    //   6623: iconst_m1
    //   6624: istore 38
    //   6626: iconst_m1
    //   6627: istore 39
    //   6629: ldc 13
    //   6631: astore 82
    //   6633: ldc 13
    //   6635: astore 83
    //   6637: ldc2_w 584
    //   6640: lstore 63
    //   6642: iload 30
    //   6644: istore 12
    //   6646: iload 29
    //   6648: istore 11
    //   6650: iload 27
    //   6652: istore 9
    //   6654: iload 26
    //   6656: istore 8
    //   6658: iload 25
    //   6660: istore 6
    //   6662: iload 41
    //   6664: istore 5
    //   6666: iload 40
    //   6668: istore_2
    //   6669: aload 85
    //   6671: astore 74
    //   6673: aload 84
    //   6675: astore 73
    //   6677: aload 80
    //   6679: astore 72
    //   6681: iload 24
    //   6683: istore_3
    //   6684: iload 15
    //   6686: istore 4
    //   6688: aload 77
    //   6690: astore 76
    //   6692: iload 10
    //   6694: istore 7
    //   6696: iload 28
    //   6698: istore 10
    //   6700: iload 31
    //   6702: istore 13
    //   6704: iload 32
    //   6706: istore 14
    //   6708: iload 33
    //   6710: istore 15
    //   6712: iload 34
    //   6714: istore 16
    //   6716: iload 35
    //   6718: istore 17
    //   6720: aload 81
    //   6722: astore 75
    //   6724: iload 36
    //   6726: istore 18
    //   6728: iload 37
    //   6730: istore 19
    //   6732: iload 38
    //   6734: istore 20
    //   6736: iload 39
    //   6738: istore 21
    //   6740: aload 82
    //   6742: astore 77
    //   6744: aload 83
    //   6746: astore 78
    //   6748: goto -5057 -> 1691
    //   6751: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   6754: ifeq +35 -> 6789
    //   6757: ldc 63
    //   6759: iconst_2
    //   6760: new 122	java/lang/StringBuilder
    //   6763: dup
    //   6764: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   6767: ldc_w 790
    //   6770: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   6773: aload_1
    //   6774: getfield 73	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:version	Lcom/tencent/mobileqq/pb/PBInt32Field;
    //   6777: invokevirtual 79	com/tencent/mobileqq/pb/PBInt32Field:get	()I
    //   6780: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   6783: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   6786: invokestatic 141	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/String;)V
    //   6789: return
    //   6790: astore 79
    //   6792: goto -5185 -> 1607
    //   6795: astore 79
    //   6797: aload 77
    //   6799: astore 80
    //   6801: aload 76
    //   6803: astore 77
    //   6805: iload 15
    //   6807: istore 22
    //   6809: iload 16
    //   6811: istore 23
    //   6813: iload 17
    //   6815: istore 24
    //   6817: iload 10
    //   6819: istore 17
    //   6821: iload 9
    //   6823: istore 16
    //   6825: iload 11
    //   6827: istore 15
    //   6829: iload 12
    //   6831: istore 25
    //   6833: iload 14
    //   6835: istore 12
    //   6837: iload 8
    //   6839: istore 11
    //   6841: iload 21
    //   6843: istore 9
    //   6845: iload_2
    //   6846: istore 10
    //   6848: iload 7
    //   6850: istore 8
    //   6852: iload 6
    //   6854: istore 7
    //   6856: iload 4
    //   6858: istore_2
    //   6859: iload_3
    //   6860: istore 6
    //   6862: aload 75
    //   6864: astore 76
    //   6866: iload 19
    //   6868: istore_3
    //   6869: iload 20
    //   6871: istore 4
    //   6873: iload 25
    //   6875: istore 14
    //   6877: aload 78
    //   6879: astore 75
    //   6881: iload 24
    //   6883: istore 19
    //   6885: iload 23
    //   6887: istore 20
    //   6889: iload 22
    //   6891: istore 21
    //   6893: aload 80
    //   6895: astore 78
    //   6897: goto -5290 -> 1607
    //   6900: astore 79
    //   6902: iload_3
    //   6903: istore 24
    //   6905: iload 22
    //   6907: istore 25
    //   6909: aload 77
    //   6911: astore 80
    //   6913: aload 76
    //   6915: astore 77
    //   6917: iload 15
    //   6919: istore 22
    //   6921: iload 16
    //   6923: istore 20
    //   6925: iload 17
    //   6927: istore 23
    //   6929: iload 10
    //   6931: istore 17
    //   6933: iload 9
    //   6935: istore 16
    //   6937: iload 11
    //   6939: istore 15
    //   6941: iload 12
    //   6943: istore 26
    //   6945: iload 14
    //   6947: istore 12
    //   6949: iload 8
    //   6951: istore 11
    //   6953: iload 21
    //   6955: istore 9
    //   6957: iload 19
    //   6959: istore_3
    //   6960: iload_2
    //   6961: istore 10
    //   6963: iload 7
    //   6965: istore 8
    //   6967: iload 4
    //   6969: istore_2
    //   6970: iload 6
    //   6972: istore 7
    //   6974: aload 75
    //   6976: astore 76
    //   6978: iload 25
    //   6980: istore 4
    //   6982: iload 24
    //   6984: istore 6
    //   6986: iload 26
    //   6988: istore 14
    //   6990: aload 78
    //   6992: astore 75
    //   6994: iload 23
    //   6996: istore 19
    //   6998: iload 22
    //   7000: istore 21
    //   7002: aload 80
    //   7004: astore 78
    //   7006: goto -5399 -> 1607
    //   7009: astore 79
    //   7011: iload_2
    //   7012: istore 25
    //   7014: iload 7
    //   7016: istore 26
    //   7018: iload 4
    //   7020: istore_2
    //   7021: aload 77
    //   7023: astore 80
    //   7025: aload 76
    //   7027: astore 77
    //   7029: iload 15
    //   7031: istore 21
    //   7033: iload 16
    //   7035: istore 20
    //   7037: iload 17
    //   7039: istore 23
    //   7041: iload 10
    //   7043: istore 17
    //   7045: iload 9
    //   7047: istore 16
    //   7049: iload 11
    //   7051: istore 15
    //   7053: iload 12
    //   7055: istore 27
    //   7057: iload 14
    //   7059: istore 12
    //   7061: iload 8
    //   7063: istore 11
    //   7065: iload 19
    //   7067: istore 9
    //   7069: iload_3
    //   7070: istore 14
    //   7072: iload 22
    //   7074: istore 4
    //   7076: iload 6
    //   7078: istore 7
    //   7080: iload 26
    //   7082: istore 8
    //   7084: iload 25
    //   7086: istore 10
    //   7088: aload 75
    //   7090: astore 76
    //   7092: iload 24
    //   7094: istore_3
    //   7095: iload 14
    //   7097: istore 6
    //   7099: iload 27
    //   7101: istore 14
    //   7103: aload 78
    //   7105: astore 75
    //   7107: iload 23
    //   7109: istore 19
    //   7111: aload 80
    //   7113: astore 78
    //   7115: goto -5508 -> 1607
    //   7118: astore 80
    //   7120: aload 77
    //   7122: astore 74
    //   7124: aload 80
    //   7126: astore 77
    //   7128: goto -3781 -> 3347
    //   7131: astore 80
    //   7133: aload 74
    //   7135: astore 72
    //   7137: aload 77
    //   7139: astore 74
    //   7141: aload 80
    //   7143: astore 77
    //   7145: goto -3798 -> 3347
    //   7148: astore 80
    //   7150: aload 74
    //   7152: astore 72
    //   7154: aload 77
    //   7156: astore 74
    //   7158: aload 80
    //   7160: astore 77
    //   7162: goto -3815 -> 3347
    //   7165: iload 24
    //   7167: istore 8
    //   7169: goto -1314 -> 5855
    //   7172: iload 22
    //   7174: istore_3
    //   7175: goto -1328 -> 5847
    //   7178: iload 21
    //   7180: istore 19
    //   7182: goto -1379 -> 5803
    //   7185: iload 11
    //   7187: istore 15
    //   7189: iconst_1
    //   7190: istore 11
    //   7192: goto -2679 -> 4513
    //   7195: iload 12
    //   7197: istore 16
    //   7199: iconst_1
    //   7200: istore 12
    //   7202: goto -2429 -> 4773
    //   7205: iload 13
    //   7207: istore 17
    //   7209: iconst_1
    //   7210: istore 13
    //   7212: goto -2203 -> 5009
    //   7215: iload 14
    //   7217: istore 18
    //   7219: iconst_1
    //   7220: istore 14
    //   7222: goto -1977 -> 5245
    //   7225: iconst_0
    //   7226: istore 11
    //   7228: goto -43 -> 7185
    //   7231: iconst_0
    //   7232: istore 12
    //   7234: goto -39 -> 7195
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	7237	0	this	ConfigServlet
    //   0	7237	1	paramConfig	ConfigurationService.Config
    //   31	6990	2	i	int
    //   45	7130	3	j	int
    //   49	7026	4	k	int
    //   379	6286	5	m	int
    //   349	6749	6	n	int
    //   376	6703	7	i1	int
    //   373	6795	8	i2	int
    //   346	6722	9	i3	int
    //   369	6718	10	i4	int
    //   343	6884	11	i5	int
    //   340	6893	12	i6	int
    //   337	6874	13	i7	int
    //   334	6887	14	i8	int
    //   331	6857	15	i9	int
    //   328	6870	16	i10	int
    //   325	6883	17	i11	int
    //   319	6899	18	i12	int
    //   316	6865	19	i13	int
    //   313	6723	20	i14	int
    //   310	6869	21	i15	int
    //   448	6725	22	i16	int
    //   442	6666	23	i17	int
    //   510	6656	24	i18	int
    //   530	6555	25	i19	int
    //   534	6547	26	i20	int
    //   537	6563	27	i21	int
    //   541	6156	28	i22	int
    //   545	6102	29	i23	int
    //   549	6094	30	i24	int
    //   553	6148	31	i25	int
    //   557	6148	32	i26	int
    //   561	6148	33	i27	int
    //   565	6148	34	i28	int
    //   569	6148	35	i29	int
    //   577	6148	36	i30	int
    //   581	6148	37	i31	int
    //   585	6148	38	i32	int
    //   589	6148	39	i33	int
    //   495	6172	40	i34	int
    //   499	6164	41	i35	int
    //   404	761	42	i36	int
    //   938	5305	43	i37	int
    //   942	5305	44	i38	int
    //   946	5305	45	i39	int
    //   969	5305	46	i40	int
    //   973	5304	47	i41	int
    //   976	5305	48	i42	int
    //   980	5305	49	i43	int
    //   984	5305	50	i44	int
    //   988	5305	51	i45	int
    //   992	5305	52	i46	int
    //   996	5305	53	i47	int
    //   1000	5305	54	i48	int
    //   1004	5305	55	i49	int
    //   1008	5305	56	i50	int
    //   1016	5305	57	i51	int
    //   1020	5305	58	i52	int
    //   1024	5305	59	i53	int
    //   1028	5305	60	i54	int
    //   16	2065	61	i55	int
    //   401	207	62	i56	int
    //   299	6342	63	l1	long
    //   491	3272	65	l2	long
    //   709	5835	67	l3	long
    //   1040	5305	69	l4	long
    //   930	2063	71	bool	boolean
    //   157	6996	72	localObject1	Object
    //   363	6313	73	localObject2	Object
    //   360	6797	74	localObject3	Object
    //   322	6784	75	localObject4	Object
    //   357	6734	76	localObject5	Object
    //   307	741	77	localObject6	Object
    //   1279	97	77	localException1	Exception
    //   1505	1054	77	localObject7	Object
    //   2674	97	77	localException2	Exception
    //   3062	183	77	str1	String
    //   3326	116	77	localException3	Exception
    //   3890	3271	77	localObject8	Object
    //   303	6811	78	localObject9	Object
    //   229	1230	79	localObject10	Object
    //   1493	143	79	localException4	Exception
    //   1659	4855	79	localObject11	Object
    //   6790	1	79	localException5	Exception
    //   6795	1	79	localException6	Exception
    //   6900	1	79	localException7	Exception
    //   7009	1	79	localException8	Exception
    //   522	6590	80	localObject12	Object
    //   7118	7	80	localException9	Exception
    //   7131	11	80	localException10	Exception
    //   7148	11	80	localException11	Exception
    //   573	6148	81	localObject13	Object
    //   593	6148	82	localObject14	Object
    //   597	6148	83	localObject15	Object
    //   518	6156	84	localObject16	Object
    //   514	6156	85	localObject17	Object
    //   705	5835	86	localObject18	Object
    //   953	5305	87	localObject19	Object
    //   957	5305	88	localObject20	Object
    //   961	5305	89	localObject21	Object
    //   965	5305	90	localObject22	Object
    //   1012	5305	91	localObject23	Object
    //   1032	5305	92	localObject24	Object
    //   1036	5305	93	localObject25	Object
    //   7	2100	94	localQQAppInterface	QQAppInterface
    //   207	13	95	localIterator	Iterator
    //   391	220	96	arrayOfString	String[]
    //   615	4940	97	str2	String
    // Exception table:
    //   from	to	target	type
    //   1047	1054	1279	java/lang/Exception
    //   711	722	1493	java/lang/Exception
    //   816	831	1493	java/lang/Exception
    //   925	932	1493	java/lang/Exception
    //   1375	1380	1493	java/lang/Exception
    //   2222	2233	1493	java/lang/Exception
    //   2327	2342	1493	java/lang/Exception
    //   2436	2443	1493	java/lang/Exception
    //   2770	2775	1493	java/lang/Exception
    //   2982	2992	1493	java/lang/Exception
    //   3441	3446	1493	java/lang/Exception
    //   3661	3672	1493	java/lang/Exception
    //   3766	3787	1493	java/lang/Exception
    //   3892	3903	1493	java/lang/Exception
    //   3997	4012	1493	java/lang/Exception
    //   4113	4124	1493	java/lang/Exception
    //   4218	4233	1493	java/lang/Exception
    //   4335	4346	1493	java/lang/Exception
    //   4440	4461	1493	java/lang/Exception
    //   4615	4626	1493	java/lang/Exception
    //   4720	4741	1493	java/lang/Exception
    //   4875	4886	1493	java/lang/Exception
    //   4980	5001	1493	java/lang/Exception
    //   5111	5122	1493	java/lang/Exception
    //   5216	5237	1493	java/lang/Exception
    //   5449	5460	1493	java/lang/Exception
    //   5554	5564	1493	java/lang/Exception
    //   5658	5667	1493	java/lang/Exception
    //   5761	5770	1493	java/lang/Exception
    //   6065	6071	1493	java/lang/Exception
    //   6165	6236	1493	java/lang/Exception
    //   6443	6448	1493	java/lang/Exception
    //   6545	6550	1493	java/lang/Exception
    //   2558	2565	2674	java/lang/Exception
    //   3016	3035	3326	java/lang/Exception
    //   3054	3064	3326	java/lang/Exception
    //   3083	3093	3326	java/lang/Exception
    //   3112	3122	3326	java/lang/Exception
    //   3185	3195	3326	java/lang/Exception
    //   3215	3225	3326	java/lang/Exception
    //   383	393	6790	java/lang/Exception
    //   398	403	6790	java/lang/Exception
    //   5770	5779	6795	java/lang/Exception
    //   5779	5788	6900	java/lang/Exception
    //   5811	5820	7009	java/lang/Exception
    //   3122	3132	7118	java/lang/Exception
    //   3132	3147	7131	java/lang/Exception
    //   3151	3166	7148	java/lang/Exception
  }
  
  private void I(ConfigurationService.Config paramConfig)
  {
    if (QLog.isColorLevel()) {
      QLog.d("SPLASH_ConfigServlet", 2, "received TROOP_SHARE_MSG_COMMENT_WHITELIST response: -------");
    }
    try
    {
      QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
      if ((paramConfig != null) && (paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
      {
        String str = (String)paramConfig.content_list.get(0);
        int i = paramConfig.version.get();
        paramConfig = (TroopTopicMgr)localQQAppInterface.getManager(97);
        int j = paramConfig.jdField_a_of_type_Int;
        if (i != j)
        {
          paramConfig.a(str, i);
          return;
        }
        if (!QLog.isColorLevel()) {
          return;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "received TROOP_SHARE_MSG_COMMENT_WHITELIST remote version: " + i + " | localVersion: " + j);
        return;
      }
    }
    catch (Exception paramConfig)
    {
      if (QLog.isColorLevel()) {
        QLog.e("SPLASH_ConfigServlet", 2, "received TROOP_SHARE_MSG_COMMENT_WHITELIST error", paramConfig);
      }
      paramConfig.printStackTrace();
      return;
    }
    if (QLog.isColorLevel()) {
      QLog.d("SPLASH_ConfigServlet", 2, "received TROOP_SHARE_MSG_COMMENT_WHITELIST content_list is empty");
    }
  }
  
  private void J(ConfigurationService.Config paramConfig)
  {
    try
    {
      QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
      if ((paramConfig != null) && (paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
      {
        String str = (String)paramConfig.content_list.get(0);
        int i = paramConfig.version.get();
        paramConfig = (TroopManager)localQQAppInterface.getManager(51);
        int j = paramConfig.jdField_a_of_type_Int;
        if (i != j)
        {
          paramConfig.a(str, i);
          return;
        }
        if (!QLog.isColorLevel()) {
          return;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "received TROOP_SHARE_MSG_COMMENT_WHITELIST remote version: " + i + " | localVersion: " + j);
        return;
      }
    }
    catch (Exception paramConfig)
    {
      if (QLog.isColorLevel()) {
        QLog.e("SPLASH_ConfigServlet", 2, "received TROOP_SHARE_MSG_COMMENT_WHITELIST error", paramConfig);
      }
      paramConfig.printStackTrace();
      return;
    }
    if (QLog.isColorLevel()) {
      QLog.d("SPLASH_ConfigServlet", 2, "received TROOP_SHARE_MSG_COMMENT_WHITELIST content_list is empty");
    }
  }
  
  private void K(ConfigurationService.Config paramConfig)
  {
    boolean bool2 = true;
    for (;;)
    {
      try
      {
        localQQAppInterface = (QQAppInterface)getAppRuntime();
        i = paramConfig.version.get();
        j = SharedPreUtils.aa(localQQAppInterface.getApp(), localQQAppInterface.getAccount());
        if (QLog.isColorLevel()) {
          QLog.d("longText", 2, "received LongTextMsgConfig configVersion:" + i + " ,localVersion:" + j);
        }
        if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
        {
          paramConfig = (String)paramConfig.content_list.get(0);
          if (QLog.isColorLevel()) {
            QLog.d("longText", 2, "received LongTextMsgConfig configContent" + paramConfig);
          }
          if (i == j) {
            break label454;
          }
        }
      }
      catch (Exception paramConfig)
      {
        QQAppInterface localQQAppInterface;
        int i;
        int j;
        int k;
        boolean bool3;
        boolean bool4;
        if (QLog.isColorLevel())
        {
          QLog.e("SPLASH_ConfigServlet", 2, "received LongTextMsgConfig error", paramConfig);
          return;
          if (i == j)
          {
            if (QLog.isColorLevel()) {
              QLog.d("longText", 2, "received LongTextMsgConfig, content_list is empty, ignored because of SAME VERSION");
            }
          }
          else if (QLog.isColorLevel())
          {
            QLog.d("longText", 2, "received LongTextMsgConfig, content_list is empty, use default config");
            return;
            bool1 = false;
            continue;
            bool2 = true;
            bool1 = false;
            continue;
          }
        }
      }
      try
      {
        if (TextUtils.isEmpty(paramConfig)) {
          continue;
        }
        paramConfig = new JSONObject(paramConfig);
        if (paramConfig == null) {
          continue;
        }
        j = Integer.parseInt(paramConfig.optString("largeMsgOp"));
        if (j != 1) {
          continue;
        }
        bool1 = true;
      }
      catch (Exception paramConfig)
      {
        bool1 = false;
        continue;
      }
      try
      {
        k = Integer.parseInt(paramConfig.optString("msfPullFilter"));
        if (k != 0) {
          continue;
        }
        bool2 = false;
      }
      catch (Exception paramConfig)
      {
        continue;
        bool2 = true;
        continue;
      }
      try
      {
        if (QLog.isColorLevel()) {
          QLog.d("longText", 2, "received LongTextMsgConfig, parse content ltValue:" + j + ",ltSwitch:" + bool1 + ",mpfValue:" + k + ",mpfSwitch:" + bool2);
        }
        bool3 = bool1;
        bool4 = bool2;
        paramConfig = (LongTextMsgManager)localQQAppInterface.getManager(165);
        paramConfig.jdField_b_of_type_Boolean = true;
        paramConfig.c = bool3;
        localQQAppInterface.h = true;
        localQQAppInterface.i = bool4;
        SharedPreUtils.b(localQQAppInterface.getApp(), localQQAppInterface.getAccount(), i, bool3, bool4);
        return;
      }
      catch (Exception paramConfig)
      {
        continue;
      }
      bool4 = bool2;
      bool3 = bool1;
      if (QLog.isColorLevel())
      {
        QLog.d("longText", 2, "received LongTextMsgConfig, parse content error!", paramConfig);
        bool4 = bool2;
        bool3 = bool1;
      }
    }
    label454:
  }
  
  private void U(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    int i = paramConfig.version.get();
    int j = SharedPreUtils.aS(BaseApplication.getContext(), jdField_a_of_type_JavaLangString);
    if (QLog.isColorLevel()) {
      QLog.i("SPLASH_ConfigServlet", 2, "handleZhituConfig: ,version: " + paramConfig.version.get() + "| localVersion: " + j);
    }
    if (i != j)
    {
      SharedPreUtils.ag(BaseApplication.getContext(), jdField_a_of_type_JavaLangString, i);
      paramConfig = a(paramConfig);
      if ((paramConfig != null) && (paramConfig.size() > 0))
      {
        paramConfig = paramConfig.iterator();
        if (paramConfig.hasNext())
        {
          Object localObject = (String)paramConfig.next();
          if (QLog.isColorLevel()) {
            QLog.i("SPLASH_ConfigServlet", 2, "handleZhituConfig: config_content =" + (String)localObject);
          }
          for (;;)
          {
            try
            {
              localObject = new JSONObject((String)localObject);
              if (((JSONObject)localObject).has("kMarioConfigEnable"))
              {
                i = ((JSONObject)localObject).getInt("kMarioConfigEnable");
                ZhituManager localZhituManager = ZhituManager.a(paramQQAppInterface);
                if (i != 1) {
                  break label254;
                }
                bool = true;
                localZhituManager.b(bool);
              }
              if (!((JSONObject)localObject).has("kMarioPageLen")) {
                break;
              }
              i = ((JSONObject)localObject).getInt("kMarioPageLen");
              ZhituManager.a(paramQQAppInterface).a(i);
            }
            catch (JSONException localJSONException)
            {
              localJSONException.printStackTrace();
            }
            break;
            label254:
            boolean bool = false;
          }
        }
      }
    }
    else if (QLog.isColorLevel())
    {
      QLog.i("SPLASH_ConfigServlet", 2, "handleZhituConfig:localVersiont == version ");
    }
  }
  
  private void V(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    a(paramQQAppInterface, paramConfig, "handleShortVideoMsgTailConfig", new ably(this, paramQQAppInterface));
  }
  
  private void W(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if ((paramQQAppInterface == null) || (paramConfig == null)) {}
    int i;
    do
    {
      return;
      i = paramConfig.version.get();
    } while (i == SharedPreUtils.f(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount()));
    if (QLog.isColorLevel()) {
      QLog.d("SPLASH_ConfigServlet", 2, "handleWebViewUrlCheckConfigCmd start");
    }
    SharedPreUtils.f(paramQQAppInterface.getApplication(), i, paramQQAppInterface.getCurrentAccountUin());
    byte[] arrayOfByte;
    if ((paramConfig.msg_content_list != null) && (paramConfig.msg_content_list.size() > 0))
    {
      paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
      if (paramConfig != null) {
        if (paramConfig.compress.get() == 1)
        {
          arrayOfByte = OlympicUtil.a(paramConfig.content.get().toByteArray());
          if (arrayOfByte == null) {
            break label379;
          }
        }
      }
    }
    for (;;)
    {
      try
      {
        paramConfig = new String(arrayOfByte, "UTF-8");
        if (paramConfig == null) {
          break label301;
        }
        try
        {
          i = new JSONObject(paramConfig).optInt("switch", 0);
          paramQQAppInterface.getApplication().getSharedPreferences("webViewUrlCheckSp", 4).edit().putInt("webViewUrlCheckSwitchKey", i).commit();
          QLog.d("SPLASH_ConfigServlet", 2, "webView url check switch, result = " + i);
          return;
        }
        catch (Exception paramQQAppInterface)
        {
          QLog.e("SPLASH_ConfigServlet", 1, "webView url check exception e = ", paramQQAppInterface);
          return;
        }
      }
      catch (UnsupportedEncodingException paramConfig)
      {
        QLog.e("SPLASH_ConfigServlet", 1, "handleWebviewUrlCheckConfigCmd UnsupportedEncodingException e ", paramConfig);
        paramConfig = null;
        continue;
      }
      catch (OutOfMemoryError paramConfig)
      {
        QLog.e("SPLASH_ConfigServlet", 1, "handleWebviewUrlCheckConfigCmd OutOfMemoryError e ", paramConfig);
        System.gc();
        try
        {
          paramConfig = new String(arrayOfByte, "UTF-8");
        }
        catch (Throwable paramConfig)
        {
          QLog.e("SPLASH_ConfigServlet", 1, "handleWebviewUrlCheckConfigCmd Throwable ");
          paramConfig = null;
        }
        continue;
      }
      paramConfig = paramConfig.content.get().toStringUtf8();
      continue;
      label301:
      QLog.e("SPLASH_ConfigServlet", 1, "handleWebviewUrlCheckConfigCmd config_content = null");
      return;
      QLog.e("SPLASH_ConfigServlet", 1, "handleWebviewUrlCheckConfigCmd content = null");
      return;
      paramQQAppInterface.getApplication().getSharedPreferences("webViewUrlCheckSp", 4).edit().putInt("webViewUrlCheckSwitchKey", 0).commit();
      QLog.d("SPLASH_ConfigServlet", 2, "handleWebviewUrlCheckConfigCmd webview url check fail version: " + i);
      return;
      label379:
      paramConfig = null;
    }
  }
  
  private void X(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    for (;;)
    {
      int i;
      Object localObject;
      try
      {
        if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
        {
          i = 0;
          if (i < paramConfig.content_list.size())
          {
            localObject = ((String)paramConfig.content_list.get(i)).trim();
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 96,content: " + (String)localObject + ",version: " + paramConfig.version.get());
            }
            int j = paramConfig.version.get();
            if ((j == SharedPreUtils.a(paramQQAppInterface.getApp(), "readinjoy_interested_push_config", jdField_a_of_type_JavaLangString)) || (TextUtils.isEmpty((CharSequence)localObject))) {
              break label412;
            }
            localObject = ((String)localObject).split("=");
            if (localObject.length >= 2)
            {
              if (!"xqh_insert_into_feeds".equals(localObject[0])) {
                continue;
              }
              ReadInJoyHelper.c(paramQQAppInterface, "1".equals(localObject[1]));
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "update KANDIAN_INTERESTED_PUSH_CONFiG config , switch : " + "1".equals(localObject[1]));
              }
            }
            SharedPreUtils.a(paramQQAppInterface.getApp(), "readinjoy_interested_push_config", jdField_a_of_type_JavaLangString, j);
            break label469;
            if ("simple_switch_fm".equals(localObject[0]))
            {
              ReadInJoyHelper.c(paramQQAppInterface, "1".equals(localObject[1]));
              if (!QLog.isColorLevel()) {
                continue;
              }
              QLog.d("SPLASH_ConfigServlet", 2, "update READINJOY_SIMPLE_SWITCH_FM config , switch : " + "1".equals(localObject[1]));
              continue;
            }
          }
          else
          {
            return;
          }
        }
      }
      catch (Exception paramQQAppInterface)
      {
        if (QLog.isColorLevel()) {
          QLog.e("SPLASH_ConfigServlet", 2, "received readinjoy interested push config error,cmd : 96" + paramQQAppInterface.toString());
        }
      }
      label412:
      do
      {
        if (!"simple_force_report_once".equals(localObject[0])) {
          break;
        }
        FeManager.a(paramQQAppInterface, "1".equals(localObject[1]));
        if (!QLog.isColorLevel()) {
          break;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "update simple_force_report_once config , switch : " + "1".equals(localObject[1]));
        break;
        if (!QLog.isColorLevel()) {
          break label469;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "received KANDIAN_INTERESTED_PUSH_CONFiG IGNORE THIS ACTION  because of SAME VERSION ");
        break label469;
      } while (!QLog.isColorLevel());
      QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 96,content_list is empty ,version: " + paramConfig.version.get());
      return;
      label469:
      i += 1;
    }
  }
  
  private void Y(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    for (;;)
    {
      int i;
      try
      {
        if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
        {
          i = 0;
          if (i < paramConfig.content_list.size())
          {
            Object localObject = ((String)paramConfig.content_list.get(i)).trim();
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServletQ.qqstory.TAG_NOW_ENTRANCE_ACTION_CONFIG", 2, "receiveAllConfigs|type: 118,content: " + (String)localObject + ",version: " + paramConfig.version.get());
            }
            int k = paramConfig.version.get();
            if (k != SharedPreUtils.a(paramQQAppInterface.getApp(), "now_entrance_action_version", jdField_a_of_type_JavaLangString))
            {
              boolean bool = TextUtils.isEmpty((CharSequence)localObject);
              if (!bool) {
                try
                {
                  localObject = new JSONArray((String)localObject);
                  int m = ((JSONArray)localObject).length();
                  int j = 0;
                  if (j < m)
                  {
                    JSONObject localJSONObject = ((JSONArray)localObject).getJSONObject(j);
                    SharedPreUtils.c(paramQQAppInterface.getApp(), paramQQAppInterface.getCurrentAccountUin(), localJSONObject.optInt("bid"), localJSONObject.optInt("actionType"));
                    j += 1;
                    continue;
                  }
                  if (!QLog.isColorLevel()) {
                    break label341;
                  }
                }
                catch (JSONException localJSONException)
                {
                  if (QLog.isColorLevel()) {
                    QLog.e("SPLASH_ConfigServletQ.qqstory.TAG_NOW_ENTRANCE_ACTION_CONFIG", 2, "received JSONException ");
                  }
                  SharedPreUtils.a(paramQQAppInterface.getApp(), "now_entrance_action_version", jdField_a_of_type_JavaLangString, k);
                }
              }
            }
            QLog.d("SPLASH_ConfigServletQ.qqstory.TAG_NOW_ENTRANCE_ACTION_CONFIG", 2, "received CHNAGE_MACHINE_CONFIG IGNORE THIS ACTION  because of SAME VERSION ");
          }
        }
      }
      catch (Exception paramQQAppInterface)
      {
        if (QLog.isColorLevel()) {
          QLog.e("SPLASH_ConfigServletQ.qqstory.TAG_NOW_ENTRANCE_ACTION_CONFIG", 2, "received change machine config error,cmd : 118" + paramQQAppInterface.toString());
        }
      }
      while (!QLog.isColorLevel()) {
        return;
      }
      QLog.d("SPLASH_ConfigServletQ.qqstory.TAG_NOW_ENTRANCE_ACTION_CONFIG", 2, "receiveAllConfigs|type: 118,content_list is empty ,version: " + paramConfig.version.get());
      return;
      label341:
      i += 1;
    }
  }
  
  private void Z(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    for (;;)
    {
      int i;
      try
      {
        if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
        {
          i = 0;
          if (i < paramConfig.content_list.size())
          {
            Object localObject = ((String)paramConfig.content_list.get(i)).trim();
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet.troop_common_config", 2, "receiveAllConfigs|type: 142,content: " + (String)localObject + ",version: " + paramConfig.version.get());
            }
            int j = paramConfig.version.get();
            if (j == SharedPreUtils.a(paramQQAppInterface.getApp(), "troop_common_config_version", jdField_a_of_type_JavaLangString)) {
              break label611;
            }
            boolean bool = TextUtils.isEmpty((CharSequence)localObject);
            if (bool) {
              break label611;
            }
            try
            {
              JSONObject localJSONObject = new JSONObject((String)localObject);
              SharedPreUtils.d(paramQQAppInterface.getApp(), paramQQAppInterface.getCurrentAccountUin(), localJSONObject.optString("hot_chat_link"));
              SharedPreUtils.B(paramQQAppInterface.getApp(), paramQQAppInterface.getCurrentAccountUin(), localJSONObject.optInt("aio_post_tab_plugin"));
              ((TroopRobotManager)paramQQAppInterface.getManager(202)).a(localJSONObject);
              SharedPreUtils.A(paramQQAppInterface.getApp(), paramQQAppInterface.getCurrentAccountUin(), localJSONObject.optInt("create_troop_max_invite_num"));
              String str1 = localJSONObject.optString("nearby_faceVideo_show");
              String str2 = localJSONObject.optString("nearby_faceVideo_LV");
              String str3 = localJSONObject.optString("nearby_heart_switch");
              SharedPreferences localSharedPreferences = BaseApplicationImpl.getContext().getSharedPreferences("nearby_enters", 4);
              localSharedPreferences.edit().putString("config_content", (String)localObject).commit();
              localSharedPreferences.edit().putString("nearby_faceVideo_show", str1).commit();
              localSharedPreferences.edit().putString("nearby_heart_switch", str3).commit();
              localSharedPreferences.edit().putString("nearby_faceVideo_LV", str2).commit();
              localObject = localJSONObject.optJSONObject("face_score_enter_config");
              if (!TextUtils.isEmpty(((JSONObject)localObject).optString("title"))) {
                localSharedPreferences.edit().putString("face_title", ((JSONObject)localObject).optString("title")).commit();
              }
              if (!TextUtils.isEmpty(((JSONObject)localObject).optString("detail_default"))) {
                localSharedPreferences.edit().putString("face_detail_default", ((JSONObject)localObject).optString("detail_default")).commit();
              }
              if (!TextUtils.isEmpty(((JSONObject)localObject).optString("jump_url"))) {
                localSharedPreferences.edit().putString("face_jump_url", ((JSONObject)localObject).optString("jump_url")).commit();
              }
              if (!TextUtils.isEmpty(((JSONObject)localObject).optString("detail_num"))) {
                localSharedPreferences.edit().putString("face_detail_num", ((JSONObject)localObject).optString("detail_num")).commit();
              }
            }
            catch (JSONException localJSONException)
            {
              if (!QLog.isColorLevel()) {
                continue;
              }
              QLog.e("SPLASH_ConfigServlet.troop_common_config", 2, "received JSONException ");
              continue;
            }
            SharedPreUtils.a(paramQQAppInterface.getApp(), "troop_common_config_version", jdField_a_of_type_JavaLangString, j);
          }
        }
      }
      catch (Exception paramQQAppInterface)
      {
        if (QLog.isColorLevel()) {
          QLog.e("SPLASH_ConfigServlet.troop_common_config", 2, "received change machine config error,cmd : 142" + paramQQAppInterface.toString());
        }
      }
      label611:
      do
      {
        return;
        if (!QLog.isColorLevel()) {
          break;
        }
        QLog.d("SPLASH_ConfigServlet.troop_common_config", 2, "received CHNAGE_MACHINE_CONFIG IGNORE THIS ACTION  because of SAME VERSION ");
        break;
      } while (!QLog.isColorLevel());
      QLog.d("SPLASH_ConfigServlet.troop_common_config", 2, "receiveAllConfigs|type: 142,content_list is empty ,version: " + paramConfig.version.get());
      return;
      i += 1;
    }
  }
  
  private float a(float paramFloat)
  {
    return paramFloat / (50.0F * 2.0F) * (float)DeviceInfoUtil.h();
  }
  
  private float a(float paramFloat1, float paramFloat2)
  {
    return (50.0F + paramFloat1) / (50.0F * 2.0F) * paramFloat2;
  }
  
  private float a(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    return paramFloat2 / 2.0F - paramFloat1 * paramFloat3 / (50.0F * 2.0F);
  }
  
  private int a(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    int i = 0;
    ShortVideoResourceManager localShortVideoResourceManager = paramQQAppInterface.a();
    int j = ShortVideoResourceManager.a();
    int k = paramConfig.version.get();
    if (QLog.isColorLevel()) {
      QLog.d("ShortVideoResourceManager", 2, "receiveAllConfigs[handleShortVideoResourceConfig]|received remote version: " + k + " | localVersion: " + j);
    }
    if (k != j)
    {
      if ((paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() <= 0)) {
        break label259;
      }
      paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
      if (paramConfig == null) {
        break label240;
      }
      if (paramConfig.compress.get() != 1) {
        break label226;
      }
      paramConfig = OlympicUtil.a(paramConfig.content.get().toByteArray());
      if (paramConfig == null) {
        break label205;
      }
    }
    for (;;)
    {
      try
      {
        paramConfig = new String(paramConfig, "UTF-8");
        i = localShortVideoResourceManager.a(paramQQAppInterface.getApp(), paramConfig, k);
        return i;
      }
      catch (Throwable paramConfig)
      {
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs[handleShortVideoResourceConfig]|Throwable:" + paramConfig.getMessage());
        }
        paramConfig = "";
        continue;
      }
      label205:
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs[handleShortVideoResourceConfig]|inflateConfigString error!");
      }
      paramConfig = "";
      continue;
      label226:
      paramConfig = paramConfig.content.get().toStringUtf8();
    }
    label240:
    if (QLog.isColorLevel()) {
      QLog.d("ShortVideoResourceManager", 2, "receiveAllConfigs[handleShortVideoResourceConfig]| content==null");
    }
    return -125;
    label259:
    if (QLog.isColorLevel()) {
      QLog.d("ShortVideoResourceManager", 2, "receiveAllConfigs[handleShortVideoResourceConfig]| msg_content_list is empty ,version: " + k + ",localVersion:" + j);
    }
    return -125;
  }
  
  private static int a(String paramString1, String paramString2)
  {
    SimpleDateFormat localSimpleDateFormat = new SimpleDateFormat("MM-dd");
    try
    {
      long l = (localSimpleDateFormat.parse(paramString2).getTime() - localSimpleDateFormat.parse(paramString1).getTime()) / 86400000L;
      return (int)l;
    }
    catch (ParseException paramString1)
    {
      paramString1.printStackTrace();
    }
    return -1;
  }
  
  private ARMapConfig a(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    Object localObject = null;
    int i = ((ARMapConfigManager)paramQQAppInterface.getManager(189)).a();
    int j = paramConfig.version.get();
    QLog.d("SPLASH_ConfigServlet", 1, "handleGetAPMapConfig, version:" + j + ",localVersion:" + i);
    paramQQAppInterface = (ARMapConfigManager)paramQQAppInterface.getManager(189);
    paramQQAppInterface = localObject;
    if (i != j)
    {
      if ((paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() <= 0)) {
        break label320;
      }
      paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
      paramQQAppInterface = localObject;
      if (paramConfig != null)
      {
        if (paramConfig.compress.get() != 1) {
          break label306;
        }
        paramQQAppInterface = OlympicUtil.a(paramConfig.content.get().toByteArray());
        if (paramQQAppInterface == null) {
          break label286;
        }
      }
    }
    for (;;)
    {
      try
      {
        paramQQAppInterface = new String(paramQQAppInterface, "UTF-8");
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "handleGetAPMapConfig,xmlContent:" + paramQQAppInterface);
        }
        paramConfig = ARMapConfig.parse(paramQQAppInterface);
        paramQQAppInterface = paramConfig;
        if (paramConfig != null)
        {
          paramConfig.version = j;
          paramQQAppInterface = paramConfig;
        }
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "handleGetAPMapConfig, arMapConfig = " + paramQQAppInterface);
        }
        return paramQQAppInterface;
      }
      catch (Throwable paramQQAppInterface)
      {
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "Throwable:" + paramQQAppInterface.getMessage());
        }
        paramQQAppInterface = null;
        continue;
      }
      label286:
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "inflateConfigString error!");
      }
      paramQQAppInterface = null;
      continue;
      label306:
      paramQQAppInterface = paramConfig.content.get().toStringUtf8();
      continue;
      label320:
      ARMapConfig.deleteLocalConfig(jdField_a_of_type_JavaLangString);
      paramQQAppInterface = localObject;
      if (QLog.isColorLevel())
      {
        QLog.d("SPLASH_ConfigServlet", 2, "handleGetAPMapConfig, msg_content_list is null");
        paramQQAppInterface = localObject;
      }
    }
  }
  
  private QQOperationViopTipTask a(String paramString)
  {
    return a(paramString, new QQOperationViopTipTask());
  }
  
  /* Error */
  private QQOperationViopTipTask a(String paramString, QQOperationViopTipTask paramQQOperationViopTipTask)
  {
    // Byte code:
    //   0: iconst_0
    //   1: istore_3
    //   2: invokestatic 425	javax/xml/parsers/DocumentBuilderFactory:newInstance	()Ljavax/xml/parsers/DocumentBuilderFactory;
    //   5: invokevirtual 429	javax/xml/parsers/DocumentBuilderFactory:newDocumentBuilder	()Ljavax/xml/parsers/DocumentBuilder;
    //   8: new 431	java/io/ByteArrayInputStream
    //   11: dup
    //   12: aload_1
    //   13: ldc_w 433
    //   16: invokevirtual 437	java/lang/String:getBytes	(Ljava/lang/String;)[B
    //   19: invokespecial 440	java/io/ByteArrayInputStream:<init>	([B)V
    //   22: invokevirtual 446	javax/xml/parsers/DocumentBuilder:parse	(Ljava/io/InputStream;)Lorg/w3c/dom/Document;
    //   25: astore_1
    //   26: aload_1
    //   27: ldc_w 1209
    //   30: invokeinterface 454 2 0
    //   35: astore 4
    //   37: aload 4
    //   39: ifnull +1254 -> 1293
    //   42: aload 4
    //   44: invokeinterface 484 1 0
    //   49: ifle +1244 -> 1293
    //   52: aload_1
    //   53: ldc_w 1211
    //   56: invokeinterface 454 2 0
    //   61: astore 4
    //   63: aload 4
    //   65: ifnull +45 -> 110
    //   68: aload 4
    //   70: invokeinterface 484 1 0
    //   75: ifle +35 -> 110
    //   78: aload_2
    //   79: aload_1
    //   80: ldc_w 1211
    //   83: invokeinterface 454 2 0
    //   88: iconst_0
    //   89: invokeinterface 460 2 0
    //   94: invokeinterface 466 1 0
    //   99: invokeinterface 469 1 0
    //   104: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   107: putfield 1214	com/tencent/mobileqq/config/operation/QQOperationViopTipTask:taskid	I
    //   110: aload_1
    //   111: ldc_w 1216
    //   114: invokeinterface 454 2 0
    //   119: astore 4
    //   121: aload 4
    //   123: ifnull +45 -> 168
    //   126: aload 4
    //   128: invokeinterface 484 1 0
    //   133: ifle +35 -> 168
    //   136: aload_2
    //   137: aload_1
    //   138: ldc_w 1216
    //   141: invokeinterface 454 2 0
    //   146: iconst_0
    //   147: invokeinterface 460 2 0
    //   152: invokeinterface 466 1 0
    //   157: invokeinterface 469 1 0
    //   162: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   165: putfield 1219	com/tencent/mobileqq/config/operation/QQOperationViopTipTask:limitDayAIOCount	I
    //   168: aload_1
    //   169: ldc_w 1221
    //   172: invokeinterface 454 2 0
    //   177: astore 4
    //   179: aload 4
    //   181: ifnull +45 -> 226
    //   184: aload 4
    //   186: invokeinterface 484 1 0
    //   191: ifle +35 -> 226
    //   194: aload_2
    //   195: aload_1
    //   196: ldc_w 1221
    //   199: invokeinterface 454 2 0
    //   204: iconst_0
    //   205: invokeinterface 460 2 0
    //   210: invokeinterface 466 1 0
    //   215: invokeinterface 469 1 0
    //   220: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   223: putfield 1224	com/tencent/mobileqq/config/operation/QQOperationViopTipTask:limitDayAIOShowCount	I
    //   226: aload_1
    //   227: ldc_w 1226
    //   230: invokeinterface 454 2 0
    //   235: astore 4
    //   237: aload 4
    //   239: ifnull +45 -> 284
    //   242: aload 4
    //   244: invokeinterface 484 1 0
    //   249: ifle +35 -> 284
    //   252: aload_2
    //   253: aload_1
    //   254: ldc_w 1226
    //   257: invokeinterface 454 2 0
    //   262: iconst_0
    //   263: invokeinterface 460 2 0
    //   268: invokeinterface 466 1 0
    //   273: invokeinterface 469 1 0
    //   278: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   281: putfield 1229	com/tencent/mobileqq/config/operation/QQOperationViopTipTask:limitTotalAIOCount	I
    //   284: aload_1
    //   285: ldc_w 1231
    //   288: invokeinterface 454 2 0
    //   293: astore 4
    //   295: aload 4
    //   297: ifnull +45 -> 342
    //   300: aload 4
    //   302: invokeinterface 484 1 0
    //   307: ifle +35 -> 342
    //   310: aload_2
    //   311: aload_1
    //   312: ldc_w 1231
    //   315: invokeinterface 454 2 0
    //   320: iconst_0
    //   321: invokeinterface 460 2 0
    //   326: invokeinterface 466 1 0
    //   331: invokeinterface 469 1 0
    //   336: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   339: putfield 1234	com/tencent/mobileqq/config/operation/QQOperationViopTipTask:limitTotalShowCount	I
    //   342: aload_1
    //   343: ldc_w 1236
    //   346: invokeinterface 454 2 0
    //   351: astore 4
    //   353: aload 4
    //   355: ifnull +42 -> 397
    //   358: aload 4
    //   360: invokeinterface 484 1 0
    //   365: ifle +32 -> 397
    //   368: aload_2
    //   369: aload_1
    //   370: ldc_w 1236
    //   373: invokeinterface 454 2 0
    //   378: iconst_0
    //   379: invokeinterface 460 2 0
    //   384: invokeinterface 466 1 0
    //   389: invokeinterface 469 1 0
    //   394: invokevirtual 1239	com/tencent/mobileqq/config/operation/QQOperationViopTipTask:setKeywordString	(Ljava/lang/String;)V
    //   397: invokestatic 61	com/tencent/qphone/base/util/QLog:isDevelopLevel	()Z
    //   400: ifeq +33 -> 433
    //   403: ldc_w 1241
    //   406: iconst_4
    //   407: new 122	java/lang/StringBuilder
    //   410: dup
    //   411: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   414: ldc_w 1243
    //   417: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   420: aload_2
    //   421: invokevirtual 1247	com/tencent/mobileqq/config/operation/QQOperationViopTipTask:getKeywordList	()Ljava/util/ArrayList;
    //   424: invokevirtual 134	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   427: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   430: invokestatic 141	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/String;)V
    //   433: aload_1
    //   434: ldc_w 1249
    //   437: invokeinterface 454 2 0
    //   442: astore 4
    //   444: aload 4
    //   446: ifnull +42 -> 488
    //   449: aload 4
    //   451: invokeinterface 484 1 0
    //   456: ifle +32 -> 488
    //   459: aload_2
    //   460: aload_1
    //   461: ldc_w 1249
    //   464: invokeinterface 454 2 0
    //   469: iconst_0
    //   470: invokeinterface 460 2 0
    //   475: invokeinterface 466 1 0
    //   480: invokeinterface 469 1 0
    //   485: invokevirtual 1252	com/tencent/mobileqq/config/operation/QQOperationViopTipTask:setBeginTime	(Ljava/lang/String;)V
    //   488: aload_1
    //   489: ldc_w 1254
    //   492: invokeinterface 454 2 0
    //   497: astore 4
    //   499: aload 4
    //   501: ifnull +42 -> 543
    //   504: aload 4
    //   506: invokeinterface 484 1 0
    //   511: ifle +32 -> 543
    //   514: aload_2
    //   515: aload_1
    //   516: ldc_w 1254
    //   519: invokeinterface 454 2 0
    //   524: iconst_0
    //   525: invokeinterface 460 2 0
    //   530: invokeinterface 466 1 0
    //   535: invokeinterface 469 1 0
    //   540: invokevirtual 1257	com/tencent/mobileqq/config/operation/QQOperationViopTipTask:setEndTime	(Ljava/lang/String;)V
    //   543: aload_1
    //   544: ldc_w 1259
    //   547: invokeinterface 454 2 0
    //   552: astore 4
    //   554: aload 4
    //   556: ifnull +50 -> 606
    //   559: aload 4
    //   561: invokeinterface 484 1 0
    //   566: ifle +40 -> 606
    //   569: aload_1
    //   570: ldc_w 1259
    //   573: invokeinterface 454 2 0
    //   578: iconst_0
    //   579: invokeinterface 460 2 0
    //   584: invokeinterface 466 1 0
    //   589: invokeinterface 469 1 0
    //   594: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   597: iconst_1
    //   598: if_icmpne +697 -> 1295
    //   601: aload_2
    //   602: iload_3
    //   603: putfield 1262	com/tencent/mobileqq/config/operation/QQOperationViopTipTask:uinType	I
    //   606: aload_1
    //   607: ldc_w 1264
    //   610: invokeinterface 454 2 0
    //   615: astore 4
    //   617: aload 4
    //   619: ifnull +197 -> 816
    //   622: aload 4
    //   624: invokeinterface 484 1 0
    //   629: ifle +187 -> 816
    //   632: aload_1
    //   633: ldc_w 1264
    //   636: invokeinterface 454 2 0
    //   641: iconst_0
    //   642: invokeinterface 460 2 0
    //   647: checkcast 1266	org/w3c/dom/Element
    //   650: ldc_w 1268
    //   653: invokeinterface 1269 2 0
    //   658: astore 4
    //   660: aload 4
    //   662: ifnull +62 -> 724
    //   665: aload 4
    //   667: invokeinterface 484 1 0
    //   672: ifle +52 -> 724
    //   675: aload_2
    //   676: aload_1
    //   677: ldc_w 1264
    //   680: invokeinterface 454 2 0
    //   685: iconst_0
    //   686: invokeinterface 460 2 0
    //   691: checkcast 1266	org/w3c/dom/Element
    //   694: ldc_w 1268
    //   697: invokeinterface 1269 2 0
    //   702: iconst_0
    //   703: invokeinterface 460 2 0
    //   708: invokeinterface 466 1 0
    //   713: invokeinterface 469 1 0
    //   718: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   721: putfield 1272	com/tencent/mobileqq/config/operation/QQOperationViopTipTask:frequencyTime	I
    //   724: aload_1
    //   725: ldc_w 1264
    //   728: invokeinterface 454 2 0
    //   733: iconst_0
    //   734: invokeinterface 460 2 0
    //   739: checkcast 1266	org/w3c/dom/Element
    //   742: ldc_w 1274
    //   745: invokeinterface 1269 2 0
    //   750: astore 4
    //   752: aload 4
    //   754: ifnull +62 -> 816
    //   757: aload 4
    //   759: invokeinterface 484 1 0
    //   764: ifle +52 -> 816
    //   767: aload_2
    //   768: aload_1
    //   769: ldc_w 1264
    //   772: invokeinterface 454 2 0
    //   777: iconst_0
    //   778: invokeinterface 460 2 0
    //   783: checkcast 1266	org/w3c/dom/Element
    //   786: ldc_w 1274
    //   789: invokeinterface 1269 2 0
    //   794: iconst_0
    //   795: invokeinterface 460 2 0
    //   800: invokeinterface 466 1 0
    //   805: invokeinterface 469 1 0
    //   810: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   813: putfield 1277	com/tencent/mobileqq/config/operation/QQOperationViopTipTask:frequencyMessage	I
    //   816: aload_1
    //   817: ldc_w 1279
    //   820: invokeinterface 454 2 0
    //   825: astore 4
    //   827: aload 4
    //   829: ifnull +464 -> 1293
    //   832: aload 4
    //   834: invokeinterface 484 1 0
    //   839: ifle +454 -> 1293
    //   842: aload_1
    //   843: ldc_w 1279
    //   846: invokeinterface 454 2 0
    //   851: iconst_0
    //   852: invokeinterface 460 2 0
    //   857: checkcast 1266	org/w3c/dom/Element
    //   860: ldc_w 1280
    //   863: invokeinterface 1269 2 0
    //   868: astore 4
    //   870: aload 4
    //   872: ifnull +62 -> 934
    //   875: aload 4
    //   877: invokeinterface 484 1 0
    //   882: ifle +52 -> 934
    //   885: aload_2
    //   886: aload_1
    //   887: ldc_w 1279
    //   890: invokeinterface 454 2 0
    //   895: iconst_0
    //   896: invokeinterface 460 2 0
    //   901: checkcast 1266	org/w3c/dom/Element
    //   904: ldc_w 1280
    //   907: invokeinterface 1269 2 0
    //   912: iconst_0
    //   913: invokeinterface 460 2 0
    //   918: invokeinterface 466 1 0
    //   923: invokeinterface 469 1 0
    //   928: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   931: putfield 1283	com/tencent/mobileqq/config/operation/QQOperationViopTipTask:tipType	I
    //   934: aload_1
    //   935: ldc_w 1279
    //   938: invokeinterface 454 2 0
    //   943: iconst_0
    //   944: invokeinterface 460 2 0
    //   949: checkcast 1266	org/w3c/dom/Element
    //   952: ldc_w 1274
    //   955: invokeinterface 1269 2 0
    //   960: astore 4
    //   962: aload 4
    //   964: ifnull +59 -> 1023
    //   967: aload 4
    //   969: invokeinterface 484 1 0
    //   974: ifle +49 -> 1023
    //   977: aload_2
    //   978: aload_1
    //   979: ldc_w 1279
    //   982: invokeinterface 454 2 0
    //   987: iconst_0
    //   988: invokeinterface 460 2 0
    //   993: checkcast 1266	org/w3c/dom/Element
    //   996: ldc_w 1274
    //   999: invokeinterface 1269 2 0
    //   1004: iconst_0
    //   1005: invokeinterface 460 2 0
    //   1010: invokeinterface 466 1 0
    //   1015: invokeinterface 469 1 0
    //   1020: putfield 1286	com/tencent/mobileqq/config/operation/QQOperationViopTipTask:adwords	Ljava/lang/String;
    //   1023: aload_1
    //   1024: ldc_w 1279
    //   1027: invokeinterface 454 2 0
    //   1032: iconst_0
    //   1033: invokeinterface 460 2 0
    //   1038: checkcast 1266	org/w3c/dom/Element
    //   1041: ldc_w 1288
    //   1044: invokeinterface 1269 2 0
    //   1049: astore 4
    //   1051: aload 4
    //   1053: ifnull +62 -> 1115
    //   1056: aload 4
    //   1058: invokeinterface 484 1 0
    //   1063: ifle +52 -> 1115
    //   1066: aload_2
    //   1067: aload_1
    //   1068: ldc_w 1279
    //   1071: invokeinterface 454 2 0
    //   1076: iconst_0
    //   1077: invokeinterface 460 2 0
    //   1082: checkcast 1266	org/w3c/dom/Element
    //   1085: ldc_w 1288
    //   1088: invokeinterface 1269 2 0
    //   1093: iconst_0
    //   1094: invokeinterface 460 2 0
    //   1099: invokeinterface 466 1 0
    //   1104: invokeinterface 469 1 0
    //   1109: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   1112: putfield 1291	com/tencent/mobileqq/config/operation/QQOperationViopTipTask:linkOffset	I
    //   1115: aload_1
    //   1116: ldc_w 1279
    //   1119: invokeinterface 454 2 0
    //   1124: iconst_0
    //   1125: invokeinterface 460 2 0
    //   1130: checkcast 1266	org/w3c/dom/Element
    //   1133: ldc_w 1293
    //   1136: invokeinterface 1269 2 0
    //   1141: astore 4
    //   1143: aload 4
    //   1145: ifnull +59 -> 1204
    //   1148: aload 4
    //   1150: invokeinterface 484 1 0
    //   1155: ifle +49 -> 1204
    //   1158: aload_2
    //   1159: aload_1
    //   1160: ldc_w 1279
    //   1163: invokeinterface 454 2 0
    //   1168: iconst_0
    //   1169: invokeinterface 460 2 0
    //   1174: checkcast 1266	org/w3c/dom/Element
    //   1177: ldc_w 1293
    //   1180: invokeinterface 1269 2 0
    //   1185: iconst_0
    //   1186: invokeinterface 460 2 0
    //   1191: invokeinterface 466 1 0
    //   1196: invokeinterface 469 1 0
    //   1201: putfield 1296	com/tencent/mobileqq/config/operation/QQOperationViopTipTask:clickableWord	Ljava/lang/String;
    //   1204: aload_1
    //   1205: ldc_w 1279
    //   1208: invokeinterface 454 2 0
    //   1213: iconst_0
    //   1214: invokeinterface 460 2 0
    //   1219: checkcast 1266	org/w3c/dom/Element
    //   1222: ldc_w 1298
    //   1225: invokeinterface 1269 2 0
    //   1230: astore 4
    //   1232: aload 4
    //   1234: ifnull +59 -> 1293
    //   1237: aload 4
    //   1239: invokeinterface 484 1 0
    //   1244: ifle +49 -> 1293
    //   1247: aload_2
    //   1248: aload_1
    //   1249: ldc_w 1279
    //   1252: invokeinterface 454 2 0
    //   1257: iconst_0
    //   1258: invokeinterface 460 2 0
    //   1263: checkcast 1266	org/w3c/dom/Element
    //   1266: ldc_w 1298
    //   1269: invokeinterface 1269 2 0
    //   1274: iconst_0
    //   1275: invokeinterface 460 2 0
    //   1280: invokeinterface 466 1 0
    //   1285: invokeinterface 469 1 0
    //   1290: putfield 1300	com/tencent/mobileqq/config/operation/QQOperationViopTipTask:url	Ljava/lang/String;
    //   1293: aload_2
    //   1294: areturn
    //   1295: sipush 3000
    //   1298: istore_3
    //   1299: goto -698 -> 601
    //   1302: astore_1
    //   1303: aload_1
    //   1304: invokevirtual 1301	javax/xml/parsers/ParserConfigurationException:printStackTrace	()V
    //   1307: aconst_null
    //   1308: areturn
    //   1309: astore_1
    //   1310: aload_1
    //   1311: invokevirtual 1302	org/xml/sax/SAXException:printStackTrace	()V
    //   1314: goto -7 -> 1307
    //   1317: astore_1
    //   1318: aload_1
    //   1319: invokevirtual 1303	java/io/IOException:printStackTrace	()V
    //   1322: goto -15 -> 1307
    //   1325: astore_1
    //   1326: aload_1
    //   1327: invokevirtual 605	java/lang/Exception:printStackTrace	()V
    //   1330: goto -23 -> 1307
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	1333	0	this	ConfigServlet
    //   0	1333	1	paramString	String
    //   0	1333	2	paramQQOperationViopTipTask	QQOperationViopTipTask
    //   1	1298	3	i	int
    //   35	1203	4	localNodeList	NodeList
    // Exception table:
    //   from	to	target	type
    //   2	37	1302	javax/xml/parsers/ParserConfigurationException
    //   42	63	1302	javax/xml/parsers/ParserConfigurationException
    //   68	110	1302	javax/xml/parsers/ParserConfigurationException
    //   110	121	1302	javax/xml/parsers/ParserConfigurationException
    //   126	168	1302	javax/xml/parsers/ParserConfigurationException
    //   168	179	1302	javax/xml/parsers/ParserConfigurationException
    //   184	226	1302	javax/xml/parsers/ParserConfigurationException
    //   226	237	1302	javax/xml/parsers/ParserConfigurationException
    //   242	284	1302	javax/xml/parsers/ParserConfigurationException
    //   284	295	1302	javax/xml/parsers/ParserConfigurationException
    //   300	342	1302	javax/xml/parsers/ParserConfigurationException
    //   342	353	1302	javax/xml/parsers/ParserConfigurationException
    //   358	397	1302	javax/xml/parsers/ParserConfigurationException
    //   397	433	1302	javax/xml/parsers/ParserConfigurationException
    //   433	444	1302	javax/xml/parsers/ParserConfigurationException
    //   449	488	1302	javax/xml/parsers/ParserConfigurationException
    //   488	499	1302	javax/xml/parsers/ParserConfigurationException
    //   504	543	1302	javax/xml/parsers/ParserConfigurationException
    //   543	554	1302	javax/xml/parsers/ParserConfigurationException
    //   559	601	1302	javax/xml/parsers/ParserConfigurationException
    //   601	606	1302	javax/xml/parsers/ParserConfigurationException
    //   606	617	1302	javax/xml/parsers/ParserConfigurationException
    //   622	660	1302	javax/xml/parsers/ParserConfigurationException
    //   665	724	1302	javax/xml/parsers/ParserConfigurationException
    //   724	752	1302	javax/xml/parsers/ParserConfigurationException
    //   757	816	1302	javax/xml/parsers/ParserConfigurationException
    //   816	827	1302	javax/xml/parsers/ParserConfigurationException
    //   832	870	1302	javax/xml/parsers/ParserConfigurationException
    //   875	934	1302	javax/xml/parsers/ParserConfigurationException
    //   934	962	1302	javax/xml/parsers/ParserConfigurationException
    //   967	1023	1302	javax/xml/parsers/ParserConfigurationException
    //   1023	1051	1302	javax/xml/parsers/ParserConfigurationException
    //   1056	1115	1302	javax/xml/parsers/ParserConfigurationException
    //   1115	1143	1302	javax/xml/parsers/ParserConfigurationException
    //   1148	1204	1302	javax/xml/parsers/ParserConfigurationException
    //   1204	1232	1302	javax/xml/parsers/ParserConfigurationException
    //   1237	1293	1302	javax/xml/parsers/ParserConfigurationException
    //   2	37	1309	org/xml/sax/SAXException
    //   42	63	1309	org/xml/sax/SAXException
    //   68	110	1309	org/xml/sax/SAXException
    //   110	121	1309	org/xml/sax/SAXException
    //   126	168	1309	org/xml/sax/SAXException
    //   168	179	1309	org/xml/sax/SAXException
    //   184	226	1309	org/xml/sax/SAXException
    //   226	237	1309	org/xml/sax/SAXException
    //   242	284	1309	org/xml/sax/SAXException
    //   284	295	1309	org/xml/sax/SAXException
    //   300	342	1309	org/xml/sax/SAXException
    //   342	353	1309	org/xml/sax/SAXException
    //   358	397	1309	org/xml/sax/SAXException
    //   397	433	1309	org/xml/sax/SAXException
    //   433	444	1309	org/xml/sax/SAXException
    //   449	488	1309	org/xml/sax/SAXException
    //   488	499	1309	org/xml/sax/SAXException
    //   504	543	1309	org/xml/sax/SAXException
    //   543	554	1309	org/xml/sax/SAXException
    //   559	601	1309	org/xml/sax/SAXException
    //   601	606	1309	org/xml/sax/SAXException
    //   606	617	1309	org/xml/sax/SAXException
    //   622	660	1309	org/xml/sax/SAXException
    //   665	724	1309	org/xml/sax/SAXException
    //   724	752	1309	org/xml/sax/SAXException
    //   757	816	1309	org/xml/sax/SAXException
    //   816	827	1309	org/xml/sax/SAXException
    //   832	870	1309	org/xml/sax/SAXException
    //   875	934	1309	org/xml/sax/SAXException
    //   934	962	1309	org/xml/sax/SAXException
    //   967	1023	1309	org/xml/sax/SAXException
    //   1023	1051	1309	org/xml/sax/SAXException
    //   1056	1115	1309	org/xml/sax/SAXException
    //   1115	1143	1309	org/xml/sax/SAXException
    //   1148	1204	1309	org/xml/sax/SAXException
    //   1204	1232	1309	org/xml/sax/SAXException
    //   1237	1293	1309	org/xml/sax/SAXException
    //   2	37	1317	java/io/IOException
    //   42	63	1317	java/io/IOException
    //   68	110	1317	java/io/IOException
    //   110	121	1317	java/io/IOException
    //   126	168	1317	java/io/IOException
    //   168	179	1317	java/io/IOException
    //   184	226	1317	java/io/IOException
    //   226	237	1317	java/io/IOException
    //   242	284	1317	java/io/IOException
    //   284	295	1317	java/io/IOException
    //   300	342	1317	java/io/IOException
    //   342	353	1317	java/io/IOException
    //   358	397	1317	java/io/IOException
    //   397	433	1317	java/io/IOException
    //   433	444	1317	java/io/IOException
    //   449	488	1317	java/io/IOException
    //   488	499	1317	java/io/IOException
    //   504	543	1317	java/io/IOException
    //   543	554	1317	java/io/IOException
    //   559	601	1317	java/io/IOException
    //   601	606	1317	java/io/IOException
    //   606	617	1317	java/io/IOException
    //   622	660	1317	java/io/IOException
    //   665	724	1317	java/io/IOException
    //   724	752	1317	java/io/IOException
    //   757	816	1317	java/io/IOException
    //   816	827	1317	java/io/IOException
    //   832	870	1317	java/io/IOException
    //   875	934	1317	java/io/IOException
    //   934	962	1317	java/io/IOException
    //   967	1023	1317	java/io/IOException
    //   1023	1051	1317	java/io/IOException
    //   1056	1115	1317	java/io/IOException
    //   1115	1143	1317	java/io/IOException
    //   1148	1204	1317	java/io/IOException
    //   1204	1232	1317	java/io/IOException
    //   1237	1293	1317	java/io/IOException
    //   2	37	1325	java/lang/Exception
    //   42	63	1325	java/lang/Exception
    //   68	110	1325	java/lang/Exception
    //   110	121	1325	java/lang/Exception
    //   126	168	1325	java/lang/Exception
    //   168	179	1325	java/lang/Exception
    //   184	226	1325	java/lang/Exception
    //   226	237	1325	java/lang/Exception
    //   242	284	1325	java/lang/Exception
    //   284	295	1325	java/lang/Exception
    //   300	342	1325	java/lang/Exception
    //   342	353	1325	java/lang/Exception
    //   358	397	1325	java/lang/Exception
    //   397	433	1325	java/lang/Exception
    //   433	444	1325	java/lang/Exception
    //   449	488	1325	java/lang/Exception
    //   488	499	1325	java/lang/Exception
    //   504	543	1325	java/lang/Exception
    //   543	554	1325	java/lang/Exception
    //   559	601	1325	java/lang/Exception
    //   601	606	1325	java/lang/Exception
    //   606	617	1325	java/lang/Exception
    //   622	660	1325	java/lang/Exception
    //   665	724	1325	java/lang/Exception
    //   724	752	1325	java/lang/Exception
    //   757	816	1325	java/lang/Exception
    //   816	827	1325	java/lang/Exception
    //   832	870	1325	java/lang/Exception
    //   875	934	1325	java/lang/Exception
    //   934	962	1325	java/lang/Exception
    //   967	1023	1325	java/lang/Exception
    //   1023	1051	1325	java/lang/Exception
    //   1056	1115	1325	java/lang/Exception
    //   1115	1143	1325	java/lang/Exception
    //   1148	1204	1325	java/lang/Exception
    //   1204	1232	1325	java/lang/Exception
    //   1237	1293	1325	java/lang/Exception
  }
  
  public static String a(int paramInt1, int paramInt2)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramInt1).append('-').append(paramInt2);
    return localStringBuilder.toString();
  }
  
  public static String a(SharedPreferences paramSharedPreferences, String paramString, boolean paramBoolean)
  {
    int i = 0;
    paramSharedPreferences = paramSharedPreferences.getString("data_migration_tim_uins", "");
    if (TextUtils.isEmpty(paramSharedPreferences))
    {
      if (paramBoolean) {
        return paramString;
      }
      return paramSharedPreferences;
    }
    if (paramBoolean)
    {
      localObject = paramSharedPreferences.split(";");
      j = localObject.length;
      while (i < j)
      {
        if (localObject[i].equals(paramString)) {
          return paramSharedPreferences;
        }
        i += 1;
      }
      return paramSharedPreferences + ";" + paramString;
    }
    paramSharedPreferences = paramSharedPreferences.split(";");
    Object localObject = new StringBuilder();
    int j = paramSharedPreferences.length;
    i = 0;
    while (i < j)
    {
      String str = paramSharedPreferences[i];
      if (!str.equals(paramString)) {
        ((StringBuilder)localObject).append(str).append(";");
      }
      i += 1;
    }
    if ((((StringBuilder)localObject).length() > 0) && (((StringBuilder)localObject).charAt(((StringBuilder)localObject).length() - 1) == ';')) {
      ((StringBuilder)localObject).deleteCharAt(((StringBuilder)localObject).length() - 1);
    }
    return ((StringBuilder)localObject).toString();
  }
  
  public static String a(ConfigurationService.Config paramConfig, int paramInt1, int paramInt2)
  {
    if (paramConfig.version.get() == paramInt1)
    {
      QLog.e("SPLASH_ConfigServlet", 1, "extractConfigContent| config content will be null localVersion is same as config.version(" + paramInt1 + "). type=" + paramInt2);
      return null;
    }
    if (paramConfig.content_list.size() > 0) {
      return (String)paramConfig.content_list.get(0);
    }
    if (paramConfig.msg_content_list.size() == 0)
    {
      QLog.i("SPLASH_ConfigServlet", 1, String.format(Locale.getDefault(), "extractConfigContent| version is update but config content is null. newVersion=%d, oldVersion=%d, type=%d", new Object[] { Integer.valueOf(paramConfig.version.get()), Integer.valueOf(paramInt1), Integer.valueOf(paramInt2) }));
      return "";
    }
    Object localObject = ((ConfigurationService.Content)paramConfig.msg_content_list.get(0)).content.get().toByteArray();
    if (((ConfigurationService.Content)paramConfig.msg_content_list.get(0)).compress.get() == 1)
    {
      byte[] arrayOfByte = ArConfigUtils.a((byte[])localObject);
      localObject = arrayOfByte;
      if (arrayOfByte == null)
      {
        QLog.e("SPLASH_ConfigServlet", 1, "extractConfigContent| decompress is failed. type=" + paramInt2 + ", data=null");
        return null;
      }
    }
    for (;;)
    {
      try
      {
        localObject = new String((byte[])localObject, "utf-8");
        paramConfig = String.format(Locale.getDefault(), "extractConfigContent| config is update. version=%d, type=%d", new Object[] { Integer.valueOf(paramConfig.version.get()), Integer.valueOf(paramInt2) });
        if (QLog.isColorLevel())
        {
          QLog.i("SPLASH_ConfigServlet", 2, paramConfig + "content=" + (String)localObject);
          return localObject;
        }
      }
      catch (UnsupportedEncodingException paramConfig)
      {
        QLog.e("SPLASH_ConfigServlet", 1, "extractConfigContent| data[] to String failed. type=" + paramInt2, paramConfig);
        return null;
      }
      QLog.i("SPLASH_ConfigServlet", 1, paramConfig);
    }
  }
  
  private String a(InputStream paramInputStream)
  {
    BufferedReader localBufferedReader = new BufferedReader(new InputStreamReader(paramInputStream));
    StringBuilder localStringBuilder = new StringBuilder();
    try
    {
      for (;;)
      {
        String str = localBufferedReader.readLine();
        if (str == null) {
          break;
        }
        localStringBuilder.append(str);
      }
      try
      {
        paramInputStream.close();
        throw localObject;
      }
      catch (IOException paramInputStream)
      {
        for (;;)
        {
          paramInputStream.printStackTrace();
        }
      }
    }
    catch (IOException localIOException)
    {
      localIOException = localIOException;
      localIOException.printStackTrace();
      try
      {
        paramInputStream.close();
        for (;;)
        {
          return localStringBuilder.toString();
          try
          {
            paramInputStream.close();
          }
          catch (IOException paramInputStream)
          {
            paramInputStream.printStackTrace();
          }
        }
      }
      catch (IOException paramInputStream)
      {
        for (;;)
        {
          paramInputStream.printStackTrace();
        }
      }
    }
    finally {}
  }
  
  public static List a(ConfigurationService.Config paramConfig)
  {
    ArrayList localArrayList = null;
    if ((paramConfig.msg_content_list != null) && (paramConfig.msg_content_list.size() > 0))
    {
      localArrayList = new ArrayList();
      if (QLog.isColorLevel()) {
        QLog.i("SPLASH_ConfigServlet", 2, "handleReceiptConfig: list.size() " + paramConfig.msg_content_list.size());
      }
      Iterator localIterator = paramConfig.msg_content_list.get().iterator();
      if (localIterator.hasNext())
      {
        paramConfig = (ConfigurationService.Content)localIterator.next();
        if ((paramConfig != null) && (paramConfig.content.has())) {
          if (paramConfig.compress.get() == 1)
          {
            paramConfig = b(paramConfig.content.get().toByteArray());
            if (paramConfig == null) {
              break label302;
            }
          }
        }
      }
    }
    for (;;)
    {
      try
      {
        paramConfig = new String(paramConfig, "UTF-8");
        if (QLog.isColorLevel()) {
          QLog.i("SPLASH_ConfigServlet", 2, "parseCommonConfig: contentitem.content =  " + paramConfig);
        }
        if (TextUtils.isEmpty(paramConfig)) {
          break;
        }
        localArrayList.add(paramConfig);
      }
      catch (Exception paramConfig)
      {
        QLog.e("SPLASH_ConfigServlet", 1, "parseCommonConfig|uncompress failed" + paramConfig);
        paramConfig = null;
        continue;
      }
      paramConfig = paramConfig.content.get().toStringUtf8();
      continue;
      QLog.i("SPLASH_ConfigServlet", 1, "empty contentitem");
      break;
      do
      {
        return localArrayList;
      } while (!QLog.isColorLevel());
      QLog.i("SPLASH_ConfigServlet", 2, "handleReceiptConfig:msg_content_list is empty ,version: " + paramConfig.version.get());
      return null;
      label302:
      paramConfig = null;
    }
  }
  
  public static List a(ConfigurationService.Config paramConfig, int paramInt1, int paramInt2)
  {
    if (paramConfig.version.get() == paramInt1)
    {
      QLog.e("SPLASH_ConfigServlet", 1, "extractConfigContentList| config content is null. type=" + paramInt2);
      return null;
    }
    if (paramConfig.content_list.size() > 0) {
      return paramConfig.content_list.get();
    }
    int i = paramConfig.msg_content_list.size();
    if (i == 0)
    {
      QLog.i("SPLASH_ConfigServlet", 1, String.format(Locale.getDefault(), "extractConfigContentList| version is update but config content is null. newVersion=%d, oldVersion=%d, type=%d", new Object[] { Integer.valueOf(paramConfig.version.get()), Integer.valueOf(paramInt1), Integer.valueOf(paramInt2) }));
      return Collections.emptyList();
    }
    ArrayList localArrayList = new ArrayList(i);
    paramInt1 = 0;
    if (paramInt1 < i)
    {
      Object localObject1 = ((ConfigurationService.Content)paramConfig.msg_content_list.get(0)).content.get().toByteArray();
      Object localObject2;
      if (((ConfigurationService.Content)paramConfig.msg_content_list.get(0)).compress.get() == 1)
      {
        localObject2 = ArConfigUtils.a((byte[])localObject1);
        localObject1 = localObject2;
        if (localObject2 == null) {
          QLog.e("SPLASH_ConfigServlet", 1, paramInt1 + ": extractConfigContentList| decompress is failed. type=" + paramInt2 + ", data=null");
        }
      }
      for (;;)
      {
        paramInt1 += 1;
        break;
        try
        {
          localObject1 = new String((byte[])localObject1, "utf-8");
          localArrayList.add(localObject1);
          localObject2 = String.format(Locale.getDefault(), "%d: extractConfigContent| config is update. version=%d, type=%d", new Object[] { Integer.valueOf(paramInt1), Integer.valueOf(paramConfig.version.get()), Integer.valueOf(paramInt2) });
          if (!QLog.isColorLevel()) {
            break label380;
          }
          QLog.i("SPLASH_ConfigServlet", 2, (String)localObject2 + "content=" + (String)localObject1);
        }
        catch (UnsupportedEncodingException localUnsupportedEncodingException)
        {
          QLog.e("SPLASH_ConfigServlet", 1, paramInt1 + ": extractConfigContentList| data[] to String failed. type=" + paramInt2, localUnsupportedEncodingException);
        }
        continue;
        label380:
        QLog.i("SPLASH_ConfigServlet", 1, (String)localObject2);
      }
    }
    return localArrayList;
  }
  
  public static void a(int paramInt, QQAppInterface paramQQAppInterface, String paramString)
  {
    jdField_a_of_type_JavaLangString = paramString;
    if (QLog.isColorLevel()) {
      QLog.d("SPLASH_ConfigServlet", 2, "ConfigServlet getARMapConfig uin:" + paramString + ",reqOccasion:" + paramInt);
    }
    if (((ARMapConfigManager)paramQQAppInterface.getManager(189)).a())
    {
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "ARMapForbidden getARMapConfig return");
      }
      return;
    }
    paramString = new NewIntent(paramQQAppInterface.getApp(), ConfigServlet.class);
    paramString.putExtra("k_cmd_type", new int[] { 133 });
    paramString.putExtra("k_req_occasion", paramInt);
    paramQQAppInterface.startServlet(paramString);
  }
  
  /* Error */
  private void a(int paramInt, String paramString1, String paramString2, QQAppInterface paramQQAppInterface)
  {
    // Byte code:
    //   0: getstatic 1433	cooperation/readinjoy/content/ReadInJoyDataProvider:e	Landroid/net/Uri;
    //   3: invokevirtual 1439	android/net/Uri:buildUpon	()Landroid/net/Uri$Builder;
    //   6: astore 5
    //   8: aload 5
    //   10: ldc_w 1441
    //   13: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   16: invokevirtual 1447	android/net/Uri$Builder:appendQueryParameter	(Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri$Builder;
    //   19: pop
    //   20: aload 5
    //   22: invokevirtual 1451	android/net/Uri$Builder:build	()Landroid/net/Uri;
    //   25: astore 5
    //   27: new 1453	android/content/ContentValues
    //   30: dup
    //   31: invokespecial 1454	android/content/ContentValues:<init>	()V
    //   34: astore 6
    //   36: aload 6
    //   38: ldc_w 1456
    //   41: iload_1
    //   42: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   45: invokevirtual 1460	android/content/ContentValues:put	(Ljava/lang/String;Ljava/lang/Integer;)V
    //   48: aload 6
    //   50: ldc_w 1462
    //   53: aload_2
    //   54: invokevirtual 1465	android/content/ContentValues:put	(Ljava/lang/String;Ljava/lang/String;)V
    //   57: aload 6
    //   59: ldc_w 1467
    //   62: aload_3
    //   63: invokevirtual 1465	android/content/ContentValues:put	(Ljava/lang/String;Ljava/lang/String;)V
    //   66: ldc_w 1469
    //   69: iconst_2
    //   70: anewarray 65	java/lang/Object
    //   73: dup
    //   74: iconst_0
    //   75: ldc_w 1462
    //   78: aastore
    //   79: dup
    //   80: iconst_1
    //   81: aload_2
    //   82: aastore
    //   83: invokestatic 405	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   86: astore_2
    //   87: aload 4
    //   89: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   92: invokevirtual 1473	com/tencent/qphone/base/util/BaseApplication:getContentResolver	()Landroid/content/ContentResolver;
    //   95: aload 5
    //   97: aconst_null
    //   98: aload_2
    //   99: aconst_null
    //   100: aconst_null
    //   101: invokevirtual 1479	android/content/ContentResolver:query	(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;
    //   104: astore_2
    //   105: aload_2
    //   106: ifnull +148 -> 254
    //   109: aload_2
    //   110: invokeinterface 1484 1 0
    //   115: ifle +61 -> 176
    //   118: aload 4
    //   120: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   123: invokevirtual 1473	com/tencent/qphone/base/util/BaseApplication:getContentResolver	()Landroid/content/ContentResolver;
    //   126: aload 5
    //   128: aload 6
    //   130: aconst_null
    //   131: aconst_null
    //   132: invokevirtual 1488	android/content/ContentResolver:update	(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I
    //   135: pop
    //   136: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   139: ifeq +12 -> 151
    //   142: ldc 63
    //   144: iconst_2
    //   145: ldc_w 1490
    //   148: invokestatic 141	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/String;)V
    //   151: aload 4
    //   153: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   156: invokevirtual 1473	com/tencent/qphone/base/util/BaseApplication:getContentResolver	()Landroid/content/ContentResolver;
    //   159: aload 5
    //   161: aconst_null
    //   162: invokevirtual 1494	android/content/ContentResolver:notifyChange	(Landroid/net/Uri;Landroid/database/ContentObserver;)V
    //   165: aload_2
    //   166: ifnull +9 -> 175
    //   169: aload_2
    //   170: invokeinterface 1495 1 0
    //   175: return
    //   176: aload 4
    //   178: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   181: invokevirtual 1473	com/tencent/qphone/base/util/BaseApplication:getContentResolver	()Landroid/content/ContentResolver;
    //   184: aload 5
    //   186: aload 6
    //   188: invokevirtual 1499	android/content/ContentResolver:insert	(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;
    //   191: pop
    //   192: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   195: ifeq -44 -> 151
    //   198: ldc 63
    //   200: iconst_2
    //   201: ldc_w 1501
    //   204: invokestatic 141	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/String;)V
    //   207: goto -56 -> 151
    //   210: astore_3
    //   211: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   214: ifeq +29 -> 243
    //   217: ldc 63
    //   219: iconst_2
    //   220: new 122	java/lang/StringBuilder
    //   223: dup
    //   224: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   227: ldc_w 1503
    //   230: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   233: aload_3
    //   234: invokevirtual 134	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   237: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   240: invokestatic 141	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/String;)V
    //   243: aload_2
    //   244: ifnull -69 -> 175
    //   247: aload_2
    //   248: invokeinterface 1495 1 0
    //   253: return
    //   254: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   257: ifeq -106 -> 151
    //   260: ldc 63
    //   262: iconst_2
    //   263: ldc_w 1505
    //   266: invokestatic 141	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/String;)V
    //   269: goto -118 -> 151
    //   272: astore 4
    //   274: aload_2
    //   275: astore_3
    //   276: aload 4
    //   278: astore_2
    //   279: aload_3
    //   280: ifnull +9 -> 289
    //   283: aload_3
    //   284: invokeinterface 1495 1 0
    //   289: aload_2
    //   290: athrow
    //   291: astore_2
    //   292: aconst_null
    //   293: astore_3
    //   294: goto -15 -> 279
    //   297: astore 4
    //   299: aload_2
    //   300: astore_3
    //   301: aload 4
    //   303: astore_2
    //   304: goto -25 -> 279
    //   307: astore_3
    //   308: aconst_null
    //   309: astore_2
    //   310: goto -99 -> 211
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	313	0	this	ConfigServlet
    //   0	313	1	paramInt	int
    //   0	313	2	paramString1	String
    //   0	313	3	paramString2	String
    //   0	313	4	paramQQAppInterface	QQAppInterface
    //   6	179	5	localObject	Object
    //   34	153	6	localContentValues	android.content.ContentValues
    // Exception table:
    //   from	to	target	type
    //   109	151	210	java/lang/Exception
    //   151	165	210	java/lang/Exception
    //   176	207	210	java/lang/Exception
    //   254	269	210	java/lang/Exception
    //   109	151	272	finally
    //   151	165	272	finally
    //   176	207	272	finally
    //   254	269	272	finally
    //   27	105	291	finally
    //   211	243	297	finally
    //   27	105	307	java/lang/Exception
  }
  
  public static void a(QQAppInterface paramQQAppInterface)
  {
    a(paramQQAppInterface, 5);
    if (QLog.isDevelopLevel()) {
      QLog.d("QQOperateVoIP", 4, "onSend configXml request");
    }
  }
  
  public static void a(QQAppInterface paramQQAppInterface, int paramInt)
  {
    a(paramQQAppInterface, paramInt, null);
  }
  
  public static void a(QQAppInterface paramQQAppInterface, int paramInt, String paramString)
  {
    NewIntent localNewIntent = new NewIntent(paramQQAppInterface.getApp(), ConfigServlet.class);
    localNewIntent.putExtra("k_cmd_type", new int[] { paramInt });
    if (!StringUtil.a(paramString)) {
      localNewIntent.putExtra("key_uin", paramString);
    }
    paramQQAppInterface.startServlet(localNewIntent);
  }
  
  private void a(QQAppInterface paramQQAppInterface, Intent paramIntent, int[] paramArrayOfInt, Packet paramPacket)
  {
    ConfigurationService.ReqGetConfig localReqGetConfig = new ConfigurationService.ReqGetConfig();
    int n = paramArrayOfInt.length;
    ArrayList localArrayList1 = new ArrayList(n);
    ArrayList localArrayList2 = new ArrayList(n);
    int k = 0;
    ConfigurationService.ConfigSeq localConfigSeq;
    int i1;
    label1668:
    int j;
    int i;
    Object localObject5;
    String str;
    long l;
    boolean bool;
    Object localObject2;
    int i2;
    int m;
    if (k < n)
    {
      localConfigSeq = new ConfigurationService.ConfigSeq();
      i1 = paramArrayOfInt[k];
      localConfigSeq.type.set(i1);
      switch (i1)
      {
      default: 
      case 1: 
      case 2: 
      case 3: 
      case 12: 
      case 18: 
      case 5: 
      case 55: 
      case 10: 
      case 46: 
      case 13: 
      case 102: 
      case 101: 
      case 294: 
      case 34: 
      case 115: 
      case 286: 
      case 23: 
      case 53: 
      case 78: 
      case 287: 
      case 84: 
      case 167: 
      case 226: 
      case 139: 
      case 310: 
      case 276: 
      case 223: 
      case 298: 
      case 31: 
      case 26: 
      case 76: 
      case 94: 
      case 158: 
      case 32: 
      case 35: 
      case 33: 
      case 38: 
      case 93: 
      case 270: 
      case 44: 
      case 42: 
      case 47: 
      case 65: 
      case 49: 
      case 50: 
      case 56: 
      case 148: 
      case 61: 
      case 63: 
      case 64: 
      case 60: 
      case 57: 
      case 66: 
      case 72: 
      case 73: 
      case 67: 
      case 70: 
      case 292: 
      case 68: 
      case 69: 
      case 74: 
      case 75: 
      case 228: 
      case 256: 
      case 6: 
      case 43: 
      case 113: 
      case 80: 
      case 111: 
      case 79: 
      case 81: 
      case 85: 
      case 92: 
      case 83: 
      case 82: 
      case 90: 
      case 147: 
      case 124: 
      case 86: 
      case 87: 
        do
        {
          for (;;)
          {
            localArrayList1.add(localConfigSeq);
            localArrayList2.add(Integer.valueOf(i1));
            for (;;)
            {
              for (;;)
              {
                k += 1;
                break;
                localConfigSeq.version.set(SharedPreUtils.c(paramQQAppInterface.getApp()));
                break label1668;
                localConfigSeq.version.set(SharedPreUtils.j(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
                break label1668;
                SharedPreUtils.a(paramQQAppInterface.getApplication(), paramQQAppInterface.getCurrentAccountUin());
                if (paramQQAppInterface.getCurrentAccountUin() != null)
                {
                  jdField_b_of_type_JavaLangString = paramQQAppInterface.getCurrentNickname();
                  Object localObject1 = ProfileCardUtil.a(paramQQAppInterface, paramQQAppInterface.getCurrentAccountUin());
                  if (localObject1 != null)
                  {
                    if (QLog.isColorLevel()) {
                      QLog.i("SPLASH_ConfigServlet_birth", 2, "card!=null");
                    }
                    j = (int)((Card)localObject1).lBirthday;
                    i = ProfileUtil.b(j);
                    j = ProfileUtil.c(j);
                    SharedPreUtils.b(paramQQAppInterface.getApp(), a(i, j));
                    i = a(new SimpleDateFormat("MM-dd").format(new Date()), a(i, j));
                    if (QLog.isColorLevel()) {
                      QLog.i("SPLASH_ConfigServlet_birth", 2, "birthday date diff is " + i);
                    }
                    if (i < 0) {
                      continue;
                    }
                    if (i <= 3) {}
                  }
                  else
                  {
                    if (!QLog.isColorLevel()) {
                      continue;
                    }
                    QLog.i("SPLASH_ConfigServlet_birth", 2, "card===null");
                    continue;
                  }
                  localConfigSeq.version.set(SharedPreUtils.k(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
                  break label1668;
                  localObject1 = (NearbyBannerManager)paramQQAppInterface.getManager(73);
                  localConfigSeq.version.set(((NearbyBannerManager)localObject1).a());
                  localObject5 = paramIntent.getStringExtra("key_province");
                  localObject1 = localObject5;
                  if (localObject5 == null) {
                    localObject1 = "";
                  }
                  str = paramIntent.getStringExtra("key_city");
                  localObject5 = str;
                  if (str == null) {
                    localObject5 = "";
                  }
                  localReqGetConfig.province.set((String)localObject1);
                  localReqGetConfig.city.set((String)localObject5);
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.p(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.l(paramQQAppInterface.getApp(), paramQQAppInterface.getCurrentAccountUin()));
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.m(paramQQAppInterface.getApp(), paramQQAppInterface.getCurrentAccountUin()));
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.b(paramQQAppInterface.getApp()));
                  break label1668;
                  localConfigSeq.version.set(PatchSharedPreUtil.a(paramQQAppInterface.getApp()));
                  break label1668;
                  BridgeHelper.a(BaseApplication.getContext(), jdField_a_of_type_JavaLangString).a();
                  localConfigSeq.version.set(SharedPreUtils.a(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount()));
                  break label1668;
                  i = ApkUtils.a(BaseApplicationImpl.getContext());
                  if (SettingCloneUtil.readValueForInt(BaseApplicationImpl.getContext(), jdField_a_of_type_JavaLangString, null, "qqsetting_calltab_show_key_version", 0) < i)
                  {
                    localConfigSeq.version.set(0);
                    break label1668;
                  }
                  localConfigSeq.version.set(SharedPreUtils.o(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount()));
                  break label1668;
                  i = ApkUtils.a(BaseApplicationImpl.getContext());
                  if (SettingCloneUtil.readValueForInt(BaseApplicationImpl.getContext(), jdField_a_of_type_JavaLangString, null, "qqsetting_calltab_show_key_version", 0) < i)
                  {
                    localConfigSeq.version.set(0);
                    paramIntent.putExtra("update101Version", i);
                    break label1668;
                  }
                  localConfigSeq.version.set(SharedPreUtils.n(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount()));
                  break label1668;
                  i = ApkUtils.a(BaseApplicationImpl.getContext());
                  if (SettingCloneUtil.readValueForInt(BaseApplicationImpl.getContext(), jdField_a_of_type_JavaLangString, null, "qqsetting_calltab_show_key_version", 0) < i) {
                    localConfigSeq.version.set(0);
                  }
                  for (;;)
                  {
                    localConfigSeq.compress.set(1);
                    break;
                    localConfigSeq.version.set(SharedPreUtils.a(paramQQAppInterface.getApp(), "tencent_docs_config_version", jdField_a_of_type_JavaLangString));
                  }
                  localObject1 = (PhoneUnityManager)paramQQAppInterface.getManager(101);
                  localConfigSeq.version.set(((PhoneUnityManager)localObject1).a());
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.v(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.w(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.e(paramQQAppInterface.getApp()));
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.x(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.y(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.g(paramQQAppInterface.getApp()));
                  break label1668;
                  if (!com.tencent.mobileqq.shortvideo.PtvTemplateManager.a())
                  {
                    localConfigSeq.version.set(0);
                    break label1668;
                  }
                  localConfigSeq.version.set(SharedPreUtils.h(paramQQAppInterface.getApp()));
                  break label1668;
                  if (!com.tencent.mobileqq.shortvideo.PtvTemplateManager.b()) {
                    localConfigSeq.version.set(0);
                  }
                  for (;;)
                  {
                    localConfigSeq.compress.set(1);
                    break;
                    localConfigSeq.version.set(SharedPreUtils.j(paramQQAppInterface.getApp()));
                  }
                  if (!CapturePtvTemplateManager.a()) {
                    localConfigSeq.version.set(0);
                  }
                  for (;;)
                  {
                    localConfigSeq.compress.set(1);
                    break;
                    localConfigSeq.version.set(SharedPreUtils.i(paramQQAppInterface.getApp()));
                  }
                  i = 0;
                  if (com.tencent.mobileqq.shortvideo.PtvTemplateManager.c()) {
                    i = SharedPreUtils.k(paramQQAppInterface.getApp());
                  }
                  localConfigSeq.version.set(i);
                  localConfigSeq.compress.set(1);
                  if (!QLog.isDevelopLevel()) {
                    break label1668;
                  }
                  QLog.d("Doodle_Strokes_SPLASH_ConfigServlet", 4, String.format("个性笔触配置版本号[%s]", new Object[] { Integer.valueOf(i) }));
                  break label1668;
                  i = 0;
                  if (dov.com.tencent.mobileqq.shortvideo.PtvTemplateManager.a()) {
                    i = SharedPreUtils.l(paramQQAppInterface.getApp());
                  }
                  localConfigSeq.version.set(i);
                  localConfigSeq.compress.set(1);
                  if (!QLog.isDevelopLevel()) {
                    break label1668;
                  }
                  QLog.d("DOV_Doodle_Strokes_SPLASH_ConfigServlet", 4, String.format("个性笔触配置版本号[%s]", new Object[] { Integer.valueOf(i) }));
                  break label1668;
                  QAVGroupConfig.a(localConfigSeq);
                  break label1668;
                  GestureMgrAppDownload.a(localConfigSeq);
                  break label1668;
                  QavGPDownloader.a(localConfigSeq);
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.b(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount()));
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.c(paramQQAppInterface.getApp(), ""));
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.d(paramQQAppInterface.getApp(), ""));
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.e(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount()));
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.f(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount()));
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.n(paramQQAppInterface.getApp()));
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.G(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount()));
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.q(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.r(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.s(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.t(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
                  localConfigSeq.compress.set(1);
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.g(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
                  break label1668;
                  localConfigSeq.version.set(SharedPreUtils.P(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
                  l = paramIntent.getLongExtra("k_adcode", 0L);
                  localObject5 = paramIntent.getStringExtra("key_province");
                  localObject1 = localObject5;
                  if (localObject5 == null) {
                    localObject1 = "";
                  }
                  str = paramIntent.getStringExtra("key_city");
                  localObject5 = str;
                  if (str == null) {
                    localObject5 = "";
                  }
                  localReqGetConfig.province.set((String)localObject1);
                  localReqGetConfig.city.set((String)localObject5);
                  localReqGetConfig.adcode.set(l);
                  break label1668;
                  bool = QFindConfigUtil.a();
                  if (QLog.isColorLevel()) {
                    QLog.d("SPLASH_ConfigServlet", 2, "addAllConfigs, support ble=" + bool);
                  }
                  if (bool)
                  {
                    localConfigSeq.version.set(SharedPreUtils.h(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
                    break label1668;
                    bool = QFindConfigUtil.a();
                    if (QLog.isColorLevel()) {
                      QLog.d("SPLASH_ConfigServlet", 2, "addAllConfigs, support ble=" + bool);
                    }
                    if (bool)
                    {
                      localConfigSeq.version.set(SharedPreUtils.i(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
                      break label1668;
                      localConfigSeq.version.set(SharedPreUtils.t(paramQQAppInterface.getApp()));
                      break label1668;
                      i = SharedPreUtils.E(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
                      j = AppSetting.jdField_a_of_type_Int;
                      if (i != j)
                      {
                        SharedPreUtils.i(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 0);
                        SharedPreUtils.k(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, j);
                        SearchConfigManager.a(paramQQAppInterface, jdField_a_of_type_JavaLangString);
                      }
                      localConfigSeq.version.set(SharedPreUtils.D(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
                      break label1668;
                      localConfigSeq.version.set(SharedPreUtils.Q(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
                      break label1668;
                      localConfigSeq.version.set(SharedPreUtils.f(paramQQAppInterface.getApp()));
                      localConfigSeq.compress.set(1);
                      break label1668;
                      localConfigSeq.version.set(SharedPreUtils.u(paramQQAppInterface.getApp()));
                      break label1668;
                      localConfigSeq.version.set(SharedPreUtils.v(paramQQAppInterface.getApp()));
                      break label1668;
                      localConfigSeq.version.set(SharedPreUtils.w(paramQQAppInterface.getApp()));
                      break label1668;
                      i = SharedPreUtils.R(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
                      localConfigSeq.version.set(i);
                      break label1668;
                      localConfigSeq.version.set(SharedPreUtils.x(paramQQAppInterface.getApp()));
                      break label1668;
                      localConfigSeq.version.set(SharedPreUtils.H(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
                      break label1668;
                      localConfigSeq.version.set(SharedPreUtils.W(paramQQAppInterface.getApp(), paramQQAppInterface.c()));
                      break label1668;
                      localConfigSeq.version.set(SharedPreUtils.y(paramQQAppInterface.getApp()));
                      break label1668;
                      localConfigSeq.version.set(SharedPreUtils.N(paramQQAppInterface.getApp(), paramQQAppInterface.c()));
                      break label1668;
                      localConfigSeq.version.set(PublicAccountConfigUtil.b(paramQQAppInterface));
                      break label1668;
                      i = SharedPreUtils.a(paramQQAppInterface.getApp(), "readinjoy_search_jump_url_version", paramQQAppInterface.getCurrentAccountUin());
                      localConfigSeq.version.set(i);
                      break label1668;
                      try
                      {
                        if (!new File(PreloadManager.a(paramQQAppInterface)).exists()) {
                          SharedPreUtils.z(paramQQAppInterface.getApp(), paramQQAppInterface.getCurrentAccountUin(), 0);
                        }
                        i = SharedPreUtils.X(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
                        localConfigSeq.version.set(i);
                        if (!QLog.isColorLevel()) {
                          break label1668;
                        }
                        QLog.i("SPLASH_ConfigServlet", 2, "preloadConfigVersion:" + i);
                      }
                      catch (Exception localException)
                      {
                        for (;;)
                        {
                          localException.printStackTrace();
                        }
                      }
                    }
                  }
                }
              }
              i = SharedPreUtils.I(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
              localConfigSeq.version.set(i);
              break label1668;
              localConfigSeq.version.set(((MayknowRecommendManager)paramQQAppInterface.getManager(158)).a());
              break label1668;
              i = SharedPreUtils.J(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
              if (SharedPreUtils.F(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount()) != AppSetting.jdField_a_of_type_Int) {
                i = 0;
              }
              localConfigSeq.version.set(i);
              break label1668;
              i = SharedPreUtils.aO(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
              if (SharedPreUtils.aP(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount()) != AppSetting.jdField_a_of_type_Int) {
                i = 0;
              }
              localConfigSeq.version.set(i);
              break label1668;
              i = SharedPreUtils.aQ(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
              if (SharedPreUtils.aR(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount()) != AppSetting.jdField_a_of_type_Int) {
                i = 0;
              }
              localConfigSeq.version.set(i);
              break label1668;
              localReqGetConfig = DeviceProfileManager.a(paramQQAppInterface);
            }
            localConfigSeq.version.set(SharedPreUtils.O(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
            continue;
            localConfigSeq.version.set(PrecoverUtils.a(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
            localConfigSeq.compress.set(1);
            localObject5 = paramIntent.getStringExtra("key_province");
            localObject2 = localObject5;
            if (localObject5 == null) {
              localObject2 = "";
            }
            str = paramIntent.getStringExtra("key_city");
            localObject5 = str;
            if (str == null) {
              localObject5 = "";
            }
            localReqGetConfig.province.set((String)localObject2);
            localReqGetConfig.city.set((String)localObject5);
            continue;
            localConfigSeq.version.set(SharedPreUtils.q(paramQQAppInterface.getApp()));
            continue;
            localConfigSeq.version.set(SharedPreUtils.r(paramQQAppInterface.getApp()));
            continue;
            localConfigSeq.version.set(SharedPreUtils.Y(paramQQAppInterface.getApp(), paramQQAppInterface.getCurrentAccountUin()));
            continue;
            localConfigSeq.version.set(PublicAccountConfigUtil.a(paramQQAppInterface));
            continue;
            localObject2 = (TroopManager)paramQQAppInterface.getManager(51);
            localConfigSeq.version.set(((TroopManager)localObject2).jdField_a_of_type_Int);
            continue;
            localConfigSeq.version.set(SharedPreUtils.Z(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
            continue;
            localObject2 = (TroopTopicMgr)paramQQAppInterface.getManager(97);
            localConfigSeq.version.set(((TroopTopicMgr)localObject2).jdField_a_of_type_Int);
            continue;
            localConfigSeq.version.set(SharedPreUtils.aa(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
            continue;
            localConfigSeq.version.set(SharedPreUtils.U(paramQQAppInterface.getApp(), paramQQAppInterface.getCurrentAccountUin()));
            continue;
            localConfigSeq.version.set(SharedPreUtils.a(paramQQAppInterface.getApp(), "shop_tab", jdField_a_of_type_JavaLangString));
            continue;
            if (!ArtFilterManager.a(paramQQAppInterface.getCurrentAccountUin())) {
              SharedPreUtils.x(paramQQAppInterface.getApp(), paramQQAppInterface.getCurrentAccountUin(), 0);
            }
            localConfigSeq.version.set(SharedPreUtils.V(paramQQAppInterface.getApp(), paramQQAppInterface.getCurrentAccountUin()));
            continue;
            localObject2 = (OlympicManager)paramQQAppInterface.getManager(166);
            if (localObject2 != null)
            {
              ((OlympicManager)localObject2).c();
              localObject2 = ((OlympicManager)localObject2).a();
              i = 0;
              if (localObject2 != null) {
                i = ((OlympicActConfig)localObject2).version;
              }
              localConfigSeq.version.set(i);
              localConfigSeq.compress.set(1);
              paramIntent.putExtra("config_version", i);
              if (QLog.isColorLevel()) {
                QLog.d("Olympic.OLYMPIC_ACT_RESOURCE_CONFIG_INFO", 2, new Object[] { "oldVersion=", Integer.valueOf(i) });
              }
              if (OlympicUtil.a(BaseApplicationImpl.getContext(), "olympic_config_act_get"))
              {
                if (QLog.isColorLevel()) {
                  QLog.d("Olympic.configServlet", 2, new Object[] { "check24Hour, result=true, do Report, key=", "olympic_config_act_get" });
                }
                StatisticCollector.a(BaseApplicationImpl.getContext()).a("", "olympic_config_act_get", true, 0L, 0L, null, "", false);
                OlympicUtil.a(BaseApplicationImpl.getContext(), "olympic_config_act_get");
              }
            }
          }
          localObject2 = (ArResourceManager)paramQQAppInterface.getManager(167);
        } while (localObject2 == null);
        i2 = ((ArResourceManager)localObject2).b();
        m = 0;
        i = 0;
        localObject5 = BaseApplicationImpl.getApplication();
        j = m;
      }
    }
    for (;;)
    {
      for (;;)
      {
        try
        {
          int i3 = ((Context)localObject5).getPackageManager().getPackageInfo(((Context)localObject5).getPackageName(), 0).versionCode;
          j = m;
          m = ((ArResourceManager)localObject2).a();
          if ((m == 0) || (i3 != m)) {
            break label10459;
          }
          j = i;
          QLog.d("ArConfig_configServlet", 1, "handleResp_GetArResourceConfig|type= 1 version code is  " + i3 + "local version type is " + m);
        }
        catch (PackageManager.NameNotFoundException localNameNotFoundException)
        {
          localNameNotFoundException.printStackTrace();
          QLog.d("ArConfig_configServlet", 1, "handleResp_GetArResourceConfig|type= 1 error happen");
          i = j;
          continue;
          localConfigSeq.version.set(i2);
          continue;
        }
        if (i == 1)
        {
          localConfigSeq.version.set(0);
          localConfigSeq.compress.set(1);
          localObject5 = paramIntent.getStringExtra("key_province");
          localObject2 = localObject5;
          if (localObject5 == null) {
            localObject2 = "";
          }
          str = paramIntent.getStringExtra("key_city");
          localObject5 = str;
          if (str == null) {
            localObject5 = "";
          }
          localReqGetConfig.province.set((String)localObject2);
          localReqGetConfig.city.set((String)localObject5);
          paramIntent.putExtra("key_config_version", i2);
          break;
        }
        Object localObject3 = (ARGlobalConfigManager)paramQQAppInterface.getManager(219);
        if (localObject3 == null) {
          break;
        }
        i = ((ARGlobalConfigManager)localObject3).b();
        if (QLog.isColorLevel()) {
          QLog.d("handleResp_GetArGlobalConfig", 2, " local version = " + i);
        }
        if (((ARGlobalConfigManager)localObject3).a()) {
          localConfigSeq.version.set(i);
        }
        for (;;)
        {
          localConfigSeq.compress.set(1);
          paramIntent.putExtra("ar_global_key_config_version", i);
          break;
          i = 0;
          localConfigSeq.version.set(0);
        }
        localObject3 = (ARGlobalConfigManager)paramQQAppInterface.getManager(219);
        if (localObject3 == null) {
          break;
        }
        i = ((ARGlobalConfigManager)localObject3).c();
        localConfigSeq.version.set(i);
        localConfigSeq.compress.set(1);
        paramIntent.putExtra("ar_scan_star_face_config_version", i);
        if (!QLog.isColorLevel()) {
          break;
        }
        QLog.d("SPLASH_ConfigServlet", 2, " get AR_SCAN_STAR_FACE_CONFIG, version = " + i);
        break;
        i = FaceScanDownloadManager.a(paramQQAppInterface);
        localConfigSeq.version.set(i);
        localConfigSeq.compress.set(1);
        paramIntent.putExtra("key_download_cfg_version", i);
        if (!QLog.isColorLevel()) {
          break;
        }
        QLog.d("SPLASH_ConfigServlet", 2, " get AR_SCAN_FACE_PRE_DOWN_CONFIG, version = " + i);
        break;
        localObject3 = (ArResourceManager)paramQQAppInterface.getManager(167);
        if (localObject3 == null) {
          break;
        }
        i = ((ArResourceManager)localObject3).c();
        localConfigSeq.version.set(i);
        localConfigSeq.compress.set(1);
        paramIntent.putExtra("key_ar_entrance_effect_version", i);
        break;
        i = SharedPreUtils.a(paramQQAppInterface.getApp(), "push_open_notify_version", jdField_a_of_type_JavaLangString);
        localConfigSeq.version.set(i);
        break;
        i = SharedPreUtils.a(paramQQAppInterface.getApp(), "readinjoy_interested_push_config", jdField_a_of_type_JavaLangString);
        localConfigSeq.version.set(i);
        break;
        localObject3 = (PhoneContactManagerImp)paramQQAppInterface.getManager(10);
        localConfigSeq.version.set(((PhoneContactManagerImp)localObject3).e());
        break;
        i = EffectConfigBase.a(paramQQAppInterface.getApp(), i1);
        localConfigSeq.version.set(i);
        localConfigSeq.compress.set(1);
        break;
        i = SharedPreUtils.u(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
        localConfigSeq.version.set(i);
        localConfigSeq.compress.set(1);
        break;
        if (VoiceChangeData.a().a() != null) {
          localConfigSeq.version.set(VoiceChangeData.a().a());
        }
        for (;;)
        {
          localConfigSeq.compress.set(1);
          break;
          localConfigSeq.version.set(0);
        }
        if (AIOTopRightButtonConfig.a().b(paramQQAppInterface.c()) != null) {
          localConfigSeq.version.set(AIOTopRightButtonConfig.a().a(paramQQAppInterface.c()));
        }
        for (;;)
        {
          localConfigSeq.compress.set(1);
          break;
          localConfigSeq.version.set(0);
        }
        i = SharedPreUtils.a(paramQQAppInterface.getApplication());
        localConfigSeq.version.set(i);
        localConfigSeq.compress.set(1);
        break;
        i = CameraUtils.a(BaseApplicationImpl.getContext());
        localConfigSeq.version.set(i);
        localConfigSeq.compress.set(1);
        paramIntent.putExtra("qcamera_conf_version", i);
        paramIntent.putExtra("uin", paramQQAppInterface.getCurrentAccountUin());
        if (!QLog.isColorLevel()) {
          break;
        }
        QLog.i("Q.camera.configServlet", 2, "request QCAMERA_PHONE_CONFIG version: " + i);
        break;
        i = SharedPreUtils.a(paramQQAppInterface.getApp(), "change_machine_version", jdField_a_of_type_JavaLangString);
        localConfigSeq.version.set(i);
        break;
        i = SharedPreUtils.S(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "addAllConfigs|GET_CONFIG_UPGRADE version=" + i);
        }
        localConfigSeq.version.set(i);
        paramQQAppInterface.p();
        OpenConfig.a(paramQQAppInterface.getApp(), String.valueOf(AppSetting.jdField_a_of_type_Int));
        ((ConfigHandler)paramQQAppInterface.a(4)).c();
        break;
        i = SharedPreUtils.T(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
        localConfigSeq.version.set(i);
        if (!QLog.isColorLevel()) {
          break;
        }
        QLog.d("UpgradeTIMWrapper", 2, "ConfigServlet req :193, version: " + i);
        break;
        i = SharedPreUtils.a(paramQQAppInterface.getApp(), "now_entrance_action_version", jdField_a_of_type_JavaLangString);
        localConfigSeq.version.set(i);
        break;
        i = SharedPreUtils.a(paramQQAppInterface.getApp(), "troop_common_config_version", jdField_a_of_type_JavaLangString);
        localConfigSeq.version.set(i);
        break;
        i = SharedPreUtils.a(paramQQAppInterface.getApp(), "nearby_config_version", jdField_a_of_type_JavaLangString);
        localConfigSeq.version.set(i);
        break;
        i = SharedPreUtils.a(paramQQAppInterface.getApp(), "nearby_nowlive_tab_config_version", jdField_a_of_type_JavaLangString);
        localConfigSeq.version.set(i);
        break;
        localConfigSeq.version.set(SharedPreUtils.ab(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount()));
        localConfigSeq.compress.set(1);
        break;
        localObject3 = (BabyQHandler)paramQQAppInterface.a(53);
        if (localObject3 == null) {
          break;
        }
        i = AppSetting.jdField_a_of_type_Int;
        if (i != ((BabyQHandler)localObject3).b(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString))
        {
          ((BabyQHandler)localObject3).a(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 0);
          ((BabyQHandler)localObject3).b(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, i);
          ((BabyQHandler)localObject3).a(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, true);
          ((BabyQHandler)localObject3).d();
        }
        localConfigSeq.version.set(((BabyQHandler)localObject3).a(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
        break;
        localConfigSeq.version.set(SharedPreUtils.ac(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
        localConfigSeq.version.set(SharedPreUtils.ad(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
        localConfigSeq.compress.set(1);
        break;
        localConfigSeq.version.set(SharedPreUtils.K(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
        break;
        localConfigSeq.version.set(SearchConfigUtils.a());
        break;
        i = SearchEntryConfigManager.a(paramQQAppInterface.getApp(), paramQQAppInterface.getCurrentAccountUin());
        localConfigSeq.version.set(i);
        break;
        i = ((ARMapConfigManager)paramQQAppInterface.getManager(189)).a();
        localConfigSeq.version.set(i);
        l = paramIntent.getLongExtra("k_adcode", 0L);
        double d1 = paramIntent.getDoubleExtra("k_longitude", 0.0D);
        double d2 = paramIntent.getDoubleExtra("k_latitude", 0.0D);
        localObject5 = paramIntent.getStringExtra("key_province");
        localObject3 = localObject5;
        if (localObject5 == null) {
          localObject3 = "";
        }
        str = paramIntent.getStringExtra("key_city");
        localObject5 = str;
        if (str == null) {
          localObject5 = "";
        }
        localReqGetConfig.province.set((String)localObject3);
        localReqGetConfig.city.set((String)localObject5);
        localReqGetConfig.adcode.set(l);
        localReqGetConfig.int32_lon.set((int)(1000000.0D * d1));
        localReqGetConfig.int32_lat.set((int)(1000000.0D * d2));
        if (!QLog.isColorLevel()) {
          break;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "ConfigServlet GET_AR_MAP_CONFIG ,strProvince:" + (String)localObject3 + ",strCity:" + (String)localObject5 + ",adcode:" + l + ",longitude:" + d1 + ",latitude:" + d2 + ",arMapVersion:" + i);
        break;
        localConfigSeq.version.set(SharedPreUtils.L(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
        localConfigSeq.compress.set(1);
        break;
        localConfigSeq.version.set(SharedPreUtils.M(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
        break;
        i = SharedPreUtils.a(paramQQAppInterface.getApp(), "nearby_glamour_level_config_version", jdField_a_of_type_JavaLangString);
        localConfigSeq.version.set(i);
        localConfigSeq.compress.set(1);
        break;
        localConfigSeq.version.set(SharedPreUtils.aj(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
        break;
        if (SharedPreUtils.b(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 1) != AppSetting.jdField_a_of_type_Int)
        {
          SharedPreUtils.d(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 1, AppSetting.jdField_a_of_type_Int);
          SharedPreUtils.d(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 2, 0);
          localConfigSeq.version.set(0);
          break;
        }
        localConfigSeq.version.set(SharedPreUtils.b(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 2));
        break;
        try
        {
          if (((Integer)SharedPreUtils.a(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 1)).intValue() == AppSetting.jdField_a_of_type_Int) {
            break label6551;
          }
          SharedPreUtils.a(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 1, Integer.valueOf(AppSetting.jdField_a_of_type_Int));
          SharedPreUtils.a(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 2, Integer.valueOf(0));
          localConfigSeq.version.set(0);
        }
        catch (Throwable localThrowable)
        {
          localThrowable.printStackTrace();
        }
      }
      if (!QLog.isColorLevel()) {
        break;
      }
      QLog.i("SPLASH_ConfigServlet", 2, "PUSH_RECOMMEND_SHIELD_CONFIG", localThrowable);
      break;
      label6551:
      i = ((Integer)SharedPreUtils.a(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 2)).intValue();
      localConfigSeq.version.set(i);
      break;
      a(localConfigSeq, paramQQAppInterface, "batch_add_friend_for_troop_config");
      break;
      a(localConfigSeq, paramQQAppInterface, "confess_config");
      break;
      localConfigSeq.version.set(SharedPreUtils.A(paramQQAppInterface.getApp()));
      break;
      localConfigSeq.version.set(SharedPreUtils.am(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      break;
      if (!com.tencent.mobileqq.shortvideo.PtvTemplateManager.d()) {
        localConfigSeq.version.set(0);
      }
      for (;;)
      {
        localConfigSeq.compress.set(1);
        break;
        localConfigSeq.version.set(SharedPreUtils.m(paramQQAppInterface.getApp()));
      }
      localConfigSeq.version.set(SharedPreUtils.ak(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      break;
      localConfigSeq.version.set(SharedPreUtils.ao(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      localConfigSeq.compress.set(1);
      break;
      localConfigSeq.version.set(SharedPreUtils.aq(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      localConfigSeq.compress.set(1);
      break;
      localConfigSeq.version.set(HotPicManager.a(paramQQAppInterface));
      localConfigSeq.compress.set(1);
      break;
      localConfigSeq.version.set(FlashChatManager.a(paramQQAppInterface));
      localConfigSeq.compress.set(1);
      break;
      localConfigSeq.version.set(SharedPreUtils.av(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      localConfigSeq.compress.set(1);
      break;
      localConfigSeq.version.set(SharedPreUtils.ax(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      localConfigSeq.compress.set(1);
      break;
      Object localObject4 = (TroopStoryManager)paramQQAppInterface.getManager(207);
      localConfigSeq.version.set(((TroopStoryManager)localObject4).a.a(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      break;
      localConfigSeq.version.set(SharedPreUtils.au(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      localConfigSeq.compress.set(1);
      break;
      localConfigSeq.version.set(PublicAccountConfigUtil.c(paramQQAppInterface));
      break;
      i = SharedPreUtils.aG(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
      j = AppSetting.jdField_a_of_type_Int;
      if (i != j)
      {
        SharedPreUtils.V(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 0);
        SharedPreUtils.W(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, j);
      }
      for (;;)
      {
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "[Doutu]onsend : appIdRecord = " + i + ", appId = " + j + ", DOUTU_CONFI version = " + SharedPreUtils.aB(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
        }
        localConfigSeq.version.set(SharedPreUtils.aB(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
        localConfigSeq.compress.set(1);
        break;
        localObject4 = (DoutuManager)getAppRuntime().getManager(213);
        if (localObject4 != null) {
          ((DoutuManager)localObject4).b(false);
        }
      }
      i = SharedPreUtils.aI(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
      j = AppSetting.jdField_a_of_type_Int;
      if (i != j)
      {
        SharedPreUtils.aa(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 0);
        SharedPreUtils.Z(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, j);
      }
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "[VideoRedbag]onsend : appIdRecord = " + i + ", appId = " + j + ", VIDEO_REDBAG_CONFI version = " + SharedPreUtils.aJ(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      }
      localConfigSeq.version.set(SharedPreUtils.aJ(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      localConfigSeq.compress.set(1);
      break;
      i = SharedPreUtils.z(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
      j = AppSetting.jdField_a_of_type_Int;
      if (i != j)
      {
        SharedPreUtils.f(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 0);
        SharedPreUtils.e(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, j);
      }
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "[GreenVideo]onsend : appIdRecord = " + i + ", appId = " + j + ", GREEN_VIDEO_CONFI version = " + SharedPreUtils.A(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      }
      localConfigSeq.version.set(SharedPreUtils.A(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      localConfigSeq.compress.set(1);
      break;
      i = SharedPreUtils.B(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
      j = AppSetting.jdField_a_of_type_Int;
      if (i != j)
      {
        SharedPreUtils.h(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 0);
        SharedPreUtils.g(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, j);
      }
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "[VideoCompress]onsend : appIdRecord = " + i + ", appId = " + j + ", VIDEO_REDBAG_CONFI version = " + SharedPreUtils.aJ(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      }
      localConfigSeq.version.set(SharedPreUtils.C(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      localConfigSeq.compress.set(1);
      break;
      if (((Integer)NearbySPUtil.a(jdField_a_of_type_JavaLangString, "key_app_id", Integer.valueOf(0))).intValue() != AppSetting.jdField_a_of_type_Int)
      {
        NearbySPUtil.a(jdField_a_of_type_JavaLangString, "key_tabs_config_version", Integer.valueOf(0));
        NearbySPUtil.a(jdField_a_of_type_JavaLangString, "key_app_id", Integer.valueOf(AppSetting.jdField_a_of_type_Int));
      }
      i = ((Integer)NearbySPUtil.a(jdField_a_of_type_JavaLangString, "key_tabs_config_version", Integer.valueOf(0))).intValue();
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      localObject5 = paramIntent.getStringExtra("key_province");
      localObject4 = localObject5;
      if (localObject5 == null) {
        localObject4 = "";
      }
      str = paramIntent.getStringExtra("key_city");
      localObject5 = str;
      if (str == null) {
        localObject5 = "";
      }
      localReqGetConfig.province.set((String)localObject4);
      localReqGetConfig.city.set((String)localObject5);
      break;
      i = EffectBeautyTools.a(paramQQAppInterface.getApp());
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      localConfigSeq.version.set(SttManager.a(paramQQAppInterface));
      localConfigSeq.compress.set(1);
      break;
      localConfigSeq.version.set(SharedPreUtils.aA(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      localConfigSeq.compress.set(1);
      break;
      localConfigSeq.version.set(SharedPreUtils.aw(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      localConfigSeq.compress.set(1);
      break;
      localConfigSeq.version.set(SharedPreUtils.o(paramQQAppInterface.getApp()));
      localConfigSeq.compress.set(1);
      break;
      localConfigSeq.version.set(SharedPreUtils.p(paramQQAppInterface.getApp()));
      localConfigSeq.compress.set(1);
      break;
      localConfigSeq.version.set(PhotoListConfigManager.a(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      localConfigSeq.compress.set(1);
      break;
      localConfigSeq.version.set(SharedPreUtils.aE(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      localConfigSeq.compress.set(1);
      localObject5 = paramIntent.getStringExtra("key_province");
      localObject4 = localObject5;
      if (localObject5 == null) {
        localObject4 = "";
      }
      str = paramIntent.getStringExtra("key_city");
      localObject5 = str;
      if (str == null) {
        localObject5 = "";
      }
      localReqGetConfig.province.set((String)localObject4);
      localReqGetConfig.city.set((String)localObject5);
      break;
      localConfigSeq.version.set(SharedPreUtils.aF(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      localConfigSeq.compress.set(1);
      break;
      i = SharedPreUtils.a(paramQQAppInterface.getApp(), "change_machine_version", jdField_a_of_type_JavaLangString);
      localConfigSeq.version.set(i);
      break;
      i = SharedPreUtils.a(paramQQAppInterface.getApp(), "nearby_auth_video_config_version", jdField_a_of_type_JavaLangString);
      localConfigSeq.version.set(i);
      break;
      localConfigSeq.version.set(SharedPreUtils.aL(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      break;
      localConfigSeq.version.set(SharedPreUtils.B(paramQQAppInterface.getApp()));
      break;
      localConfigSeq.version.set(com.tencent.mobileqq.activity.richmedia.VideoFilterTools.a(paramQQAppInterface.getApp()));
      localConfigSeq.compress.set(1);
      break;
      localConfigSeq.version.set(CaptureVideoFilterManager.a(paramQQAppInterface.getApp()));
      localConfigSeq.compress.set(1);
      break;
      a(localReqGetConfig, localConfigSeq, paramQQAppInterface);
      break;
      i = SharedPreUtils.a(paramQQAppInterface.getApp(), "search_function_config_version", jdField_a_of_type_JavaLangString);
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      i = 0;
      if (SharedPreUtils.e(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, "campus_circle_config") != AppSetting.jdField_a_of_type_Int)
      {
        SharedPreUtils.e(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, "campus_circle_config", AppSetting.jdField_a_of_type_Int);
        SharedPreUtils.d(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, "campus_circle_config", 0);
      }
      for (;;)
      {
        localConfigSeq.version.set(i);
        localConfigSeq.compress.set(1);
        break;
        i = SharedPreUtils.d(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, "campus_circle_config");
      }
      i = ((OCRManager)paramQQAppInterface.getManager(227)).a();
      localConfigSeq.version.set(i);
      if (!QLog.isColorLevel()) {
        break;
      }
      QLog.i("SPLASH_ConfigServlet", 2, "ConfigServlet OCR_CONFIG ocrVersion:" + i);
      break;
      i = ((AVRedPacketConfigManager)paramQQAppInterface.getManager(253)).a();
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      if (!QLog.isColorLevel()) {
        break;
      }
      QLog.i("SPLASH_ConfigServlet", 2, "ConfigServlet AV_REDPACKET_CONFIG localVersion =" + i);
      break;
      i = SharedPreUtils.aN(BaseApplicationImpl.getContext(), jdField_a_of_type_JavaLangString);
      localConfigSeq.version.set(i);
      if (!QLog.isColorLevel()) {
        break;
      }
      QLog.i("SPLASH_ConfigServlet", 2, "ConfigServlet receipt ,receiptVersion:" + i);
      break;
      i = ShortVideoResourceManager.a();
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      if (QLog.isColorLevel()) {
        QLog.i("ShortVideoResourceManager", 2, "SHORT_VIDEO_RESOURCE_CONFIG  ,versionRes:" + i);
      }
      ShortVideoResourceManager.a();
      break;
      i = SignalStrengthReport.a(paramQQAppInterface.getApp());
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      i = paramQQAppInterface.getPreferences().getInt("public_account_ad_preload_task", 0);
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      i = paramQQAppInterface.getPreferences().getInt("tim_login_jump", 0);
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      RDConfigServletProxy.a(paramQQAppInterface, localConfigSeq, true, jdField_a_of_type_JavaLangString);
      break;
      i = paramQQAppInterface.getPreferences().getInt("tim_upgrade_hongdian_version", 0);
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      i = paramQQAppInterface.getPreferences().getInt("campus_switch_config_version", 0);
      localConfigSeq.version.set(i);
      break;
      localConfigSeq.version.set(paramQQAppInterface.getPreferences().getInt("call_tim_config_version", 0));
      break;
      i = paramQQAppInterface.getPreferences().getInt("tim_pc_banner", 0);
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      i = paramQQAppInterface.getPreferences().getInt("troop_link_config_version", 0);
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      i = paramQQAppInterface.getPreferences().getInt("key_game_troop_bind_config_version", 0);
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      i = SharedPreUtils.d(paramQQAppInterface.getApp());
      localConfigSeq.version.set(i);
      break;
      i = paramQQAppInterface.getPreferences().getInt("tim_aio_tips_bar_version", 0);
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      i = QmcfDevicesStrategy.a(paramQQAppInterface.getApp());
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      i = paramQQAppInterface.getPreferences().getInt("pic_light_reply_version_new", 0);
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      i = paramQQAppInterface.getPreferences().getInt("data_migration_tim_version", 0);
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      i = paramQQAppInterface.getPreferences().getInt("tim_convert_teamwork", 0);
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      i = SharedPreUtils.a(paramQQAppInterface.getApp(), "nearby_videochat_dialog_config_version", jdField_a_of_type_JavaLangString);
      localConfigSeq.version.set(i);
      break;
      i = SharedPreUtils.a(paramQQAppInterface.getApp(), "nearby_videochat_banner_config_version", jdField_a_of_type_JavaLangString);
      localConfigSeq.version.set(i);
      break;
      i = paramQQAppInterface.getPreferences().getInt("zhitu_config_version", 0);
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      i = paramQQAppInterface.getPreferences().getInt("homework_troop_config_version", 0);
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      localObject4 = (TroopManager)paramQQAppInterface.getManager(51);
      localConfigSeq.version.set(((TroopManager)localObject4).jdField_a_of_type_ComTencentMobileqqTroopHomeworkConfigHomeworkConfig.a(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      localConfigSeq.compress.set(1);
      break;
      localObject4 = (TroopManager)paramQQAppInterface.getManager(51);
      localConfigSeq.version.set(((TroopManager)localObject4).jdField_a_of_type_ComTencentMobileqqTroopHomeworkReciteConfigReciteConfig.a(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      localConfigSeq.compress.set(1);
      break;
      i = paramQQAppInterface.getPreferences().getInt("now_enter_config_version" + paramQQAppInterface.c(), 0);
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      i = RecentDanceConfigMgr.a();
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      localConfigSeq.version.set(SharedPreUtils.a(paramQQAppInterface.getApp(), "sport_config", jdField_a_of_type_JavaLangString));
      localConfigSeq.compress.set(1);
      break;
      i = SharedPreUtils.a(paramQQAppInterface.getApplication(), "troop_gift_anim_limit", "0");
      localConfigSeq.version.set(i);
      break;
      i = paramQQAppInterface.getPreferences().getInt("task_entry_config_version", 0);
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      i = SharedPreUtils.a(paramQQAppInterface.getApp(), "apollo_new_store_config_version", jdField_a_of_type_JavaLangString);
      localConfigSeq.version.set(i);
      break;
      i = paramQQAppInterface.getPreferences().getInt("qzone_xp_config_version", 0);
      localConfigSeq.version.set(i);
      break;
      i = paramQQAppInterface.getPreferences().getInt("teamwork_tips_version", 0);
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      i = paramQQAppInterface.getPreferences().getInt("buluo_enter_config_version" + paramQQAppInterface.c(), 0);
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      i = SharedPreUtils.aU(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
      if (SharedPreUtils.aV(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount()) != AppSetting.jdField_a_of_type_Int) {
        i = 0;
      }
      localConfigSeq.version.set(i);
      break;
      i = SVParamManager.a().a(paramQQAppInterface.getApp());
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      if (!QIMPtvTemplateManager.a()) {
        localConfigSeq.version.set(0);
      }
      for (;;)
      {
        localConfigSeq.compress.set(1);
        break;
        localConfigSeq.version.set(SharedPreUtils.F(paramQQAppInterface.getApp()));
      }
      if (!QIMMusicConfigManager.a()) {
        localConfigSeq.version.set(0);
      }
      for (;;)
      {
        localConfigSeq.compress.set(1);
        break;
        localConfigSeq.version.set(SharedPreUtils.D(paramQQAppInterface.getApp()));
      }
      if (!DynamicTextConfigManager.b()) {
        localConfigSeq.version.set(0);
      }
      for (;;)
      {
        localConfigSeq.compress.set(1);
        break;
        localConfigSeq.version.set(SharedPreUtils.a(paramQQAppInterface.getApp()));
      }
      if (!QIMPasterConfigManager.a()) {
        localConfigSeq.version.set(0);
      }
      for (;;)
      {
        localConfigSeq.compress.set(1);
        break;
        localConfigSeq.version.set(SharedPreUtils.E(paramQQAppInterface.getApp()));
      }
      i = dov.com.tencent.mobileqq.activity.richmedia.VideoFilterTools.a(paramQQAppInterface.getApp());
      localConfigSeq.version.set(i);
      localConfigSeq.compress.set(1);
      break;
      localConfigSeq.version.set(SharedPreUtils.ae(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString));
      localConfigSeq.compress.set(1);
      break;
      if (QLog.isColorLevel())
      {
        i = localArrayList2.size();
        paramQQAppInterface = localArrayList2.iterator();
        while (paramQQAppInterface.hasNext())
        {
          paramArrayOfInt = (Integer)paramQQAppInterface.next();
          QLog.d("SPLASH_ConfigServlet", 2, "addAllConfigs|send type: " + paramArrayOfInt + ",length: " + i);
        }
      }
      paramQQAppInterface = new ConfigurationService.DeviceInfo();
      if ((localArrayList2.contains(Integer.valueOf(1))) || (localArrayList2.contains(Integer.valueOf(2))) || (localArrayList2.contains(Integer.valueOf(3))) || (localArrayList2.contains(Integer.valueOf(18))) || (localArrayList2.contains(Integer.valueOf(12))))
      {
        paramArrayOfInt = new ConfigurationService.Screen();
        paramArrayOfInt.setHasFlag(true);
        paramArrayOfInt.width.set((int)DeviceInfoUtil.j());
        paramArrayOfInt.height.set((int)DeviceInfoUtil.k());
        paramQQAppInterface.screen = paramArrayOfInt;
        paramQQAppInterface.setHasFlag(true);
        localReqGetConfig.device_info = paramQQAppInterface;
      }
      if ((localArrayList2.contains(Integer.valueOf(47))) || (localArrayList2.contains(Integer.valueOf(65))) || (localArrayList2.contains(Integer.valueOf(156))) || (localArrayList2.contains(Integer.valueOf(297))))
      {
        paramArrayOfInt = new ConfigurationService.OS();
        paramArrayOfInt.setHasFlag(true);
        paramArrayOfInt.type.set(2);
        paramArrayOfInt.kernel.set(DeviceInfoUtil.n());
        paramArrayOfInt.sdk.set(String.valueOf(DeviceInfoUtil.a()));
        paramArrayOfInt.version.set(DeviceInfoUtil.f());
        paramArrayOfInt.rom.set(DeviceInfoUtil.k());
        paramQQAppInterface.brand.set(DeviceInfoUtil.i());
        paramQQAppInterface.model.set(DeviceInfoUtil.e());
        paramQQAppInterface.os = paramArrayOfInt;
        paramQQAppInterface.setHasFlag(true);
        localReqGetConfig.device_info = paramQQAppInterface;
      }
      localReqGetConfig.setHasFlag(true);
      localReqGetConfig.seq_list.addAll(localArrayList1);
      if (paramIntent != null)
      {
        bool = paramIntent.getBooleanExtra("key_is_page_req", false);
        paramQQAppInterface = localReqGetConfig.is_page_req;
        if (!bool) {
          break label10453;
        }
      }
      label10453:
      for (i = 1;; i = 0)
      {
        paramQQAppInterface.set(i);
        paramQQAppInterface = paramIntent.getByteArrayExtra("key_cookies");
        if (paramQQAppInterface != null) {
          localReqGetConfig.cookies.set(ByteStringMicro.copyFrom(paramQQAppInterface));
        }
        paramQQAppInterface = a(localReqGetConfig);
        if ((paramQQAppInterface != null) && (paramQQAppInterface.length > 0)) {
          paramPacket.putSendData(paramQQAppInterface);
        }
        paramPacket.setSSOCommand("ConfigurationService.ReqGetConfig");
        return;
      }
      label10459:
      i = 1;
    }
  }
  
  private void a(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig, String paramString)
  {
    if (TextUtils.isEmpty(paramString))
    {
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, " handleConfigForTag tag is null !");
      }
      return;
    }
    Object localObject3 = null;
    Object localObject1 = null;
    Object localObject2 = null;
    int i = 0;
    int j = paramConfig.version.get();
    int k = SharedPreUtils.d(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, paramString);
    if (j != k)
    {
      if (paramConfig.msg_content_list.size() <= 0) {
        break label461;
      }
      paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
      if (paramConfig != null) {
        break label330;
      }
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, " handleConfigForTag content is null !");
      }
      i = 1;
      paramConfig = localObject2;
      label111:
      localObject1 = paramConfig;
      label114:
      paramConfig = (ConfigurationService.Config)localObject1;
      if (localObject1 == null) {
        paramConfig = "";
      }
      if (i == 0)
      {
        if (!"confess_config".equals(paramString)) {
          break label471;
        }
        SharedPreUtils.a(jdField_a_of_type_JavaLangString, "confess_config_sp").edit().putString("confess_config", paramConfig).apply();
        if (paramQQAppInterface.a(268))
        {
          localObject1 = ((ConfessManager)paramQQAppInterface.getManager(268)).a();
          if (localObject1 != null)
          {
            ((ConfessConfig)localObject1).a(paramConfig, false);
            ((ConfessHandler)paramQQAppInterface.a(125)).a(paramQQAppInterface, (ConfessConfig)localObject1);
          }
        }
      }
    }
    for (;;)
    {
      if (("batch_add_friend_for_troop_config".equals(paramString)) && (paramQQAppInterface.a(51))) {
        ((TroopManager)paramQQAppInterface.getManager(51)).a().a(paramConfig);
      }
      SharedPreUtils.d(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, paramString, j);
      localObject1 = paramConfig;
      if (!QLog.isColorLevel()) {
        break;
      }
      QLog.i("SPLASH_ConfigServlet", 2, String.format(Locale.getDefault(), "handleConfigForTag tag: %s, localVersion: %s, version: %s, result: %s, strContent: %s", new Object[] { paramString, Integer.valueOf(k), Integer.valueOf(j), Integer.valueOf(i), localObject1 }));
      return;
      label330:
      if (paramConfig.compress.get() == 1)
      {
        paramConfig = OlympicUtil.a(paramConfig.content.get().toByteArray());
        if (paramConfig != null) {}
        for (;;)
        {
          try
          {
            paramConfig = new String(paramConfig, "UTF-8");
            i = 0;
          }
          catch (Throwable paramConfig)
          {
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet", 2, " handleConfigForTag Throwable:" + paramConfig.getMessage());
            }
            i = 2;
            paramConfig = null;
            continue;
          }
          i = 3;
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, " handleConfigForTag inflateConfigString error!");
          }
          paramConfig = null;
        }
      }
      paramConfig = paramConfig.content.get().toStringUtf8();
      i = 0;
      break label111;
      label461:
      i = 4;
      localObject1 = localObject3;
      break label114;
      label471:
      SharedPreUtils.a(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, paramString, paramConfig);
    }
  }
  
  public static void a(QQAppInterface paramQQAppInterface, String paramString)
  {
    jdField_a_of_type_JavaLangString = paramString;
    NewIntent localNewIntent = new NewIntent(paramQQAppInterface.getApp(), ConfigServlet.class);
    localNewIntent.putExtra("k_cmd_type", jdField_a_of_type_ArrayOfInt);
    localNewIntent.putExtra("key_uin", paramString);
    localNewIntent.putExtra("k_req_occasion", 0);
    localNewIntent.putExtra("key_is_all_config", true);
    paramQQAppInterface.startServlet(localNewIntent);
  }
  
  public static void a(QQAppInterface paramQQAppInterface, String paramString, int paramInt)
  {
    if ((paramQQAppInterface == null) || (TextUtils.isEmpty(paramString))) {
      if (QLog.isColorLevel()) {
        QLog.d("Q.nearby", 2, "HOTCHAT_SCENE_CONFIGS_CMD, app is null, or uin is empty");
      }
    }
    do
    {
      do
      {
        return;
        if ((paramInt == -1) || (SharedPreUtils.t(paramQQAppInterface.getApp()) != paramInt)) {
          break;
        }
      } while (!QLog.isColorLevel());
      QLog.d("Q.nearby", 2, "HOTCHAT_SCENE_CONFIGS_CMD, same version " + paramInt);
      return;
      jdField_a_of_type_JavaLangString = paramString;
      a(paramQQAppInterface, 49);
    } while (!QLog.isColorLevel());
    QLog.d("Q.nearby", 2, "HOTCHAT_SCENE_CONFIGS_CMD, " + paramInt);
  }
  
  public static void a(QQAppInterface paramQQAppInterface, String paramString1, int paramInt, String paramString2)
  {
    if ((paramQQAppInterface == null) || (TextUtils.isEmpty(paramString1)))
    {
      QLog.d("PatchLogTag", 1, "getPatchConfig app is null or uin is empty");
      return;
    }
    if ((paramInt != -1) && (PatchSharedPreUtil.a(paramQQAppInterface.getApplication()) == paramInt))
    {
      QLog.d("PatchLogTag", 1, "getPatchConfig same version=" + paramInt + ", reason=" + paramString2);
      return;
    }
    jdField_a_of_type_JavaLangString = paramString1;
    a(paramQQAppInterface, 46);
    QLog.d("PatchLogTag", 1, "getPatchConfig version=" + paramInt + ", reason=" + paramString2);
  }
  
  private void a(ConfigurationService.Config paramConfig, int paramInt, String paramString)
  {
    try
    {
      if ((paramConfig.content_list == null) || (paramConfig.content_list.size() <= 0)) {
        break label622;
      }
      k = 0;
      j = 0;
      i = 0;
    }
    catch (Exception paramConfig)
    {
      for (;;)
      {
        String str;
        JSONObject localJSONObject;
        label622:
        if (QLog.isColorLevel()) {
          QLog.e("SPLASH_ConfigServlet", 2, "error: " + paramConfig.toString());
        }
        paramConfig.printStackTrace();
        continue;
        int m = j;
        int j = i;
        int i = m;
        label718:
        m = k + 1;
        int k = j;
        j = i;
        i = k;
        k = m;
      }
    }
    if (k < paramConfig.content_list.size())
    {
      str = (String)paramConfig.content_list.get(k);
      localJSONObject = new JSONObject(str);
      if (localJSONObject.has("apolloSwitch"))
      {
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 67,content: " + str + ",version: " + paramConfig.version.get());
        }
        ApolloConfigUtils.a(str, getAppRuntime().getApplication());
        FileUtils.a(ApolloConstant.jdField_a_of_type_JavaLangString + "/apolloConfig.json", str);
        m = i;
        i = j;
        j = m;
        break label718;
      }
      if (localJSONObject.has("stepUrl"))
      {
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 67,content: " + str + ",version: " + paramConfig.version.get());
        }
        ApolloConfigUtils.a(str);
        FileUtils.a(ApolloConstant.jdField_a_of_type_JavaLangString + "/apolloStepConfig" + paramString + ".json", str);
        i = j;
        j = 1;
        break label718;
      }
      if (localJSONObject.has("weatherConfig"))
      {
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 67,content: " + str + ",version: " + paramConfig.version.get());
        }
        ApolloConfigUtils.b(str);
        FileUtils.a(ApolloConstant.jdField_a_of_type_JavaLangString + "/apolloWeatherConfig" + paramString + ".json", str);
        m = 1;
        j = i;
        i = m;
        break label718;
      }
    }
    else
    {
      if ((i == 0) && (FileUtils.a(ApolloConstant.jdField_a_of_type_JavaLangString + "/apolloStepConfig" + paramString + ".json")))
      {
        QLog.d("SPLASH_ConfigServlet", 1, "apollo config has not stepConfig so delete local file");
        FileUtils.d(ApolloConstant.jdField_a_of_type_JavaLangString + "/apolloStepConfig" + paramString + ".json");
      }
      if ((j == 0) && (FileUtils.a(ApolloConstant.jdField_a_of_type_JavaLangString + "/apolloWeatherConfig" + paramString + ".json")))
      {
        QLog.d("SPLASH_ConfigServlet", 1, "apollo config has not weatherConfig so delete local file");
        FileUtils.d(ApolloConstant.jdField_a_of_type_JavaLangString + "/apolloWeatherConfig" + paramString + ".json");
      }
      paramConfig = (QQAppInterface)getAppRuntime();
      if (paramConfig != null) {
        ((ApolloManager)paramConfig.getManager(152)).h();
      }
      for (;;)
      {
        SharedPreUtils.p(getAppRuntime().getApplication(), paramString, paramInt);
        return;
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 67,content_list is empty ,version: " + paramConfig.version.get());
        }
      }
    }
  }
  
  /* Error */
  private void a(ConfigurationService.Config paramConfig, QQAppInterface paramQQAppInterface)
  {
    // Byte code:
    //   0: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   3: ifeq +12 -> 15
    //   6: ldc 63
    //   8: iconst_2
    //   9: ldc_w 2670
    //   12: invokestatic 141	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/String;)V
    //   15: aload_1
    //   16: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   19: ifnull +419 -> 438
    //   22: aload_1
    //   23: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   26: invokevirtual 117	com/tencent/mobileqq/pb/PBRepeatMessageField:size	()I
    //   29: ifle +409 -> 438
    //   32: aload_1
    //   33: getfield 73	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:version	Lcom/tencent/mobileqq/pb/PBInt32Field;
    //   36: invokevirtual 79	com/tencent/mobileqq/pb/PBInt32Field:get	()I
    //   39: istore_3
    //   40: aload_2
    //   41: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   44: ldc_w 1814
    //   47: aload_2
    //   48: invokevirtual 289	com/tencent/mobileqq/app/QQAppInterface:getCurrentAccountUin	()Ljava/lang/String;
    //   51: invokestatic 985	com/tencent/mobileqq/utils/SharedPreUtils:a	(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)I
    //   54: istore 4
    //   56: iload_3
    //   57: iload 4
    //   59: if_icmpeq +335 -> 394
    //   62: aload_2
    //   63: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   66: ldc_w 1814
    //   69: aload_2
    //   70: invokevirtual 289	com/tencent/mobileqq/app/QQAppInterface:getCurrentAccountUin	()Ljava/lang/String;
    //   73: iload_3
    //   74: invokestatic 997	com/tencent/mobileqq/utils/SharedPreUtils:a	(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;I)V
    //   77: aload_1
    //   78: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   81: invokevirtual 101	com/tencent/mobileqq/pb/PBRepeatMessageField:get	()Ljava/util/List;
    //   84: invokeinterface 229 1 0
    //   89: astore 6
    //   91: aload 6
    //   93: invokeinterface 234 1 0
    //   98: ifeq +226 -> 324
    //   101: aload 6
    //   103: invokeinterface 238 1 0
    //   108: checkcast 149	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content
    //   111: astore 5
    //   113: aload 5
    //   115: ifnull +261 -> 376
    //   118: aload 5
    //   120: getfield 917	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:content	Lcom/tencent/mobileqq/pb/PBBytesField;
    //   123: invokevirtual 1369	com/tencent/mobileqq/pb/PBBytesField:has	()Z
    //   126: ifeq +250 -> 376
    //   129: aload 5
    //   131: getfield 913	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:compress	Lcom/tencent/mobileqq/pb/PBUInt32Field;
    //   134: invokevirtual 156	com/tencent/mobileqq/pb/PBUInt32Field:get	()I
    //   137: iconst_1
    //   138: if_icmpne +222 -> 360
    //   141: aload 5
    //   143: getfield 917	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:content	Lcom/tencent/mobileqq/pb/PBBytesField;
    //   146: invokevirtual 922	com/tencent/mobileqq/pb/PBBytesField:get	()Lcom/tencent/mobileqq/pb/ByteStringMicro;
    //   149: invokevirtual 928	com/tencent/mobileqq/pb/ByteStringMicro:toByteArray	()[B
    //   152: invokestatic 933	com/tencent/mobileqq/olympic/utils/OlympicUtil:a	([B)[B
    //   155: astore 5
    //   157: aload 5
    //   159: ifnull +301 -> 460
    //   162: new 240	java/lang/String
    //   165: dup
    //   166: aload 5
    //   168: ldc_w 935
    //   171: invokespecial 938	java/lang/String:<init>	([BLjava/lang/String;)V
    //   174: astore 5
    //   176: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   179: ifeq +62 -> 241
    //   182: ldc 63
    //   184: iconst_2
    //   185: new 122	java/lang/StringBuilder
    //   188: dup
    //   189: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   192: ldc_w 2672
    //   195: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   198: aload_1
    //   199: getfield 90	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:type	Lcom/tencent/mobileqq/pb/PBInt32Field;
    //   202: invokevirtual 79	com/tencent/mobileqq/pb/PBInt32Field:get	()I
    //   205: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   208: ldc_w 2674
    //   211: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   214: aload_1
    //   215: getfield 73	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:version	Lcom/tencent/mobileqq/pb/PBInt32Field;
    //   218: invokevirtual 79	com/tencent/mobileqq/pb/PBInt32Field:get	()I
    //   221: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   224: ldc_w 2676
    //   227: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   230: aload 5
    //   232: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   235: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   238: invokestatic 141	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/String;)V
    //   241: aload 5
    //   243: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   246: ifne -155 -> 91
    //   249: aload_2
    //   250: invokevirtual 2308	com/tencent/mobileqq/app/QQAppInterface:getPreferences	()Landroid/content/SharedPreferences;
    //   253: invokeinterface 645 1 0
    //   258: new 122	java/lang/StringBuilder
    //   261: dup
    //   262: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   265: ldc_w 2678
    //   268: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   271: aload_2
    //   272: invokevirtual 289	com/tencent/mobileqq/app/QQAppInterface:getCurrentAccountUin	()Ljava/lang/String;
    //   275: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   278: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   281: aload 5
    //   283: invokeinterface 1088 3 0
    //   288: invokeinterface 656 1 0
    //   293: pop
    //   294: aload_2
    //   295: aload 5
    //   297: invokestatic 2680	com/tencent/biz/pubaccount/util/PublicAccountConfigUtil:b	(Lcom/tencent/mobileqq/app/QQAppInterface;Ljava/lang/String;)V
    //   300: goto -209 -> 91
    //   303: astore_1
    //   304: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   307: ifeq +13 -> 320
    //   310: ldc 63
    //   312: iconst_2
    //   313: ldc_w 2682
    //   316: aload_1
    //   317: invokestatic 805	com/tencent/qphone/base/util/QLog:e	(Ljava/lang/String;ILjava/lang/String;Ljava/lang/Throwable;)V
    //   320: aload_1
    //   321: invokevirtual 605	java/lang/Exception:printStackTrace	()V
    //   324: return
    //   325: astore 5
    //   327: ldc 63
    //   329: iconst_1
    //   330: new 122	java/lang/StringBuilder
    //   333: dup
    //   334: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   337: ldc_w 2684
    //   340: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   343: aload 5
    //   345: invokevirtual 134	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   348: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   351: invokestatic 615	com/tencent/qphone/base/util/QLog:e	(Ljava/lang/String;ILjava/lang/String;)V
    //   354: aconst_null
    //   355: astore 5
    //   357: goto -181 -> 176
    //   360: aload 5
    //   362: getfield 917	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:content	Lcom/tencent/mobileqq/pb/PBBytesField;
    //   365: invokevirtual 922	com/tencent/mobileqq/pb/PBBytesField:get	()Lcom/tencent/mobileqq/pb/ByteStringMicro;
    //   368: invokevirtual 972	com/tencent/mobileqq/pb/ByteStringMicro:toStringUtf8	()Ljava/lang/String;
    //   371: astore 5
    //   373: goto -197 -> 176
    //   376: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   379: ifeq -288 -> 91
    //   382: ldc 63
    //   384: iconst_2
    //   385: ldc_w 2686
    //   388: invokestatic 141	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/String;)V
    //   391: goto -300 -> 91
    //   394: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   397: ifeq -73 -> 324
    //   400: ldc 63
    //   402: iconst_2
    //   403: new 122	java/lang/StringBuilder
    //   406: dup
    //   407: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   410: ldc_w 2688
    //   413: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   416: iload_3
    //   417: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   420: ldc_w 296
    //   423: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   426: iload 4
    //   428: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   431: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   434: invokestatic 141	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/String;)V
    //   437: return
    //   438: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   441: ifeq +12 -> 453
    //   444: ldc 63
    //   446: iconst_2
    //   447: ldc_w 2690
    //   450: invokestatic 141	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/String;)V
    //   453: ldc_w 2692
    //   456: putstatic 2693	com/tencent/biz/pubaccount/util/PublicAccountConfigUtil:d	Ljava/lang/String;
    //   459: return
    //   460: aconst_null
    //   461: astore 5
    //   463: goto -287 -> 176
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	466	0	this	ConfigServlet
    //   0	466	1	paramConfig	ConfigurationService.Config
    //   0	466	2	paramQQAppInterface	QQAppInterface
    //   39	378	3	i	int
    //   54	373	4	j	int
    //   111	185	5	localObject	Object
    //   325	19	5	localException	Exception
    //   355	107	5	str	String
    //   89	13	6	localIterator	Iterator
    // Exception table:
    //   from	to	target	type
    //   15	56	303	java/lang/Exception
    //   62	91	303	java/lang/Exception
    //   91	113	303	java/lang/Exception
    //   118	157	303	java/lang/Exception
    //   176	241	303	java/lang/Exception
    //   241	300	303	java/lang/Exception
    //   327	354	303	java/lang/Exception
    //   360	373	303	java/lang/Exception
    //   376	391	303	java/lang/Exception
    //   394	437	303	java/lang/Exception
    //   438	453	303	java/lang/Exception
    //   453	459	303	java/lang/Exception
    //   162	176	325	java/lang/Exception
  }
  
  private void a(ConfigurationService.ConfigSeq paramConfigSeq, QQAppInterface paramQQAppInterface, String paramString)
  {
    if (TextUtils.isEmpty(paramString))
    {
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, " initConfigVersionForTag tag is null !");
      }
      return;
    }
    if (SharedPreUtils.e(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, paramString) != AppSetting.jdField_a_of_type_Int)
    {
      SharedPreUtils.e(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, paramString, AppSetting.jdField_a_of_type_Int);
      SharedPreUtils.d(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, paramString, 0);
      paramConfigSeq.version.set(0);
      return;
    }
    int i = SharedPreUtils.d(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, paramString);
    paramConfigSeq.version.set(i);
  }
  
  private void a(ConfigurationService.ReqGetConfig paramReqGetConfig, ConfigurationService.ConfigSeq paramConfigSeq, QQAppInterface paramQQAppInterface)
  {
    int i;
    ArrayList localArrayList;
    for (;;)
    {
      try
      {
        if (SharedPreUtils.aC(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString) != AppSetting.jdField_a_of_type_Int)
        {
          SharedPreUtils.R(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, AppSetting.jdField_a_of_type_Int);
          SharedPreUtils.S(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 0);
          i = 0;
          paramConfigSeq.version.set(i);
          localArrayList = DeviceInfoUtil.a();
          if ((localArrayList == null) || (localArrayList.size() <= 0)) {
            break;
          }
          paramConfigSeq = localArrayList.iterator();
          if (!paramConfigSeq.hasNext()) {
            break;
          }
          localObject = (Integer)paramConfigSeq.next();
          paramReqGetConfig.carriers.add(localObject);
          continue;
          return;
        }
      }
      catch (Exception paramReqGetConfig)
      {
        if (QLog.isColorLevel()) {
          QLog.i("CU_OPEN_CARD_GUIDE", 2, "onGetCUOpenCardGuideConfig", paramReqGetConfig);
        }
      }
      i = SharedPreUtils.aD(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
    }
    Object localObject = ((PhoneContactManager)paramQQAppInterface.getManager(10)).a();
    if (localObject != null)
    {
      paramQQAppInterface = ((RespondQueryQQBindingStat)localObject).nationCode;
      paramConfigSeq = paramQQAppInterface;
      if (paramQQAppInterface != null)
      {
        paramConfigSeq = paramQQAppInterface;
        if (paramQQAppInterface.startsWith("+")) {
          paramConfigSeq = paramQQAppInterface.substring(1);
        }
      }
      if ((TextUtils.isEmpty(paramConfigSeq)) && (TextUtils.isEmpty(((RespondQueryQQBindingStat)localObject).mobileNo))) {
        paramConfigSeq = "";
      }
    }
    for (;;)
    {
      if (!TextUtils.isEmpty(paramConfigSeq)) {
        paramReqGetConfig.bind_phone_no.set(paramConfigSeq);
      }
      if (!QLog.isColorLevel()) {
        break;
      }
      paramReqGetConfig = new StringBuilder(100);
      paramReqGetConfig.append("onGetCUOpenCardGuideConfig reqVersion=").append(i).append(", bindPhoneNum=").append(paramConfigSeq);
      paramReqGetConfig.append(", carrier[");
      if ((localArrayList != null) && (localArrayList.size() > 0))
      {
        paramConfigSeq = localArrayList.iterator();
        for (;;)
        {
          if (paramConfigSeq.hasNext())
          {
            paramReqGetConfig.append((Integer)paramConfigSeq.next()).append(",");
            continue;
            Locale localLocale = Locale.getDefault();
            paramQQAppInterface = paramConfigSeq;
            if (paramConfigSeq == null) {
              paramQQAppInterface = "";
            }
            paramConfigSeq = String.format(localLocale, "%s-%s", new Object[] { paramQQAppInterface, ((RespondQueryQQBindingStat)localObject).mobileNo });
            break;
          }
        }
      }
      paramReqGetConfig.append("]");
      QLog.i("CU_OPEN_CARD_GUIDE", 2, paramReqGetConfig.toString());
      return;
      paramConfigSeq = "";
    }
  }
  
  private void a(ConfigurationService.RespGetConfig paramRespGetConfig, QQAppInterface paramQQAppInterface, Intent paramIntent, int[] paramArrayOfInt, boolean paramBoolean)
  {
    int i;
    label55:
    int j;
    Object localObject1;
    Object localObject2;
    int k;
    long l1;
    ArrayList localArrayList;
    boolean bool;
    Object localObject3;
    label2373:
    label4052:
    label4349:
    int m;
    if ((!paramBoolean) || (paramRespGetConfig.result.get() != 0) || (paramRespGetConfig.config_list == null) || (paramRespGetConfig.config_list.size() == 0))
    {
      if (!paramBoolean)
      {
        if (QLog.isColorLevel()) {
          QLog.i("SPLASH_ConfigServlet", 2, "receiveAllConfigs|isSuccess == false");
        }
        i = 0;
        if (i >= paramArrayOfInt.length) {
          break label12041;
        }
        j = paramArrayOfInt[i];
        if (QLog.isColorLevel()) {
          QLog.i("SPLASH_ConfigServlet", 2, "receiveAllConfigs|failed type: " + j);
        }
        switch (j)
        {
        }
      }
      for (;;)
      {
        i += 1;
        break label55;
        if (paramRespGetConfig.result.get() != 0)
        {
          if (!QLog.isColorLevel()) {
            break;
          }
          QLog.i("SPLASH_ConfigServlet", 2, "receiveAllConfigs|resultCode != 0");
          break;
        }
        if (((paramRespGetConfig.config_list != null) && (paramRespGetConfig.config_list.size() != 0)) || (!QLog.isColorLevel())) {
          break;
        }
        QLog.i("SPLASH_ConfigServlet", 2, "receiveAllConfigs|config_list empty data");
        break;
        if ((!paramBoolean) || (paramRespGetConfig.result.get() != 0))
        {
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|GET_CONFIG_UPGRADE get config fail.");
          }
          if (!this.jdField_a_of_type_Boolean)
          {
            ReportController.b(paramQQAppInterface, "CliOper", "", "", "0X800716D", "0X800716D", 0, 0, "", "", "", "");
            this.jdField_a_of_type_Boolean = true;
          }
          ((ConfigHandler)paramQQAppInterface.a(4)).a(UpgradeController.a().a());
          continue;
          if (paramRespGetConfig.result.get() != 0)
          {
            PatchReporter.a(BaseApplicationImpl.sApplication, paramQQAppInterface.c(), "actPatchConfig", 101, "");
          }
          else if ((paramRespGetConfig.config_list == null) || (paramRespGetConfig.config_list.size() == 0))
          {
            PatchFileManager.a(paramQQAppInterface);
            continue;
            if ((!paramBoolean) || (paramRespGetConfig.result.get() != 0))
            {
              localObject1 = (PasswdRedBagManager)paramQQAppInterface.getManager(124);
              ((PasswdRedBagManager)localObject1).jdField_a_of_type_Boolean = true;
              ((PasswdRedBagManager)localObject1).jdField_b_of_type_Boolean = MessageForFoldMsgGrayTips.PASSWD_REDBAG_MSG_SWITCH_DEFAULT;
              ((PasswdRedBagManager)localObject1).jdField_a_of_type_Int = MessageForFoldMsgGrayTips.PASSWD_REDBAG_MSG_DISPLAY_NUM_DEFAULT;
              ((PasswdRedBagManager)localObject1).d = MessageForFoldMsgGrayTips.PASSWD_REDBAG_MSG_INDEX_WITH_ID;
              SharedPreUtils.a(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount(), 0, ((PasswdRedBagManager)localObject1).jdField_b_of_type_Boolean, ((PasswdRedBagManager)localObject1).jdField_a_of_type_Int, ((PasswdRedBagManager)localObject1).c, ((PasswdRedBagManager)localObject1).d);
              continue;
              if (!paramBoolean)
              {
                OlympicServlet.a(paramQQAppInterface, 88, 0, 0, 1, 1, 0);
                if (QLog.isColorLevel()) {
                  QLog.d("ArConfig_configServlet", 2, "handleResp_GetArEntranceConfig||isSuccess =" + paramBoolean);
                }
              }
              else if (paramRespGetConfig.result.get() != 0)
              {
                j = paramRespGetConfig.result.get();
                OlympicServlet.a(paramQQAppInterface, 88, 0, 0, 1, j, 0);
                if (QLog.isColorLevel()) {
                  QLog.d("ArConfig_configServlet", 2, "handleResp_GetArEntranceConfig||result =" + j);
                }
              }
              else if (((paramRespGetConfig.config_list == null) || (paramRespGetConfig.config_list.size() == 0)) && (QLog.isColorLevel()))
              {
                QLog.d("ArConfig_configServlet", 2, "handleResp_GetArEntranceConfig||config_list is null");
                continue;
                if (!paramBoolean)
                {
                  OlympicServlet.a(paramQQAppInterface, 87, 0, 0, 1, 1, 0);
                  if (QLog.isColorLevel()) {
                    QLog.d("ArConfig_configServlet", 2, "handleResp_GetArResource||isSuccess =" + paramBoolean);
                  }
                }
                for (;;)
                {
                  localObject1 = (ArResourceManager)paramQQAppInterface.getManager(167);
                  if (localObject1 == null) {
                    break;
                  }
                  ((ArResourceManager)localObject1).a(true, false);
                  break;
                  if (paramRespGetConfig.result.get() != 0)
                  {
                    j = paramRespGetConfig.result.get();
                    OlympicServlet.a(paramQQAppInterface, 87, 0, 0, 1, j, 0);
                    if (QLog.isColorLevel()) {
                      QLog.d("ArConfig_configServlet", 2, "handleResp_GetArResource||result =" + j);
                    }
                  }
                  else if (((paramRespGetConfig.config_list == null) || (paramRespGetConfig.config_list.size() == 0)) && (QLog.isColorLevel()))
                  {
                    QLog.d("ArConfig_configServlet", 2, "handleResp_GetArResource||config_list is null");
                  }
                }
                if (!paramBoolean)
                {
                  OlympicServlet.a(getAppRuntime(), 86, 0, 0, 1, 1, 0);
                  if (QLog.isColorLevel()) {
                    QLog.d("Olympic.configServlet", 2, "handleResp_GetOlympicActConfig||isSuccess =" + paramBoolean);
                  }
                }
                for (;;)
                {
                  localObject1 = (OlympicManager)paramQQAppInterface.getManager(166);
                  if (localObject1 == null) {
                    break;
                  }
                  ((OlympicManager)localObject1).f();
                  ((OlympicManager)localObject1).g();
                  break;
                  if (paramRespGetConfig.result.get() != 0)
                  {
                    j = paramRespGetConfig.result.get();
                    OlympicServlet.a(getAppRuntime(), 86, 0, 0, 1, j, 0);
                    if (QLog.isColorLevel()) {
                      QLog.d("Olympic.configServlet", 2, "handleResp_GetOlympicActConfig||result =" + j);
                    }
                  }
                  else if (((paramRespGetConfig.config_list == null) || (paramRespGetConfig.config_list.size() == 0)) && (QLog.isColorLevel()))
                  {
                    QLog.d("Olympic.configServlet", 2, "handleResp_GetOlympicActConfig||config_list is null");
                  }
                }
                localObject1 = (BabyQHandler)paramQQAppInterface.a(53);
                if (localObject1 != null)
                {
                  ((BabyQHandler)localObject1).a(false, false);
                  continue;
                  if (QLog.isColorLevel()) {
                    QLog.d("SPLASH_ConfigServlet", 2, "precover PRECOVER_CONFIG_CMD, failed");
                  }
                  localObject1 = (PrecoverManager)paramQQAppInterface.getManager(178);
                  if (localObject1 != null)
                  {
                    ((PrecoverManager)localObject1).a();
                    ((PrecoverManager)localObject1).a(false);
                    continue;
                    localObject1 = (ARMapConfigManager)paramQQAppInterface.getManager(189);
                    localObject2 = ((ARMapConfigManager)localObject1).a();
                    j = paramIntent.getIntExtra("k_req_occasion", 0);
                    k = paramRespGetConfig.result.get();
                    QLog.d("SPLASH_ConfigServlet", 1, "GET_AR_MAP_CONFIG failed, resultCode:" + k + ",reqOccasion = " + j);
                    ((ARMapConfigManager)localObject1).a((ARMapConfig)localObject2, j);
                    ArMapUtil.a(paramQQAppInterface, false, k);
                    continue;
                    if (!paramBoolean) {
                      if (QLog.isColorLevel()) {
                        QLog.d("SPLASH_ConfigServlet", 2, "AV_REDPACKET_CONFIG failed isSuccess =" + paramBoolean);
                      }
                    }
                    for (;;)
                    {
                      localObject1 = (AVRedPacketConfigManager)paramQQAppInterface.getManager(253);
                      localObject2 = ((AVRedPacketConfigManager)localObject1).a();
                      QLog.d("SPLASH_ConfigServlet", 1, "AV_REDPACKET_CONFIG failed");
                      ((AVRedPacketConfigManager)localObject1).a((AVRedPacketConfig)localObject2, false);
                      AVRedPacketDataCollector.a(false);
                      break;
                      if (paramRespGetConfig.result.get() != 0)
                      {
                        j = paramRespGetConfig.result.get();
                        if (QLog.isColorLevel()) {
                          QLog.d("SPLASH_ConfigServlet", 2, "AV_REDPACKET_CONFIG failed  result =" + j);
                        }
                      }
                      else if (((paramRespGetConfig.config_list == null) || (paramRespGetConfig.config_list.size() == 0)) && (QLog.isColorLevel()))
                      {
                        QLog.d("SPLASH_ConfigServlet", 2, "AV_REDPACKET_CONFIG failed  config_list is null");
                      }
                    }
                    if (QLog.isColorLevel())
                    {
                      j = paramRespGetConfig.result.get();
                      QLog.d("SPLASH_ConfigServlet", 2, "AR_GLOBAL_CONTROL_COFIG failed, resultCode:" + j);
                      continue;
                      if (QLog.isColorLevel())
                      {
                        j = paramRespGetConfig.result.get();
                        QLog.d("SPLASH_ConfigServlet", 2, "AR_SCAN_STAR_FACE_CONFIG failed, resultCode:" + j);
                        continue;
                        j = paramRespGetConfig.result.get();
                        if (QLog.isColorLevel()) {
                          QLog.d("SPLASH_ConfigServlet", 2, "ScanFu. GET_SCAN_FU_CONFIG failed, resultCode:" + j);
                        }
                        localObject1 = new HashMap();
                        ((HashMap)localObject1).put("failedCode", j + "");
                        StatisticCollector.a(BaseApplication.getContext()).a(null, "pullMedalConfigFailed", false, 0L, 0L, (HashMap)localObject1, null);
                        continue;
                        if (QLog.isColorLevel())
                        {
                          j = paramRespGetConfig.result.get();
                          QLog.d("SPLASH_ConfigServlet", 2, String.format(Locale.getDefault(), "MEDAL_STRONG_REMINDER_CONFIG fail code: %s", new Object[] { Integer.valueOf(j) }));
                          continue;
                          if (QLog.isColorLevel())
                          {
                            j = paramRespGetConfig.result.get();
                            QLog.d("SPLASH_ConfigServlet", 2, String.format(Locale.getDefault(), "PUSH_RECOMMEND_SHIELD_CONFIG fail code: %s", new Object[] { Integer.valueOf(j) }));
                            continue;
                            if (QLog.isColorLevel())
                            {
                              j = paramRespGetConfig.result.get();
                              QLog.d("SPLASH_ConfigServlet", 2, String.format(Locale.getDefault(), "BATCH_ADD_FRIEND_FOR_TROOP fail code: %s", new Object[] { Integer.valueOf(j) }));
                              continue;
                              if (QLog.isColorLevel())
                              {
                                j = paramRespGetConfig.result.get();
                                QLog.d("SPLASH_ConfigServlet", 2, String.format(Locale.getDefault(), "CONFESS_CONFIG fail code: %s", new Object[] { Integer.valueOf(j) }));
                                continue;
                                if (QLog.isColorLevel())
                                {
                                  j = paramRespGetConfig.result.get();
                                  QLog.d("SPLASH_ConfigServlet", 2, "BuluoRedDot. BULUO_REDDOT_CONFIG failed, resultCode:" + j);
                                  continue;
                                  if (QLog.isColorLevel())
                                  {
                                    j = paramRespGetConfig.result.get();
                                    QLog.d("SPLASH_ConfigServlet", 2, "Nearby. NEARBY_TABS_CONFIG failed, resultCode:" + j);
                                    continue;
                                    ScribbleResMgr.a(paramQQAppInterface).b();
                                    continue;
                                    if (QLog.isColorLevel())
                                    {
                                      j = paramRespGetConfig.result.get();
                                      QLog.d("CU_OPEN_CARD_GUIDE", 2, "failed, resultCode:" + j);
                                      continue;
                                      if (QLog.isColorLevel())
                                      {
                                        j = paramRespGetConfig.result.get();
                                        QLog.d("CAMPUS_CIRCLE_CONFIG", 2, "failed, resultCode:" + j);
                                        continue;
                                        localObject1 = (OCRManager)paramQQAppInterface.getManager(227);
                                        j = paramRespGetConfig.result.get();
                                        QLog.d("SPLASH_ConfigServlet", 1, "OCR_CONFIG failed, resultCode:" + j);
                                        ((OCRManager)localObject1).a(false, null);
                                        continue;
                                        ShortVideoResourceManager.a(paramRespGetConfig.result.get());
                                        continue;
                                        RDConfigServletProxy.a(paramQQAppInterface, 231, paramRespGetConfig.result.get());
                                        continue;
                                        QLog.d("SPLASH_ConfigServlet", 1, "TIM_CONVERT_TEAMWORK_CONFIG failed, resultCode:" + paramRespGetConfig.result.get());
                                        continue;
                                        if (QLog.isColorLevel()) {
                                          QLog.i("Magnifier_Config", 2, "APM_CONFIG failed, resultCode: " + paramRespGetConfig.result.get());
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      l1 = System.currentTimeMillis();
      k = paramRespGetConfig.config_list.size();
      localArrayList = new ArrayList(paramArrayOfInt.length);
      i = 0;
      while (i < paramArrayOfInt.length)
      {
        localArrayList.add(Integer.valueOf(paramArrayOfInt[i]));
        i += 1;
      }
      localObject1 = null;
      bool = false;
      i = 0;
      if (i >= k) {
        break label12751;
      }
      localObject3 = (ConfigurationService.Config)paramRespGetConfig.config_list.get(i);
      if (localObject3 == null) {}
      for (paramArrayOfInt = (int[])localObject1;; paramArrayOfInt = (int[])localObject1)
      {
        i += 1;
        localObject1 = paramArrayOfInt;
        break;
        if (((ConfigurationService.Config)localObject3).type.has()) {
          break label2373;
        }
      }
      paramArrayOfInt = new Integer(((ConfigurationService.Config)localObject3).type.get());
      localArrayList.remove(paramArrayOfInt);
      if (QLog.isColorLevel()) {
        QLog.i("SPLASH_ConfigServlet", 2, "receiveAllConfigs|receive type: " + paramArrayOfInt + ", length: " + k);
      }
      switch (paramArrayOfInt.intValue())
      {
      default: 
      case 193: 
        do
        {
          paramArrayOfInt = (int[])localObject1;
          break;
        } while ((((ConfigurationService.Config)localObject3).msg_content_list == null) || (((ConfigurationService.Config)localObject3).msg_content_list.size() <= 0));
        paramArrayOfInt = (ConfigurationService.Content)((ConfigurationService.Config)localObject3).msg_content_list.get(0);
        if (paramArrayOfInt != null) {
          if (paramArrayOfInt.compress.get() == 1)
          {
            localObject2 = OlympicUtil.a(paramArrayOfInt.content.get().toByteArray());
            if (localObject2 == null) {
              break;
            }
          }
        }
        for (;;)
        {
          try
          {
            paramArrayOfInt = new String((byte[])localObject2, "UTF-8");
            if (paramArrayOfInt == null) {
              break label14623;
            }
            j = ((ConfigurationService.Config)localObject3).version.get();
            if (QLog.isColorLevel()) {
              QLog.i("UpgradeTIMWrapper", 2, "receiveAllConfigs|UpgradeTIMWrapper receive version: " + j + ", content: " + paramArrayOfInt);
            }
            localObject1 = UpgradeTIMWrapper.a(paramArrayOfInt);
            SharedPreUtils.v(getAppRuntime().getApplication(), jdField_a_of_type_JavaLangString, j);
            if (PackageUtil.a(paramQQAppInterface.getApp(), "com.tencent.tim")) {
              break label4349;
            }
            if (QLog.isColorLevel()) {
              QLog.d("UpgradeTIMWrapper", 2, "TIM not installed, save config");
            }
            UpgradeTIMWrapper.a(paramArrayOfInt);
            UpgradeTIMWrapper.a(paramQQAppInterface, (UpgradeTIMWrapper)localObject1);
            paramArrayOfInt = (int[])localObject1;
          }
          catch (UnsupportedEncodingException paramArrayOfInt)
          {
            if (QLog.isColorLevel()) {
              paramArrayOfInt.printStackTrace();
            }
            paramArrayOfInt = null;
            continue;
          }
          catch (OutOfMemoryError paramArrayOfInt)
          {
            if (QLog.isColorLevel()) {
              paramArrayOfInt.printStackTrace();
            }
            System.gc();
            try
            {
              paramArrayOfInt = new String((byte[])localObject2, "UTF-8");
            }
            catch (Throwable paramArrayOfInt)
            {
              paramArrayOfInt = null;
            }
            continue;
          }
          paramArrayOfInt = paramArrayOfInt.content.get().toStringUtf8();
          continue;
          paramArrayOfInt = (int[])localObject1;
          if (QLog.isColorLevel())
          {
            QLog.d("UpgradeTIMWrapper", 2, "TIM installed, do not save config");
            paramArrayOfInt = (int[])localObject1;
            continue;
            paramArrayOfInt = (int[])localObject1;
            if (QLog.isColorLevel())
            {
              QLog.d("UpgradeTIMWrapper", 2, "receiveAllConfigs|UpgradeTIMWrapper content == null ");
              paramArrayOfInt = (int[])localObject1;
            }
          }
        }
      case 116: 
        label4144:
        j = SharedPreUtils.S(getAppRuntime().getApplication(), jdField_a_of_type_JavaLangString);
        label4270:
        m = ((ConfigurationService.Config)localObject3).version.get();
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, String.format("receiveAllConfigs|GET_CONFIG_UPGRADE localVersion=%s newVersion=%s", new Object[] { Integer.valueOf(j), Integer.valueOf(m) }));
        }
        localObject2 = null;
        if (j != m) {
          if ((((ConfigurationService.Config)localObject3).content_list == null) || (((ConfigurationService.Config)localObject3).content_list.isEmpty()))
          {
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|GET_CONFIG_UPGRADE no content in config, delete local config.");
            }
            UpgradeConfigManager.a("config_upgrade_", jdField_a_of_type_JavaLangString);
            paramArrayOfInt = null;
            label4523:
            SharedPreUtils.u(getAppRuntime().getApplication(), jdField_a_of_type_JavaLangString, m);
          }
        }
        for (;;)
        {
          localObject3 = (ConfigHandler)paramQQAppInterface.a(4);
          if (TextUtils.isEmpty(paramArrayOfInt)) {
            break label4936;
          }
          localObject2 = UpgradeController.a().a();
          ((UpgradeDetailWrapper)localObject2).a(paramArrayOfInt);
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, String.format("receiveAllConfigs|GET_CONFIG_UPGRADE localAppID=%s configAppID=%s", new Object[] { Integer.valueOf(AppSetting.jdField_a_of_type_Int), Integer.valueOf(((UpgradeDetailWrapper)localObject2).jdField_b_of_type_ProtocolKQQConfigUpgradeInfo.iUpgradeSdkId) }));
          }
          if (AppSetting.jdField_a_of_type_Int < ((UpgradeDetailWrapper)localObject2).jdField_b_of_type_ProtocolKQQConfigUpgradeInfo.iUpgradeSdkId) {
            break label4802;
          }
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|GET_CONFIG_UPGRADE config APP_ID not correctly?");
          }
          SharedPreUtils.u(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 0);
          UpgradeConfigManager.a("config_upgrade_", jdField_a_of_type_JavaLangString);
          ((UpgradeDetailWrapper)localObject2).jdField_b_of_type_ProtocolKQQConfigUpgradeInfo.iUpgradeType = 0;
          ((ConfigHandler)localObject3).a((UpgradeDetailWrapper)localObject2);
          ((ConfigHandler)localObject3).d();
          paramArrayOfInt = (int[])localObject1;
          break;
          paramArrayOfInt = (String)((ConfigurationService.Config)localObject3).content_list.get(0);
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|GET_CONFIG_UPGRADE configContent=" + paramArrayOfInt);
          }
          if (TextUtils.isEmpty(paramArrayOfInt))
          {
            UpgradeConfigManager.a("config_upgrade_", jdField_a_of_type_JavaLangString);
            break label4523;
          }
          UpgradeConfigManager.a("config_upgrade_", jdField_a_of_type_JavaLangString, paramArrayOfInt);
          break label4523;
          paramArrayOfInt = (int[])localObject2;
          if (QLog.isColorLevel())
          {
            QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|GET_CONFIG_UPGRADE the same version.");
            paramArrayOfInt = (int[])localObject2;
          }
        }
        label4802:
        SharedPreUtils.a(getAppRuntime().getApplication(), jdField_a_of_type_JavaLangString, System.currentTimeMillis());
      }
    }
    for (;;)
    {
      label4936:
      Object localObject4;
      for (;;)
      {
        for (;;)
        {
          for (;;)
          {
            try
            {
              if (!((UpgradeDetailWrapper)localObject2).jdField_a_of_type_Boolean)
              {
                if (QLog.isColorLevel()) {
                  QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|GET_CONFIG_UPGRADE waiting switch bit.");
                }
                bool = true;
                paramArrayOfInt = (int[])localObject1;
                break;
              }
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|GET_CONFIG_UPGRADE do upgrade.");
              }
              if (((UpgradeDetailWrapper)localObject2).jdField_b_of_type_Int == 0)
              {
                if (((UpgradeDetailWrapper)localObject2).jdField_a_of_type_Int != 1) {
                  break label14636;
                }
                bool = true;
                ConfigHandler.a(paramQQAppInterface, bool);
              }
              ((ConfigHandler)localObject3).d();
              UpgradeController.a().a(((UpgradeDetailWrapper)localObject2).jdField_b_of_type_ProtocolKQQConfigUpgradeInfo, (UpgradeController.OnHandleUpgradeFinishListener)localObject3);
              bool = true;
              paramArrayOfInt = (int[])localObject1;
              break;
            }
            finally {}
            ((ConfigHandler)localObject3).d();
            ((ConfigHandler)localObject3).a(UpgradeController.a().a());
            paramArrayOfInt = (int[])localObject1;
            break;
            if ((((ConfigurationService.Config)localObject3).content_list != null) && (((ConfigurationService.Config)localObject3).content_list.size() > 0))
            {
              SharedPreUtils.i(getAppRuntime().getApplication(), ((ConfigurationService.Config)localObject3).version.get(), jdField_a_of_type_JavaLangString);
              j = 0;
              while (j < ((ConfigurationService.Config)localObject3).content_list.size())
              {
                paramArrayOfInt = (String)((ConfigurationService.Config)localObject3).content_list.get(j);
                if (QLog.isColorLevel()) {
                  QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 44,content: " + paramArrayOfInt + ",version: " + ((ConfigurationService.Config)localObject3).version.get());
                }
                if (!TextUtils.isEmpty(paramArrayOfInt)) {
                  ((HotChatManager)paramQQAppInterface.getManager(59)).d(paramArrayOfInt);
                }
                j += 1;
              }
              paramArrayOfInt = (int[])localObject1;
              break;
            }
            if (!QLog.isColorLevel()) {
              break label4052;
            }
            QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 44content_list is emtpy,version: " + ((ConfigurationService.Config)localObject3).version.get());
            paramArrayOfInt = (int[])localObject1;
            break;
            if ((((ConfigurationService.Config)localObject3).content_list != null) && (((ConfigurationService.Config)localObject3).content_list.size() > 0))
            {
              SharedPreUtils.g(getAppRuntime().getApplication(), ((ConfigurationService.Config)localObject3).version.get(), jdField_a_of_type_JavaLangString);
              j = 0;
              while (j < ((ConfigurationService.Config)localObject3).content_list.size())
              {
                paramArrayOfInt = (String)((ConfigurationService.Config)localObject3).content_list.get(j);
                if (QLog.isColorLevel()) {
                  QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 47,content: " + paramArrayOfInt + ",version: " + ((ConfigurationService.Config)localObject3).version.get());
                }
                if (!TextUtils.isEmpty(paramArrayOfInt)) {
                  ((SmartDeviceProxyMgr)paramQQAppInterface.a(51)).a(paramArrayOfInt, false);
                }
                j += 1;
              }
              paramArrayOfInt = (int[])localObject1;
              break;
            }
            if (!QLog.isColorLevel()) {
              break label4052;
            }
            QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 47content_list is emtpy,version: " + ((ConfigurationService.Config)localObject3).version.get());
            paramArrayOfInt = (int[])localObject1;
            break;
            if (((ConfigurationService.Config)localObject3).version == null) {
              break label4052;
            }
            SharedPreUtils.h(getAppRuntime().getApplication(), ((ConfigurationService.Config)localObject3).version.get(), jdField_a_of_type_JavaLangString);
            ((SmartDeviceProxyMgr)paramQQAppInterface.a(51)).a((ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            if ((((ConfigurationService.Config)localObject3).content_list != null) && (((ConfigurationService.Config)localObject3).content_list.size() > 0))
            {
              paramArrayOfInt = new File(getAppRuntime().getApplication().getFilesDir().getAbsolutePath() + "/splashpic");
              if (!paramArrayOfInt.exists()) {
                paramArrayOfInt.mkdirs();
              }
              for (;;)
              {
                paramArrayOfInt = ((ConfigurationService.Config)localObject3).content_list.get().iterator();
                while (paramArrayOfInt.hasNext())
                {
                  localObject2 = (String)paramArrayOfInt.next();
                  if (QLog.isColorLevel()) {
                    QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 1,content: " + (String)localObject2 + ",version: " + ((ConfigurationService.Config)localObject3).version.get());
                  }
                  f((String)localObject2, ((ConfigurationService.Config)localObject3).version.get());
                  if (QLog.isColorLevel()) {
                    QLog.i("SPLASH_ConfigServlet", 2, "onreceive cmd==1 version_back is " + ((ConfigurationService.Config)localObject3).version.get());
                  }
                }
                if ((paramArrayOfInt != null) && (paramArrayOfInt.isDirectory()))
                {
                  paramArrayOfInt = paramArrayOfInt.listFiles();
                  m = paramArrayOfInt.length;
                  j = 0;
                  while (j < m)
                  {
                    localObject2 = paramArrayOfInt[j];
                    if ((localObject2 != null) && (((File)localObject2).exists())) {
                      ((File)localObject2).delete();
                    }
                    j += 1;
                  }
                }
              }
              paramArrayOfInt = (int[])localObject1;
              break;
            }
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 1,content_list is empty ,version: " + ((ConfigurationService.Config)localObject3).version.get());
            }
            paramArrayOfInt = new File(getAppRuntime().getApplication().getFilesDir().getAbsolutePath() + "/" + "flashlogo.png");
            if (paramArrayOfInt != null) {
              paramArrayOfInt.delete();
            }
            SharedPreUtils.a(getAppRuntime().getApplication(), ((ConfigurationService.Config)localObject3).version.get(), "1|2", "");
            paramArrayOfInt = (int[])localObject1;
            break;
            if ((((ConfigurationService.Config)localObject3).content_list != null) && (((ConfigurationService.Config)localObject3).content_list.size() > 0))
            {
              com.tencent.mobileqq.config.Config.a.b();
              paramArrayOfInt = ((ConfigurationService.Config)localObject3).content_list.get().iterator();
              while (paramArrayOfInt.hasNext())
              {
                localObject2 = (String)paramArrayOfInt.next();
                if (QLog.isColorLevel()) {
                  QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 2,content: " + (String)localObject2 + ",version: " + ((ConfigurationService.Config)localObject3).version.get());
                }
                d((String)localObject2, ((ConfigurationService.Config)localObject3).version.get());
              }
              paramArrayOfInt = new ConfigManager(getAppRuntime().getApplication(), jdField_a_of_type_JavaLangString);
              if (paramArrayOfInt != null)
              {
                paramArrayOfInt.b();
                paramArrayOfInt.c();
              }
              paramArrayOfInt = BaseApplication.getContext().getSharedPreferences("mobileQQ", 0);
              paramArrayOfInt.edit().putBoolean("reveive_newpb" + getAppRuntime().getAccount(), true).commit();
              paramArrayOfInt.edit().putBoolean("push_banner_display" + getAppRuntime().getAccount(), true).commit();
              SharedPreUtils.i(getAppRuntime().getApplication(), ((ConfigurationService.Config)localObject3).version.get(), jdField_a_of_type_JavaLangString);
              if (QLog.isColorLevel()) {
                QLog.i("SPLASH_ConfigServlet", 2, "pushbanner onreceive cmd==2 version_back is " + ((ConfigurationService.Config)localObject3).version.get());
              }
              paramArrayOfInt = (int[])localObject1;
              break;
            }
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 2,content_list is empty ,version: " + ((ConfigurationService.Config)localObject3).version.get());
            }
            com.tencent.mobileqq.config.Config.a.b();
            com.tencent.mobileqq.config.Config.a.c();
            paramArrayOfInt = new ConfigManager(getAppRuntime().getApplication(), jdField_a_of_type_JavaLangString);
            if (paramArrayOfInt != null)
            {
              paramArrayOfInt.b();
              paramArrayOfInt.c();
            }
            BaseApplication.getContext().getSharedPreferences("mobileQQ", 0).edit().putBoolean("push_banner_display" + getAppRuntime().getAccount(), false).commit();
            SharedPreUtils.i(getAppRuntime().getApplication(), ((ConfigurationService.Config)localObject3).version.get(), jdField_a_of_type_JavaLangString);
            paramArrayOfInt = (int[])localObject1;
            break;
            if ((((ConfigurationService.Config)localObject3).content_list != null) && (((ConfigurationService.Config)localObject3).content_list.size() > 0))
            {
              paramArrayOfInt = (String)((ConfigurationService.Config)localObject3).content_list.get(0);
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 3,content: " + paramArrayOfInt + ",version: " + ((ConfigurationService.Config)localObject3).version.get());
              }
              e(paramArrayOfInt, ((ConfigurationService.Config)localObject3).version.get());
              paramArrayOfInt = (int[])localObject1;
              break;
            }
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 3,content_list is empty ,version: " + ((ConfigurationService.Config)localObject3).version.get());
            }
            paramArrayOfInt = new File(getAppRuntime().getApplication().getFilesDir().getAbsolutePath() + "/" + jdField_a_of_type_JavaLangString + "/" + "birthdayflashlogo.png");
            if (paramArrayOfInt.exists()) {
              paramArrayOfInt.delete();
            }
            SharedPreUtils.b(getAppRuntime().getApplication(), ((ConfigurationService.Config)localObject3).version.get(), "", jdField_a_of_type_JavaLangString);
            paramArrayOfInt = (int[])localObject1;
            break;
            if ((((ConfigurationService.Config)localObject3).content_list != null) && (((ConfigurationService.Config)localObject3).content_list.size() > 0))
            {
              paramArrayOfInt = new ArrayList();
              j = 0;
              while (j < ((ConfigurationService.Config)localObject3).content_list.size())
              {
                localObject2 = (String)((ConfigurationService.Config)localObject3).content_list.get(j);
                if (QLog.isColorLevel()) {
                  QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 5,content: " + (String)localObject2 + ",version: " + ((ConfigurationService.Config)localObject3).version.get());
                }
                localObject2 = a((String)localObject2);
                if (localObject2 != null) {
                  paramArrayOfInt.add(localObject2);
                }
                j += 1;
              }
              QQOperateManager.a((QQAppInterface)getAppRuntime()).a((QQAppInterface)getAppRuntime(), paramArrayOfInt);
              SharedPreUtils.a(getAppRuntime().getApplication(), getAppRuntime().getAccount(), ((ConfigurationService.Config)localObject3).version.get());
              paramArrayOfInt = (int[])localObject1;
              break;
            }
            if (!QLog.isColorLevel()) {
              break label4052;
            }
            QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 5,content_list is empty ,version: " + ((ConfigurationService.Config)localObject3).version.get());
            paramArrayOfInt = (int[])localObject1;
            break;
            paramArrayOfInt = (NearbyBannerManager)paramQQAppInterface.getManager(73);
            localObject4 = paramArrayOfInt.a();
            localObject2 = new PicAndAdConf((short)21, (byte)2);
            Iterator localIterator;
            if ((((ConfigurationService.Config)localObject3).content_list != null) && (((ConfigurationService.Config)localObject3).content_list.size() > 0)) {
              localIterator = ((ConfigurationService.Config)localObject3).content_list.get().iterator();
            }
            while (localIterator.hasNext())
            {
              String str = (String)localIterator.next();
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 12,content: " + str + ",version: " + ((ConfigurationService.Config)localObject3).version.get());
              }
              a((PicAndAdConf)localObject2, str, (Set)localObject4);
              paramArrayOfInt.a((PicAndAdConf)localObject2, ((ConfigurationService.Config)localObject3).version.get());
              continue;
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 12,content_list is empty ,version: " + ((ConfigurationService.Config)localObject3).version.get());
              }
            }
            if (QLog.isColorLevel())
            {
              localObject4 = new StringBuilder().append("NearbyBanner onreceive, content count = ");
              if (((ConfigurationService.Config)localObject3).content_list != null) {
                break label7126;
              }
            }
            label7126:
            for (j = 0;; j = ((ConfigurationService.Config)localObject3).content_list.get().size())
            {
              QLog.i("SPLASH_ConfigServlet", 2, j + " , item count = " + ((PicAndAdConf)localObject2).a() + ", version = " + ((ConfigurationService.Config)localObject3).version.get());
              paramArrayOfInt.a(((ConfigurationService.Config)localObject3).version.get());
              paramArrayOfInt = (int[])localObject1;
              break;
            }
            if ((((ConfigurationService.Config)localObject3).content_list != null) && (((ConfigurationService.Config)localObject3).content_list.size() > 0))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 55,content: " + (String)((ConfigurationService.Config)localObject3).content_list.get(0) + ",version: " + ((ConfigurationService.Config)localObject3).version.get());
              }
              ((BlessManager)paramQQAppInterface.getManager(137)).a((String)((ConfigurationService.Config)localObject3).content_list.get(0));
              SharedPreUtils.b(getAppRuntime().getApplication(), getAppRuntime().getAccount(), ((ConfigurationService.Config)localObject3).version.get());
              paramArrayOfInt = (int[])localObject1;
              break;
            }
            if (!QLog.isColorLevel()) {
              break label4052;
            }
            QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 55,content_list is empty ,version: " + ((ConfigurationService.Config)localObject3).version.get());
            paramArrayOfInt = (int[])localObject1;
            break;
            localObject2 = null;
            paramArrayOfInt = (int[])localObject2;
            if (((ConfigurationService.Config)localObject3).content_list != null)
            {
              paramArrayOfInt = (int[])localObject2;
              if (((ConfigurationService.Config)localObject3).content_list.size() > 0) {
                paramArrayOfInt = ((ConfigurationService.Config)localObject3).content_list.get();
              }
            }
            if ((paramArrayOfInt != null) && (paramArrayOfInt.size() > 0))
            {
              paramArrayOfInt = (String)paramArrayOfInt.get(0);
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 10,content: " + paramArrayOfInt + ",version: " + ((ConfigurationService.Config)localObject3).version.get());
              }
              BmqqSegmentUtil.a(paramArrayOfInt);
            }
            for (;;)
            {
              j = ((ConfigurationService.Config)localObject3).version.get();
              SharedPreUtils.b(getAppRuntime().getApplication(), j);
              paramArrayOfInt = (int[])localObject1;
              break;
              BmqqSegmentUtil.a(null);
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 10,content_list is empty ,version: " + ((ConfigurationService.Config)localObject3).version.get());
              }
            }
            BridgeHelper.a(BaseApplication.getContext(), paramQQAppInterface.getAccount()).a((ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            l(paramIntent, (ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            n(paramIntent, (ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            j(paramIntent, (ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            k(paramIntent, (ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            m((ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            l((ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            if ((((ConfigurationService.Config)localObject3).content_list != null) && (((ConfigurationService.Config)localObject3).content_list.size() > 0))
            {
              paramArrayOfInt = (String)((ConfigurationService.Config)localObject3).content_list.get(0);
              j = ((ConfigurationService.Config)localObject3).version.get();
              paramQQAppInterface.a().a(paramQQAppInterface, paramArrayOfInt, j);
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 31,content: " + paramArrayOfInt + ",version: " + ((ConfigurationService.Config)localObject3).version.get());
              }
              paramArrayOfInt = (int[])localObject1;
              break;
            }
            if (!QLog.isColorLevel()) {
              break label4052;
            }
            QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 31,content_list is empty ,version: " + ((ConfigurationService.Config)localObject3).version.get());
            paramArrayOfInt = (int[])localObject1;
            break;
            if ((((ConfigurationService.Config)localObject3).content_list != null) && (((ConfigurationService.Config)localObject3).content_list.size() > 0))
            {
              paramArrayOfInt = (ClubContentUpdateHandler)paramQQAppInterface.a(16);
              if (paramArrayOfInt != null) {
                paramArrayOfInt.a(paramQQAppInterface, (String)((ConfigurationService.Config)localObject3).content_list.get(0), ((ConfigurationService.Config)localObject3).version.get());
              }
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 26,content: " + (String)((ConfigurationService.Config)localObject3).content_list.get(0) + ",version: " + ((ConfigurationService.Config)localObject3).version.get());
              }
              paramArrayOfInt = (int[])localObject1;
              break;
            }
            if (!QLog.isColorLevel()) {
              break label4052;
            }
            QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 26,content_list is empty ,version: " + ((ConfigurationService.Config)localObject3).version.get());
            paramArrayOfInt = (int[])localObject1;
            break;
            if ((((ConfigurationService.Config)localObject3).content_list != null) && (((ConfigurationService.Config)localObject3).content_list.size() > 0))
            {
              paramArrayOfInt = (String)((ConfigurationService.Config)localObject3).content_list.get(0);
              j = ((ConfigurationService.Config)localObject3).version.get();
              AioVipKeywordHelper.a().a(paramQQAppInterface.getApplication(), paramArrayOfInt, paramQQAppInterface.getCurrentAccountUin(), j);
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 76,content: " + paramArrayOfInt + ",version: " + j);
              }
              paramArrayOfInt = (int[])localObject1;
              break;
            }
            if (!QLog.isColorLevel()) {
              break label4052;
            }
            QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 76,content_list is empty ,version: " + ((ConfigurationService.Config)localObject3).version.get());
            paramArrayOfInt = (int[])localObject1;
            break;
            paramArrayOfInt = (IndividuationABTestManager)paramQQAppInterface.getManager(176);
            if ((((ConfigurationService.Config)localObject3).content_list != null) && (((ConfigurationService.Config)localObject3).content_list.size() > 0))
            {
              localObject2 = (String)((ConfigurationService.Config)localObject3).content_list.get(0);
              j = ((ConfigurationService.Config)localObject3).version.get();
              paramArrayOfInt.a((String)localObject2, paramQQAppInterface.getCurrentAccountUin(), j);
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 94,content: " + (String)localObject2 + ",version: " + j);
              }
              paramArrayOfInt = (int[])localObject1;
              break;
            }
            paramArrayOfInt.a(((ConfigurationService.Config)localObject3).version.get(), paramQQAppInterface.getCurrentAccountUin());
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 94,content_list is empty ,version: " + ((ConfigurationService.Config)localObject3).version.get());
            }
            paramArrayOfInt = (int[])localObject1;
            break;
            W(paramQQAppInterface, (ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            paramArrayOfInt = (int[])localObject1;
            break;
            i(paramIntent, (ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            e(paramIntent, (ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            f(paramIntent, (ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            QAVConfigUtils.a(paramIntent, (ConfigurationService.Config)localObject3, ((QQAppInterface)getAppRuntime()).getApp());
            paramArrayOfInt = (int[])localObject1;
            break;
            g(paramIntent, (ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            b(paramQQAppInterface, paramIntent, (ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            h(paramIntent, (ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            j((ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            k((ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            QAVGroupConfig.a(paramIntent, (ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            GestureMgrAppDownload.a(paramIntent, (ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            QavGPDownloader.a(paramIntent, (ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            n((ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            o((ConfigurationService.Config)localObject3);
            paramArrayOfInt = (int[])localObject1;
            break;
            try
            {
              j = ((ConfigurationService.Config)localObject3).version.get();
              if (j != SharedPreUtils.q(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString))
              {
                AIOJumpLightalkConfig.a(jdField_a_of_type_JavaLangString);
                PCJumpLightalkConfig.a(jdField_a_of_type_JavaLangString);
                CLJumpLightalkConfig.a(jdField_a_of_type_JavaLangString);
                CallTabLightalkConfig.a(jdField_a_of_type_JavaLangString);
                QQCallLightalkConfig.a(jdField_a_of_type_JavaLangString);
                SharedPreUtils.l(getAppRuntime().getApplication(), j, jdField_a_of_type_JavaLangString);
              }
              if ((((ConfigurationService.Config)localObject3).content_list != null) && (((ConfigurationService.Config)localObject3).content_list.size() > 0))
              {
                paramArrayOfInt = ((ConfigurationService.Config)localObject3).content_list.get().iterator();
                while (paramArrayOfInt.hasNext())
                {
                  localObject2 = (String)paramArrayOfInt.next();
                  if (QLog.isColorLevel()) {
                    QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 33,content: " + (String)localObject2 + ",version: " + ((ConfigurationService.Config)localObject3).version.get());
                  }
                  a((String)localObject2, ((ConfigurationService.Config)localObject3).version.get());
                }
              }
            }
            catch (Exception paramArrayOfInt)
            {
              if (QLog.isColorLevel()) {
                QLog.e("SPLASH_ConfigServlet", 2, "error: " + paramArrayOfInt.toString());
              }
              paramArrayOfInt.printStackTrace();
              paramArrayOfInt = (int[])localObject1;
            }
          }
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 33,content_list is empty ,version: " + ((ConfigurationService.Config)localObject3).version.get());
          }
          paramArrayOfInt = (int[])localObject1;
          break;
          try
          {
            if ((((ConfigurationService.Config)localObject3).content_list != null) && (((ConfigurationService.Config)localObject3).content_list.size() > 0))
            {
              paramArrayOfInt = ((ConfigurationService.Config)localObject3).content_list.get().iterator();
              while (paramArrayOfInt.hasNext())
              {
                localObject2 = (String)paramArrayOfInt.next();
                if (QLog.isColorLevel()) {
                  QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 38,content: " + (String)localObject2 + ",version: " + ((ConfigurationService.Config)localObject3).version.get());
                }
                b((String)localObject2, ((ConfigurationService.Config)localObject3).version.get());
              }
            }
          }
          catch (Exception paramArrayOfInt)
          {
            if (QLog.isColorLevel()) {
              QLog.e("SPLASH_ConfigServlet", 2, "qav_upgrade_invite error: " + paramArrayOfInt.toString());
            }
            paramArrayOfInt.printStackTrace();
            paramArrayOfInt = (int[])localObject1;
          }
        }
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 38,content_list is empty ,version: " + ((ConfigurationService.Config)localObject3).version.get());
        }
        paramArrayOfInt = (int[])localObject1;
        break;
        try
        {
          if ((((ConfigurationService.Config)localObject3).content_list != null) && (((ConfigurationService.Config)localObject3).content_list.size() > 0))
          {
            paramArrayOfInt = ((ConfigurationService.Config)localObject3).content_list.get().iterator();
            while (paramArrayOfInt.hasNext())
            {
              localObject2 = (String)paramArrayOfInt.next();
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 93,content: " + (String)localObject2 + ",version: " + ((ConfigurationService.Config)localObject3).version.get());
              }
              c((String)localObject2, ((ConfigurationService.Config)localObject3).version.get());
            }
          }
        }
        catch (Exception paramArrayOfInt)
        {
          if (QLog.isColorLevel()) {
            QLog.e("SPLASH_ConfigServlet", 2, "qav_anychat_time_limit_error: " + paramArrayOfInt.toString());
          }
          paramArrayOfInt.printStackTrace();
          paramArrayOfInt = (int[])localObject1;
        }
      }
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 93,content_list is empty ,version: " + ((ConfigurationService.Config)localObject3).version.get());
      }
      paramArrayOfInt = (int[])localObject1;
      break;
      localObject2 = b((ConfigurationService.Config)localObject3, SharedPreUtils.t(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString), paramArrayOfInt.intValue());
      if (localObject2 != null)
      {
        ScoreManager.a(paramQQAppInterface, (String)localObject2, ((ConfigurationService.Config)localObject3).version.get(), paramArrayOfInt.intValue(), jdField_a_of_type_JavaLangString);
        paramArrayOfInt = (int[])localObject1;
        break;
      }
      if (!QLog.isColorLevel()) {
        break label4052;
      }
      QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 270,content is empty ,version: " + ((ConfigurationService.Config)localObject3).version.get());
      paramArrayOfInt = (int[])localObject1;
      break;
      w((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      r((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      s((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      v((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      A((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      y((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      f((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      x((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      z((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      e((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      p((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      a((ConfigurationService.Config)localObject3, ((ConfigurationService.Config)localObject3).version.get(), paramQQAppInterface.c());
      paramArrayOfInt = (int[])localObject1;
      break;
      c((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      b((ConfigurationService.Config)localObject3, paramQQAppInterface);
      paramArrayOfInt = (int[])localObject1;
      break;
      a((ConfigurationService.Config)localObject3, paramQQAppInterface);
      paramArrayOfInt = (int[])localObject1;
      break;
      d((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      C((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      D((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      E((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      H((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      F((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      G((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      q((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      B((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      DeviceProfileManager.a().a(paramRespGetConfig, "");
      paramArrayOfInt = (int[])localObject1;
      break;
      h((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      i((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      a((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      b((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      g((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      I((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      J((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      K((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      if ((((ConfigurationService.Config)localObject3).content_list != null) && (((ConfigurationService.Config)localObject3).content_list.size() > 0))
      {
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: " + paramArrayOfInt + ",content: " + (String)((ConfigurationService.Config)localObject3).content_list.get(0) + ",version: " + ((ConfigurationService.Config)localObject3).version.get());
        }
        if (!((PhotoPlusManager)paramQQAppInterface.getManager(168)).a((String)((ConfigurationService.Config)localObject3).content_list.get(0))) {
          break label4052;
        }
        SharedPreUtils.w(getAppRuntime().getApplication(), getAppRuntime().getAccount(), ((ConfigurationService.Config)localObject3).version.get());
        paramArrayOfInt = (int[])localObject1;
        break;
      }
      if (!QLog.isColorLevel()) {
        break label4052;
      }
      QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: " + paramArrayOfInt + ",content_list is empty ,version: " + ((ConfigurationService.Config)localObject3).version.get());
      paramArrayOfInt = (int[])localObject1;
      break;
      if ((((ConfigurationService.Config)localObject3).content_list != null) && (((ConfigurationService.Config)localObject3).content_list.size() > 0))
      {
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: " + paramArrayOfInt + ",content: " + (String)((ConfigurationService.Config)localObject3).content_list.get(0) + ",version: " + ((ConfigurationService.Config)localObject3).version.get());
        }
        if (!((ArtFilterManager)paramQQAppInterface.getManager(187)).a((String)((ConfigurationService.Config)localObject3).content_list.get(0), paramQQAppInterface.getCurrentAccountUin())) {
          break label4052;
        }
        SharedPreUtils.x(getAppRuntime().getApplication(), getAppRuntime().getAccount(), ((ConfigurationService.Config)localObject3).version.get());
        paramArrayOfInt = (int[])localObject1;
        break;
      }
      if (!QLog.isColorLevel()) {
        break label4052;
      }
      QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: " + paramArrayOfInt + ",content_list is empty ,version: " + ((ConfigurationService.Config)localObject3).version.get());
      paramArrayOfInt = (int[])localObject1;
      break;
      f(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      a(paramIntent, paramBoolean, (ConfigurationService.Config)localObject3, paramRespGetConfig.result.get());
      paramArrayOfInt = (int[])localObject1;
      break;
      c(paramIntent, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      b(paramIntent, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      d(paramIntent, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      a(paramIntent, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      a(paramQQAppInterface, paramIntent, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      ai(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      X(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      ah(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      localObject2 = b((ConfigurationService.Config)localObject3, EffectConfigBase.a(paramQQAppInterface.getApplication(), paramArrayOfInt.intValue()), paramArrayOfInt.intValue());
      if (localObject2 != null) {
        EffectConfigBase.a(paramQQAppInterface.getApplication(), (String)localObject2, ((ConfigurationService.Config)localObject3).version.get(), paramArrayOfInt.intValue());
      }
      paramArrayOfInt = (int[])localObject1;
      break;
      localObject2 = b((ConfigurationService.Config)localObject3, SharedPreUtils.u(paramQQAppInterface.getApplication(), paramQQAppInterface.c()), paramArrayOfInt.intValue());
      if (localObject2 == null) {
        break label4052;
      }
      EffectOperateManager.a(paramQQAppInterface.getApplication(), (String)localObject2, paramArrayOfInt.intValue(), paramQQAppInterface.c());
      SharedPreUtils.p(paramQQAppInterface.getApplication(), ((ConfigurationService.Config)localObject3).version.get(), paramQQAppInterface.c());
      paramArrayOfInt = (int[])localObject1;
      break;
      paramArrayOfInt = b((ConfigurationService.Config)localObject3, VoiceChangeData.a().a(), 172);
      if (paramArrayOfInt == null) {
        break label4052;
      }
      VoiceChangeData.a().a(paramArrayOfInt);
      VoiceChangeData.a().a(((ConfigurationService.Config)localObject3).version.get());
      paramArrayOfInt = (int[])localObject1;
      break;
      paramArrayOfInt = b((ConfigurationService.Config)localObject3, AIOTopRightButtonConfig.a().a(paramQQAppInterface.c()), 192);
      if (paramArrayOfInt == null) {
        break label4052;
      }
      AIOTopRightButtonConfig.a().b(paramQQAppInterface.c(), paramArrayOfInt);
      AIOTopRightButtonConfig.a().a(paramQQAppInterface.c(), ((ConfigurationService.Config)localObject3).version.get());
      paramArrayOfInt = (int[])localObject1;
      break;
      paramArrayOfInt = b((ConfigurationService.Config)localObject3, SharedPreUtils.a(paramQQAppInterface.getApplication()), 149);
      if (paramArrayOfInt == null) {
        break label4052;
      }
      SharedPreUtils.a(paramQQAppInterface.getApplication(), ((ConfigurationService.Config)localObject3).version.get());
      localObject2 = SharedPreUtils.d(paramQQAppInterface.getCurrentAccountUin());
      if (localObject2 != null) {
        ((SharedPreferences)localObject2).edit().putString("AvWeakNet_video_ConfigContent", paramArrayOfInt).commit();
      }
      paramArrayOfInt = (int[])localObject1;
      break;
      d(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      b(paramIntent, paramBoolean, (ConfigurationService.Config)localObject3, paramRespGetConfig.result.get());
      paramArrayOfInt = (int[])localObject1;
      break;
      ac(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      Y(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      Z(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      aa(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      ab(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      b(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      aj(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      ak(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      al(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      am(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      SearchConfigUtils.a((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      ao(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      j = paramIntent.getIntExtra("k_req_occasion", 0);
      paramArrayOfInt = a(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      localObject2 = (ARMapConfigManager)paramQQAppInterface.getManager(189);
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "handleGetAPMapConfig  ,reqOccasion " + j + ",arMapConfig = " + paramArrayOfInt);
      }
      ((ARMapConfigManager)localObject2).a(paramArrayOfInt, j);
      ArMapUtil.a(paramQQAppInterface, true, 0);
      paramArrayOfInt = (int[])localObject1;
      break;
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "AV_REDPACKET_CONFIG success");
      }
      ((AVRedPacketConfigManager)paramQQAppInterface.getManager(253)).a(a(paramQQAppInterface, (ConfigurationService.Config)localObject3), true);
      AVRedPacketDataCollector.a(true);
      paramArrayOfInt = (int[])localObject1;
      break;
      as(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      an(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      ap(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      aq(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      ar(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      a(paramQQAppInterface, (ConfigurationService.Config)localObject3, "batch_add_friend_for_troop_config");
      paramArrayOfInt = (int[])localObject1;
      break;
      a(paramQQAppInterface, (ConfigurationService.Config)localObject3, "confess_config");
      paramArrayOfInt = (int[])localObject1;
      break;
      e(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      g(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      m(paramIntent, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      paramArrayOfInt = (int[])localObject1;
      break;
      at(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      h(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      i(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      m(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      ((FlashChatManager)paramQQAppInterface.getManager(216)).a(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      r(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      l(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      ((TroopStoryManager)paramQQAppInterface.getManager(207)).a.a(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      k(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      n(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      s(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      t(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      u(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      v(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      x(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      w(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      paramArrayOfInt = b((ConfigurationService.Config)localObject3, EffectBeautyTools.a(paramQQAppInterface.getApplication()), 180);
      if (paramArrayOfInt == null) {
        break label4052;
      }
      EffectBeautyTools.a(paramQQAppInterface.getApplication(), paramArrayOfInt, ((ConfigurationService.Config)localObject3).version.get(), true);
      paramArrayOfInt = (int[])localObject1;
      break;
      y(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      j(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      t((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      u((ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      z(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      o(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      p(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      ad(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      ae(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      q(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      A(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      paramArrayOfInt = b((ConfigurationService.Config)localObject3, com.tencent.mobileqq.activity.richmedia.VideoFilterTools.a(paramQQAppInterface.getApplication()), 199);
      if (paramArrayOfInt == null) {
        break label4052;
      }
      com.tencent.mobileqq.activity.richmedia.VideoFilterTools.a(paramQQAppInterface.getApplication(), paramArrayOfInt, ((ConfigurationService.Config)localObject3).version.get());
      paramArrayOfInt = (int[])localObject1;
      break;
      paramArrayOfInt = b((ConfigurationService.Config)localObject3, CaptureVideoFilterManager.a(paramQQAppInterface.getApplication()), 225);
      if (paramArrayOfInt == null) {
        break label4052;
      }
      CaptureVideoFilterManager.a().a(paramQQAppInterface.getApplication(), paramArrayOfInt, ((ConfigurationService.Config)localObject3).version.get());
      paramArrayOfInt = (int[])localObject1;
      break;
      B(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      c(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      au(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      av(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      C(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      ShortVideoResourceManager.b(a(paramQQAppInterface, (ConfigurationService.Config)localObject3));
      paramArrayOfInt = (int[])localObject1;
      break;
      paramArrayOfInt = b((ConfigurationService.Config)localObject3, SignalStrengthReport.a(paramQQAppInterface.getApplication()), 218);
      if (paramArrayOfInt == null) {
        break label4052;
      }
      SignalStrengthReport.a(paramQQAppInterface.getApplication(), paramArrayOfInt, ((ConfigurationService.Config)localObject3).version.get());
      paramArrayOfInt = (int[])localObject1;
      break;
      paramArrayOfInt = (AdvertisementVideoPreloadManager)paramQQAppInterface.getManager(237);
      if (paramArrayOfInt == null) {
        break label4052;
      }
      paramArrayOfInt.a(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      E(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      V(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      RDConfigServletProxy.a(paramQQAppInterface, 231, jdField_a_of_type_JavaLangString, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      D(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      a(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      N(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      F(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      H(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      I(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      L(paramQQAppInterface, (ConfigurationService.Config)localObject3);
      paramArrayOfInt = (int[])localObject1;
      break;
      if ((localObject3 == null) || (((ConfigurationService.Config)localObject3).version == null)) {
        break label12041;
      }
      label12041:
      while (((ConfigurationService.Config)localObject3).version.get() == SharedPreUtils.d(paramQQAppInterface.getApp())) {
        return;
      }
      localObject2 = null;
      paramArrayOfInt = (int[])localObject2;
      if (((ConfigurationService.Config)localObject3).msg_content_list != null)
      {
        paramArrayOfInt = (int[])localObject2;
        if (((ConfigurationService.Config)localObject3).msg_content_list.size() > 0)
        {
          paramArrayOfInt = (ConfigurationService.Content)((ConfigurationService.Config)localObject3).msg_content_list.get(0);
          if (paramArrayOfInt.compress.get() != 1) {
            break label12231;
          }
          localObject2 = OlympicUtil.a(paramArrayOfInt.content.get().toByteArray());
          if (localObject2 == null) {
            break label14617;
          }
        }
      }
      for (;;)
      {
        try
        {
          paramArrayOfInt = new String((byte[])localObject2, "UTF-8");
          if (paramArrayOfInt == null) {}
        }
        catch (UnsupportedEncodingException paramArrayOfInt)
        {
          try
          {
            com.tencent.mfsdk.Config.a(new JSONObject(paramArrayOfInt));
            SharedPreUtils.c(getAppRuntime().getApplication(), ((ConfigurationService.Config)localObject3).version.get());
            paramArrayOfInt = (int[])localObject1;
          }
          catch (Exception paramArrayOfInt)
          {
            if (!QLog.isColorLevel()) {
              break label12267;
            }
            QLog.e("SPLASH_ConfigServlet", 2, paramArrayOfInt, new Object[0]);
            paramArrayOfInt = (int[])localObject1;
          }
          paramArrayOfInt = paramArrayOfInt;
          paramArrayOfInt = null;
          continue;
        }
        catch (OutOfMemoryError paramArrayOfInt)
        {
          System.gc();
          try
          {
            paramArrayOfInt = new String((byte[])localObject2, "UTF-8");
          }
          catch (Throwable paramArrayOfInt)
          {
            paramArrayOfInt = null;
          }
          continue;
        }
        label12231:
        paramArrayOfInt = paramArrayOfInt.content.get().toStringUtf8();
        continue;
        label12267:
        break;
        J(paramQQAppInterface, (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        K(paramQQAppInterface, (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        M(paramQQAppInterface, (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        G(paramQQAppInterface, (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        af(paramQQAppInterface, (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        ag(paramQQAppInterface, (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        U(paramQQAppInterface, (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        P(paramQQAppInterface, (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        O(paramQQAppInterface, (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        ((TroopManager)paramQQAppInterface.getManager(51)).jdField_a_of_type_ComTencentMobileqqTroopHomeworkConfigHomeworkConfig.a(paramQQAppInterface, (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        ((TroopManager)paramQQAppInterface.getManager(51)).jdField_a_of_type_ComTencentMobileqqTroopHomeworkReciteConfigReciteConfig.a(paramQQAppInterface, (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        RecentDanceConfigMgr.a(paramQQAppInterface, (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        ((NowEnterManager)paramQQAppInterface.getManager(264)).a((ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        Q(paramQQAppInterface, (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        R(paramQQAppInterface, (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        ((AIOMessageSpreadManager)paramQQAppInterface.getManager(271)).a((ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        ((ApolloManager)paramQQAppInterface.getManager(152)).a(paramQQAppInterface, (ConfigurationService.Config)localObject3, jdField_a_of_type_JavaLangString);
        paramArrayOfInt = (int[])localObject1;
        break;
        QZoneReport.a(paramQQAppInterface, (ConfigurationService.Config)localObject3, paramArrayOfInt.intValue(), jdField_a_of_type_JavaLangString);
        paramArrayOfInt = (int[])localObject1;
        break;
        T(paramQQAppInterface, (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        a(paramQQAppInterface, paramArrayOfInt.intValue(), (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        S(paramQQAppInterface, (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        o(paramIntent, (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        q(paramIntent, (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        p(paramIntent, (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        r(paramIntent, (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        paramArrayOfInt = a((ConfigurationService.Config)localObject3, dov.com.tencent.mobileqq.activity.richmedia.VideoFilterTools.a(paramQQAppInterface.getApp()), 306);
        if (paramArrayOfInt == null) {
          break label4052;
        }
        ConfigSimplifier.a(paramArrayOfInt, EffectFilterTools.jdField_b_of_type_JavaLangString, "temp_filter_zip", new ablq(this, paramQQAppInterface, (ConfigurationService.Config)localObject3));
        paramArrayOfInt = (int[])localObject1;
        break;
        aw(paramQQAppInterface, (ConfigurationService.Config)localObject3);
        paramArrayOfInt = (int[])localObject1;
        break;
        label12751:
        if (localObject1 != null) {
          if ((!bool) && (!PackageUtil.a(paramQQAppInterface.getApp(), "com.tencent.tim"))) {
            ((UpgradeTIMManager)paramQQAppInterface.getManager(255)).a(paramQQAppInterface, (UpgradeTIMWrapper)localObject1);
          }
        }
        for (;;)
        {
          long l2 = System.currentTimeMillis();
          if (QLog.isColorLevel()) {
            QLog.w("SPLASH_ConfigServlet", 2, "receiveAllConfigs|executeSpendTime: " + (l2 - l1) + ", hasQQConfig: " + bool);
          }
          localObject1 = null;
          if (paramIntent == null) {
            break label14604;
          }
          bool = paramIntent.getBooleanExtra("key_is_all_config", false);
          if (!bool) {
            break;
          }
          k = paramIntent.getIntExtra("key_page_req_count", 0);
          QLog.d("SPLASH_ConfigServlet", 2, new Object[] { "[receiveAllConfigs] check for all config page req, pageReqCount=", Integer.valueOf(k) });
          i = k;
          paramBoolean = bool;
          paramArrayOfInt = (int[])localObject1;
          if (k >= 3) {
            break label13096;
          }
          localObject2 = paramRespGetConfig.next_req_types.get();
          i = k;
          paramBoolean = bool;
          paramArrayOfInt = (int[])localObject1;
          if (localObject2 == null) {
            break label13096;
          }
          i = k;
          paramBoolean = bool;
          paramArrayOfInt = (int[])localObject1;
          if (((List)localObject2).size() <= 0) {
            break label13096;
          }
          localObject1 = new int[((List)localObject2).size()];
          m = ((List)localObject2).size();
          j = 0;
          for (;;)
          {
            i = k;
            paramBoolean = bool;
            paramArrayOfInt = (int[])localObject1;
            if (j >= m) {
              break;
            }
            i = ((Integer)((List)localObject2).get(j)).intValue();
            localObject1[j] = i;
            if (localArrayList.size() > 0) {
              localArrayList.remove(new Integer(i));
            }
            j += 1;
          }
          if (QLog.isColorLevel()) {
            QLog.i("UpgradeTIMWrapper", 2, "receiveAllConfigs timWrapper == null");
          }
        }
        i = 0;
        paramArrayOfInt = (int[])localObject1;
        paramBoolean = bool;
        for (;;)
        {
          label13096:
          localObject1 = localArrayList.iterator();
          while (((Iterator)localObject1).hasNext())
          {
            localObject2 = (Integer)((Iterator)localObject1).next();
            if (QLog.isColorLevel()) {
              QLog.w("SPLASH_ConfigServlet", 2, "receiveAllConfigs|noReceiveType: " + localObject2 + ",length: " + localArrayList.size());
            }
            switch (((Integer)localObject2).intValue())
            {
            case 156: 
            default: 
              break;
            case 1: 
              localObject2 = getAppRuntime().getApplication().getFilesDir().getAbsolutePath() + "/splashpic/";
              localObject3 = new File((String)localObject2);
              if ((localObject3 != null) && (((File)localObject3).exists()) && (((File)localObject3).isDirectory()))
              {
                localObject3 = ((File)localObject3).listFiles();
                if (localObject3 != null)
                {
                  k = localObject3.length;
                  j = 0;
                  if (j < k)
                  {
                    localObject4 = localObject3[j];
                    if (localObject4 != null) {}
                  }
                }
              }
              break;
            case 116: 
            case 46: 
            case 26: 
            case 38: 
              for (;;)
              {
                for (;;)
                {
                  j += 1;
                  break label13473;
                  if (QLog.isColorLevel()) {
                    QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|GET_CONFIG_UPGRADE no config, use local config.");
                  }
                  localObject3 = (ConfigHandler)paramQQAppInterface.a(4);
                  localObject4 = UpgradeConfigManager.a("config_upgrade_", jdField_a_of_type_JavaLangString);
                  if (QLog.isColorLevel()) {
                    QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|GET_CONFIG_UPGRADE configContent=" + (String)localObject4);
                  }
                  if (TextUtils.isEmpty((CharSequence)localObject4))
                  {
                    if (QLog.isColorLevel()) {
                      QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|GET_CONFIG_UPGRADE local config is empty, reset local version to 0.");
                    }
                    SharedPreUtils.u(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 0);
                    UpgradeConfigManager.a("config_upgrade_", jdField_a_of_type_JavaLangString);
                    ((ConfigHandler)localObject3).a(UpgradeController.a().a());
                    break;
                  }
                  localObject2 = UpgradeController.a().a();
                  ((UpgradeDetailWrapper)localObject2).a((String)localObject4);
                  if (QLog.isColorLevel()) {
                    QLog.d("SPLASH_ConfigServlet", 2, String.format("receiveAllConfigs|GET_CONFIG_UPGRADE localAppID=%s configAppID=%s", new Object[] { Integer.valueOf(AppSetting.jdField_a_of_type_Int), Integer.valueOf(((UpgradeDetailWrapper)localObject2).jdField_b_of_type_ProtocolKQQConfigUpgradeInfo.iUpgradeSdkId) }));
                  }
                  if (AppSetting.jdField_a_of_type_Int >= ((UpgradeDetailWrapper)localObject2).jdField_b_of_type_ProtocolKQQConfigUpgradeInfo.iUpgradeSdkId)
                  {
                    if (QLog.isColorLevel()) {
                      QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|GET_CONFIG_UPGRADE already upgraded, delete local config.");
                    }
                    SharedPreUtils.u(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 0);
                    UpgradeConfigManager.a("config_upgrade_", jdField_a_of_type_JavaLangString);
                    ((UpgradeDetailWrapper)localObject2).jdField_b_of_type_ProtocolKQQConfigUpgradeInfo.iUpgradeType = 0;
                    ((ConfigHandler)localObject3).a((UpgradeDetailWrapper)localObject2);
                    ((ConfigHandler)localObject3).d();
                    break;
                  }
                  try
                  {
                    if (!((UpgradeDetailWrapper)localObject2).jdField_a_of_type_Boolean)
                    {
                      if (QLog.isColorLevel()) {
                        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|GET_CONFIG_UPGRADE waiting switch bit.");
                      }
                      break;
                    }
                  }
                  finally {}
                }
                if (QLog.isColorLevel()) {
                  QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|GET_CONFIG_UPGRADE do upgrade.");
                }
                UpgradeController.a().a(((UpgradeDetailWrapper)localObject2).jdField_b_of_type_ProtocolKQQConfigUpgradeInfo, (UpgradeController.OnHandleUpgradeFinishListener)localObject3);
                break;
                PatchFileManager.a(paramQQAppInterface);
                break;
                localObject2 = (ClubContentUpdateHandler)paramQQAppInterface.a(16);
                if (localObject2 == null) {
                  break;
                }
                ((ClubContentUpdateHandler)localObject2).a(paramQQAppInterface.getApplication().getApplicationContext());
                break;
                localObject2 = SharedPreUtils.c(paramQQAppInterface.getCurrentAccountUin());
                ((SharedPreferences)localObject2).edit().putString("qav_upgrade_invite_video", null).commit();
                ((SharedPreferences)localObject2).edit().putString("qav_upgrade_invite_multi", null).commit();
                break;
                ThreadManager.post(new ablx(this, (File)localObject4, (String)localObject2), 5, null, true);
              }
            case 87: 
              localObject2 = (ArResourceManager)paramQQAppInterface.getManager(167);
              if (localObject2 != null) {
                ((ArResourceManager)localObject2).a(true, false);
              }
              if (QLog.isColorLevel()) {
                QLog.d("ArConfig_configServlet", 2, "handleResp_GetArResource:no receive respConfig");
              }
              break;
            case 188: 
              if (QLog.isColorLevel()) {
                QLog.d("ArConfig_AR_GLOBAL_CONTROL_COFIG", 2, "handleResp_AR_GLOBAL_CONTROL_COFIG:no receive respConfig");
              }
              break;
            case 206: 
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "config is newest .handleResp_AR_SCAN_STAR_FACE_CONFIG  no receive respConfig");
              }
              break;
            case 205: 
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "config is newest .handleResp_GetArScanFacePreDownConfig  no receive respConfig");
              }
              break;
            case 86: 
              localObject2 = (OlympicManager)paramQQAppInterface.getManager(166);
              if (localObject2 != null)
              {
                ((OlympicManager)localObject2).f();
                ((OlympicManager)localObject2).g();
              }
              if (QLog.isColorLevel()) {
                QLog.d("Olympic.configServlet", 2, "handleResp_GetOlympicActConfig: no receive respConfig");
              }
              break;
            case 42: 
              w(null);
              break;
            case 113: 
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "precover PRECOVER_CONFIG_CMD, failed");
              }
              localObject2 = (PrecoverManager)paramQQAppInterface.getManager(178);
              if (localObject2 != null)
              {
                ((PrecoverManager)localObject2).a();
                ((PrecoverManager)localObject2).a(true);
              }
              break;
            case 133: 
              localObject2 = (ARMapConfigManager)paramQQAppInterface.getManager(189);
              localObject3 = ((ARMapConfigManager)localObject2).a();
              j = paramIntent.getIntExtra("k_req_occasion", 0);
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "GET_AR_MAP_CONFIG noreceiveType ,reqOccasion " + j);
              }
              ((ARMapConfigManager)localObject2).a((ARMapConfig)localObject3, j);
              ArMapUtil.a(paramQQAppInterface, true, 0);
              break;
            case 249: 
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "AV_REDPACKET_CONFIG noreceiveType ");
              }
              localObject2 = (AVRedPacketConfigManager)paramQQAppInterface.getManager(253);
              ((AVRedPacketConfigManager)localObject2).a(((AVRedPacketConfigManager)localObject2).a(), false);
              AVRedPacketDataCollector.a(true);
              break;
            case 119: 
              localObject2 = (BabyQHandler)paramQQAppInterface.a(53);
              if (localObject2 != null) {
                ((BabyQHandler)localObject2).a(false, false);
              }
              break;
            case 185: 
              ScribbleResMgr.a(paramQQAppInterface).a();
              break;
            case 202: 
              if (QLog.isColorLevel()) {
                QLog.i("CU_OPEN_CARD_GUIDE", 2, "no need to update, use local config");
              }
              break;
            case 203: 
              if (QLog.isColorLevel()) {
                QLog.i("CAMPUS_CIRCLE_CONFIG", 2, "no need to update, use local config");
              }
              break;
            case 191: 
              ((AppGuideTipsManager)paramQQAppInterface.getManager(217)).a();
              break;
            case 215: 
              ShortVideoResourceManager.b();
              break;
            case 231: 
              RDConfigServletProxy.a(paramQQAppInterface, 231, jdField_a_of_type_JavaLangString, null);
              break;
            case 290: 
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "APOLLO_NEW_STORE_CONFIG newest");
              }
              break;
            case 297: 
              label13473:
              NativeMonitorConfigHelper.a();
            }
          }
          if ((!paramBoolean) || (i >= 3) || (paramArrayOfInt == null) || (paramArrayOfInt.length <= 0)) {
            break;
          }
          paramIntent = new StringBuilder();
          paramIntent.append("[receiveAllConfigs] send page req, next config type:");
          k = paramArrayOfInt.length;
          j = 0;
          while (j < k)
          {
            paramIntent.append(paramArrayOfInt[j]).append(" ");
            j += 1;
          }
          QLog.d("SPLASH_ConfigServlet", 1, paramIntent.toString());
          paramIntent = new NewIntent(paramQQAppInterface.getApp(), ConfigServlet.class);
          paramIntent.putExtra("k_cmd_type", paramArrayOfInt);
          paramIntent.putExtra("key_uin", jdField_a_of_type_JavaLangString);
          paramIntent.putExtra("key_is_page_req", true);
          if (paramRespGetConfig.cookies.has()) {
            paramIntent.putExtra("key_cookies", paramRespGetConfig.cookies.get().toByteArray());
          }
          paramIntent.putExtra("key_is_all_config", paramBoolean);
          paramIntent.putExtra("key_page_req_count", i + 1);
          paramIntent.putExtra("k_req_occasion", 0);
          paramQQAppInterface.startServlet(paramIntent);
          return;
          label14604:
          paramBoolean = false;
          i = 0;
          paramArrayOfInt = (int[])localObject1;
        }
        label14617:
        paramArrayOfInt = null;
      }
      label14623:
      paramArrayOfInt = (int[])localObject1;
      break label4270;
      paramArrayOfInt = null;
      break label4144;
      label14636:
      bool = false;
    }
  }
  
  /* Error */
  private void a(String paramString)
  {
    // Byte code:
    //   0: aload_0
    //   1: invokevirtual 109	com/tencent/mobileqq/config/splashlogo/ConfigServlet:getAppRuntime	()Lmqq/app/AppRuntime;
    //   4: checkcast 111	com/tencent/mobileqq/app/QQAppInterface
    //   7: sipush 142
    //   10: invokevirtual 183	com/tencent/mobileqq/app/QQAppInterface:getManager	(I)Lmqq/manager/Manager;
    //   13: checkcast 3762	com/tencent/mobileqq/qcall/PstnManager
    //   16: astore 22
    //   18: aload_1
    //   19: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   22: ifne +8 -> 30
    //   25: aload 22
    //   27: ifnonnull +13 -> 40
    //   30: ldc 63
    //   32: iconst_1
    //   33: ldc_w 3764
    //   36: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   39: return
    //   40: aconst_null
    //   41: astore 13
    //   43: aconst_null
    //   44: astore 16
    //   46: aconst_null
    //   47: astore 21
    //   49: aconst_null
    //   50: astore 17
    //   52: aconst_null
    //   53: astore 20
    //   55: iconst_m1
    //   56: istore 4
    //   58: iconst_m1
    //   59: istore_3
    //   60: iconst_0
    //   61: istore_2
    //   62: aconst_null
    //   63: astore 18
    //   65: aconst_null
    //   66: astore 19
    //   68: iload_2
    //   69: istore 7
    //   71: aload 20
    //   73: astore 15
    //   75: aload 21
    //   77: astore 14
    //   79: iload_3
    //   80: istore 6
    //   82: iload 4
    //   84: istore 5
    //   86: invokestatic 3770	android/util/Xml:newPullParser	()Lorg/xmlpull/v1/XmlPullParser;
    //   89: astore 23
    //   91: iload_2
    //   92: istore 7
    //   94: aload 20
    //   96: astore 15
    //   98: aload 21
    //   100: astore 14
    //   102: iload_3
    //   103: istore 6
    //   105: iload 4
    //   107: istore 5
    //   109: aload 23
    //   111: new 431	java/io/ByteArrayInputStream
    //   114: dup
    //   115: aload_1
    //   116: ldc_w 433
    //   119: invokevirtual 437	java/lang/String:getBytes	(Ljava/lang/String;)[B
    //   122: invokespecial 440	java/io/ByteArrayInputStream:<init>	([B)V
    //   125: ldc_w 433
    //   128: invokeinterface 3776 3 0
    //   133: iload_2
    //   134: istore 7
    //   136: aload 20
    //   138: astore 15
    //   140: aload 21
    //   142: astore 14
    //   144: iload_3
    //   145: istore 6
    //   147: iload 4
    //   149: istore 5
    //   151: aload 23
    //   153: invokeinterface 3779 1 0
    //   158: istore 11
    //   160: iconst_0
    //   161: istore_2
    //   162: aconst_null
    //   163: astore_1
    //   164: aload 17
    //   166: astore 13
    //   168: iload_2
    //   169: istore 10
    //   171: aload_1
    //   172: astore 17
    //   174: aload 13
    //   176: astore 16
    //   178: iload_3
    //   179: istore 7
    //   181: iload 4
    //   183: istore 9
    //   185: iload 11
    //   187: iconst_1
    //   188: if_icmpeq +763 -> 951
    //   191: iload_2
    //   192: istore 8
    //   194: aload_1
    //   195: astore 15
    //   197: aload 13
    //   199: astore 14
    //   201: iload_3
    //   202: istore 5
    //   204: iload 4
    //   206: istore 6
    //   208: aload 23
    //   210: invokeinterface 3782 1 0
    //   215: astore 16
    //   217: iload 11
    //   219: tableswitch	default:+21 -> 240, 2:+66->285, 3:+4838->5057
    //   241: ldc 58
    //   243: sipush 6419
    //   246: astore 16
    //   248: iload_2
    //   249: istore 7
    //   251: aload_1
    //   252: astore 15
    //   254: aload 13
    //   256: astore 14
    //   258: iload_3
    //   259: istore 6
    //   261: iload 4
    //   263: istore 5
    //   265: aload 23
    //   267: invokeinterface 3784 1 0
    //   272: istore 11
    //   274: aload 16
    //   276: astore 19
    //   278: aload 17
    //   280: astore 18
    //   282: goto -114 -> 168
    //   285: iload_2
    //   286: istore 8
    //   288: aload_1
    //   289: astore 15
    //   291: aload 13
    //   293: astore 14
    //   295: iload_3
    //   296: istore 5
    //   298: iload 4
    //   300: istore 6
    //   302: aload 16
    //   304: ldc_w 3786
    //   307: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   310: ifeq +209 -> 519
    //   313: iload_2
    //   314: istore 8
    //   316: aload_1
    //   317: astore 15
    //   319: aload 13
    //   321: astore 14
    //   323: iload_3
    //   324: istore 5
    //   326: iload 4
    //   328: istore 6
    //   330: aload 23
    //   332: iconst_0
    //   333: invokeinterface 3789 2 0
    //   338: astore 16
    //   340: iload_2
    //   341: istore 8
    //   343: aload_1
    //   344: astore 15
    //   346: aload 13
    //   348: astore 14
    //   350: iload_3
    //   351: istore 5
    //   353: iload 4
    //   355: istore 6
    //   357: aload 16
    //   359: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   362: ifne +4822 -> 5184
    //   365: iload_2
    //   366: istore 8
    //   368: aload_1
    //   369: astore 15
    //   371: aload 13
    //   373: astore 14
    //   375: iload_3
    //   376: istore 5
    //   378: iload 4
    //   380: istore 6
    //   382: aload 16
    //   384: ldc_w 940
    //   387: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   390: ifeq +36 -> 426
    //   393: iload_2
    //   394: istore 8
    //   396: aload_1
    //   397: astore 15
    //   399: aload 13
    //   401: astore 14
    //   403: iload_3
    //   404: istore 5
    //   406: iload 4
    //   408: istore 6
    //   410: new 3791	com/tencent/mobileqq/qcall/PstnSwitchConfig
    //   413: dup
    //   414: invokespecial 3792	com/tencent/mobileqq/qcall/PstnSwitchConfig:<init>	()V
    //   417: astore 16
    //   419: aload 16
    //   421: astore 13
    //   423: goto +4761 -> 5184
    //   426: iload_2
    //   427: istore 8
    //   429: aload_1
    //   430: astore 15
    //   432: aload 13
    //   434: astore 14
    //   436: iload_3
    //   437: istore 5
    //   439: iload 4
    //   441: istore 6
    //   443: aload 16
    //   445: ldc_w 3794
    //   448: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   451: ifeq +35 -> 486
    //   454: iload_2
    //   455: istore 8
    //   457: aload_1
    //   458: astore 15
    //   460: aload 13
    //   462: astore 14
    //   464: iload_3
    //   465: istore 5
    //   467: iload 4
    //   469: istore 6
    //   471: new 2885	java/util/HashMap
    //   474: dup
    //   475: invokespecial 2886	java/util/HashMap:<init>	()V
    //   478: astore 16
    //   480: aload 16
    //   482: astore_1
    //   483: goto +4701 -> 5184
    //   486: iload_2
    //   487: istore 8
    //   489: aload_1
    //   490: astore 15
    //   492: aload 13
    //   494: astore 14
    //   496: iload_3
    //   497: istore 5
    //   499: iload 4
    //   501: istore 6
    //   503: aload 16
    //   505: ldc_w 3796
    //   508: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   511: ifeq +4673 -> 5184
    //   514: iconst_1
    //   515: istore_2
    //   516: goto +4668 -> 5184
    //   519: iload_2
    //   520: istore 8
    //   522: aload_1
    //   523: astore 15
    //   525: aload 13
    //   527: astore 14
    //   529: iload_3
    //   530: istore 5
    //   532: iload 4
    //   534: istore 6
    //   536: aload 16
    //   538: ldc_w 3798
    //   541: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   544: ifeq +37 -> 581
    //   547: iload_2
    //   548: istore 8
    //   550: aload_1
    //   551: astore 15
    //   553: aload 13
    //   555: astore 14
    //   557: iload_3
    //   558: istore 5
    //   560: iload 4
    //   562: istore 6
    //   564: aload 23
    //   566: iconst_0
    //   567: invokeinterface 3789 2 0
    //   572: astore 17
    //   574: aload 19
    //   576: astore 16
    //   578: goto -330 -> 248
    //   581: iload_2
    //   582: istore 8
    //   584: aload_1
    //   585: astore 15
    //   587: aload 13
    //   589: astore 14
    //   591: iload_3
    //   592: istore 5
    //   594: iload 4
    //   596: istore 6
    //   598: aload 16
    //   600: ldc_w 3799
    //   603: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   606: ifeq +1407 -> 2013
    //   609: iload_2
    //   610: istore 8
    //   612: aload_1
    //   613: astore 15
    //   615: aload 13
    //   617: astore 14
    //   619: iload_3
    //   620: istore 5
    //   622: iload 4
    //   624: istore 6
    //   626: aload 18
    //   628: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   631: ifne +1136 -> 1767
    //   634: aload 13
    //   636: ifnull +1131 -> 1767
    //   639: iload_2
    //   640: istore 8
    //   642: aload_1
    //   643: astore 15
    //   645: aload 13
    //   647: astore 14
    //   649: iload_3
    //   650: istore 5
    //   652: iload 4
    //   654: istore 6
    //   656: aload 23
    //   658: iconst_0
    //   659: invokeinterface 3789 2 0
    //   664: astore 16
    //   666: iload_2
    //   667: istore 8
    //   669: aload_1
    //   670: astore 15
    //   672: aload 13
    //   674: astore 14
    //   676: iload_3
    //   677: istore 5
    //   679: iload 4
    //   681: istore 6
    //   683: aload 16
    //   685: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   688: ifne +4507 -> 5195
    //   691: iload_2
    //   692: istore 8
    //   694: aload_1
    //   695: astore 15
    //   697: aload 13
    //   699: astore 14
    //   701: iload_3
    //   702: istore 5
    //   704: iload 4
    //   706: istore 6
    //   708: aload 18
    //   710: ldc_w 3801
    //   713: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   716: ifeq +708 -> 1424
    //   719: iload_2
    //   720: istore 8
    //   722: aload_1
    //   723: astore 15
    //   725: aload 13
    //   727: astore 14
    //   729: iload_3
    //   730: istore 5
    //   732: iload 4
    //   734: istore 6
    //   736: aload 16
    //   738: ldc_w 3803
    //   741: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   744: ifeq +38 -> 782
    //   747: iload_2
    //   748: istore 8
    //   750: aload_1
    //   751: astore 15
    //   753: aload 13
    //   755: astore 14
    //   757: iload_3
    //   758: istore 5
    //   760: iload 4
    //   762: istore 6
    //   764: aload 13
    //   766: aload 23
    //   768: invokeinterface 3806 1 0
    //   773: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   776: putfield 3807	com/tencent/mobileqq/qcall/PstnSwitchConfig:jdField_a_of_type_Int	I
    //   779: goto +4416 -> 5195
    //   782: iload_2
    //   783: istore 8
    //   785: aload_1
    //   786: astore 15
    //   788: aload 13
    //   790: astore 14
    //   792: iload_3
    //   793: istore 5
    //   795: iload 4
    //   797: istore 6
    //   799: aload 16
    //   801: ldc_w 3809
    //   804: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   807: ifeq +296 -> 1103
    //   810: iload_2
    //   811: istore 8
    //   813: aload_1
    //   814: astore 15
    //   816: aload 13
    //   818: astore 14
    //   820: iload_3
    //   821: istore 5
    //   823: iload 4
    //   825: istore 6
    //   827: aload 13
    //   829: aload 23
    //   831: invokeinterface 3806 1 0
    //   836: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   839: putfield 3810	com/tencent/mobileqq/qcall/PstnSwitchConfig:jdField_b_of_type_Int	I
    //   842: goto +4353 -> 5195
    //   845: astore 18
    //   847: iload_2
    //   848: istore 10
    //   850: aload_1
    //   851: astore 17
    //   853: aload 13
    //   855: astore 16
    //   857: iload_3
    //   858: istore 7
    //   860: iload 4
    //   862: istore 9
    //   864: iload_2
    //   865: istore 8
    //   867: aload_1
    //   868: astore 15
    //   870: aload 13
    //   872: astore 14
    //   874: iload_3
    //   875: istore 5
    //   877: iload 4
    //   879: istore 6
    //   881: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   884: ifeq +67 -> 951
    //   887: iload_2
    //   888: istore 8
    //   890: aload_1
    //   891: astore 15
    //   893: aload 13
    //   895: astore 14
    //   897: iload_3
    //   898: istore 5
    //   900: iload 4
    //   902: istore 6
    //   904: ldc 63
    //   906: iconst_2
    //   907: new 122	java/lang/StringBuilder
    //   910: dup
    //   911: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   914: ldc_w 3812
    //   917: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   920: aload 18
    //   922: invokevirtual 3813	java/lang/NumberFormatException:toString	()Ljava/lang/String;
    //   925: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   928: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   931: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   934: iload 4
    //   936: istore 9
    //   938: iload_3
    //   939: istore 7
    //   941: aload 13
    //   943: astore 16
    //   945: aload_1
    //   946: astore 17
    //   948: iload_2
    //   949: istore 10
    //   951: aload 17
    //   953: astore 13
    //   955: iload 10
    //   957: istore 4
    //   959: iload 7
    //   961: istore_3
    //   962: aload 22
    //   964: ifnull -925 -> 39
    //   967: aload 16
    //   969: ifnull +27 -> 996
    //   972: aload 22
    //   974: aload 16
    //   976: invokevirtual 3816	com/tencent/mobileqq/qcall/PstnManager:a	(Lcom/tencent/mobileqq/qcall/PstnSwitchConfig;)V
    //   979: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   982: ifeq +14 -> 996
    //   985: ldc 63
    //   987: iconst_2
    //   988: aload 16
    //   990: invokevirtual 3817	com/tencent/mobileqq/qcall/PstnSwitchConfig:toString	()Ljava/lang/String;
    //   993: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   996: aload 13
    //   998: ifnull +10 -> 1008
    //   1001: aload 22
    //   1003: aload 13
    //   1005: invokevirtual 3820	com/tencent/mobileqq/qcall/PstnManager:a	(Ljava/util/HashMap;)V
    //   1008: iload_3
    //   1009: iconst_m1
    //   1010: if_icmpeq +41 -> 1051
    //   1013: aload 22
    //   1015: iload_3
    //   1016: invokevirtual 3821	com/tencent/mobileqq/qcall/PstnManager:b	(I)V
    //   1019: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   1022: ifeq +29 -> 1051
    //   1025: ldc 63
    //   1027: iconst_2
    //   1028: new 122	java/lang/StringBuilder
    //   1031: dup
    //   1032: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   1035: ldc_w 3823
    //   1038: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1041: iload_3
    //   1042: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   1045: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1048: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   1051: iload 4
    //   1053: ifeq -1014 -> 39
    //   1056: iload 9
    //   1058: iconst_m1
    //   1059: if_icmpeq -1020 -> 39
    //   1062: aload 22
    //   1064: iload 9
    //   1066: invokevirtual 3824	com/tencent/mobileqq/qcall/PstnManager:a	(I)V
    //   1069: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   1072: ifeq -1033 -> 39
    //   1075: ldc 63
    //   1077: iconst_2
    //   1078: new 122	java/lang/StringBuilder
    //   1081: dup
    //   1082: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   1085: ldc_w 3826
    //   1088: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1091: iload 9
    //   1093: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   1096: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1099: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   1102: return
    //   1103: iload_2
    //   1104: istore 8
    //   1106: aload_1
    //   1107: astore 15
    //   1109: aload 13
    //   1111: astore 14
    //   1113: iload_3
    //   1114: istore 5
    //   1116: iload 4
    //   1118: istore 6
    //   1120: aload 16
    //   1122: ldc_w 3828
    //   1125: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1128: ifeq +233 -> 1361
    //   1131: iload_2
    //   1132: istore 8
    //   1134: aload_1
    //   1135: astore 15
    //   1137: aload 13
    //   1139: astore 14
    //   1141: iload_3
    //   1142: istore 5
    //   1144: iload 4
    //   1146: istore 6
    //   1148: aload 13
    //   1150: aload 23
    //   1152: invokeinterface 3806 1 0
    //   1157: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   1160: putfield 3830	com/tencent/mobileqq/qcall/PstnSwitchConfig:c	I
    //   1163: goto +4032 -> 5195
    //   1166: astore 18
    //   1168: iload_2
    //   1169: istore 10
    //   1171: aload_1
    //   1172: astore 17
    //   1174: aload 13
    //   1176: astore 16
    //   1178: iload_3
    //   1179: istore 7
    //   1181: iload 4
    //   1183: istore 9
    //   1185: iload_2
    //   1186: istore 8
    //   1188: aload_1
    //   1189: astore 15
    //   1191: aload 13
    //   1193: astore 14
    //   1195: iload_3
    //   1196: istore 5
    //   1198: iload 4
    //   1200: istore 6
    //   1202: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   1205: ifeq -254 -> 951
    //   1208: iload_2
    //   1209: istore 8
    //   1211: aload_1
    //   1212: astore 15
    //   1214: aload 13
    //   1216: astore 14
    //   1218: iload_3
    //   1219: istore 5
    //   1221: iload 4
    //   1223: istore 6
    //   1225: ldc 63
    //   1227: iconst_2
    //   1228: new 122	java/lang/StringBuilder
    //   1231: dup
    //   1232: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   1235: ldc_w 3832
    //   1238: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1241: aload 18
    //   1243: invokevirtual 3833	java/io/IOException:toString	()Ljava/lang/String;
    //   1246: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1249: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1252: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   1255: iload_2
    //   1256: istore 10
    //   1258: aload_1
    //   1259: astore 17
    //   1261: aload 13
    //   1263: astore 16
    //   1265: iload_3
    //   1266: istore 7
    //   1268: iload 4
    //   1270: istore 9
    //   1272: goto -321 -> 951
    //   1275: astore_1
    //   1276: iload 8
    //   1278: istore 7
    //   1280: iload 6
    //   1282: istore_2
    //   1283: iload 5
    //   1285: istore 6
    //   1287: iload 7
    //   1289: istore 4
    //   1291: aload 15
    //   1293: astore 13
    //   1295: aload 14
    //   1297: astore 16
    //   1299: iload 6
    //   1301: istore_3
    //   1302: iload_2
    //   1303: istore 9
    //   1305: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   1308: ifeq -346 -> 962
    //   1311: ldc 63
    //   1313: iconst_2
    //   1314: new 122	java/lang/StringBuilder
    //   1317: dup
    //   1318: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   1321: ldc_w 3835
    //   1324: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1327: aload_1
    //   1328: invokevirtual 3836	org/xmlpull/v1/XmlPullParserException:toString	()Ljava/lang/String;
    //   1331: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   1334: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   1337: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   1340: iload 7
    //   1342: istore 4
    //   1344: aload 15
    //   1346: astore 13
    //   1348: aload 14
    //   1350: astore 16
    //   1352: iload 6
    //   1354: istore_3
    //   1355: iload_2
    //   1356: istore 9
    //   1358: goto -396 -> 962
    //   1361: iload_2
    //   1362: istore 8
    //   1364: aload_1
    //   1365: astore 15
    //   1367: aload 13
    //   1369: astore 14
    //   1371: iload_3
    //   1372: istore 5
    //   1374: iload 4
    //   1376: istore 6
    //   1378: aload 16
    //   1380: ldc_w 3838
    //   1383: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1386: ifeq +3809 -> 5195
    //   1389: iload_2
    //   1390: istore 8
    //   1392: aload_1
    //   1393: astore 15
    //   1395: aload 13
    //   1397: astore 14
    //   1399: iload_3
    //   1400: istore 5
    //   1402: iload 4
    //   1404: istore 6
    //   1406: aload 22
    //   1408: aload 23
    //   1410: invokeinterface 3806 1 0
    //   1415: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   1418: invokevirtual 3840	com/tencent/mobileqq/qcall/PstnManager:c	(I)V
    //   1421: goto +3774 -> 5195
    //   1424: iload_2
    //   1425: istore 8
    //   1427: aload_1
    //   1428: astore 15
    //   1430: aload 13
    //   1432: astore 14
    //   1434: iload_3
    //   1435: istore 5
    //   1437: iload 4
    //   1439: istore 6
    //   1441: aload 18
    //   1443: ldc_w 3842
    //   1446: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1449: ifeq +3746 -> 5195
    //   1452: iload_2
    //   1453: istore 8
    //   1455: aload_1
    //   1456: astore 15
    //   1458: aload 13
    //   1460: astore 14
    //   1462: iload_3
    //   1463: istore 5
    //   1465: iload 4
    //   1467: istore 6
    //   1469: aload 16
    //   1471: ldc_w 3803
    //   1474: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1477: ifeq +38 -> 1515
    //   1480: iload_2
    //   1481: istore 8
    //   1483: aload_1
    //   1484: astore 15
    //   1486: aload 13
    //   1488: astore 14
    //   1490: iload_3
    //   1491: istore 5
    //   1493: iload 4
    //   1495: istore 6
    //   1497: aload 13
    //   1499: aload 23
    //   1501: invokeinterface 3806 1 0
    //   1506: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   1509: putfield 3844	com/tencent/mobileqq/qcall/PstnSwitchConfig:d	I
    //   1512: goto +3683 -> 5195
    //   1515: iload_2
    //   1516: istore 8
    //   1518: aload_1
    //   1519: astore 15
    //   1521: aload 13
    //   1523: astore 14
    //   1525: iload_3
    //   1526: istore 5
    //   1528: iload 4
    //   1530: istore 6
    //   1532: aload 16
    //   1534: ldc_w 3846
    //   1537: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1540: ifeq +38 -> 1578
    //   1543: iload_2
    //   1544: istore 8
    //   1546: aload_1
    //   1547: astore 15
    //   1549: aload 13
    //   1551: astore 14
    //   1553: iload_3
    //   1554: istore 5
    //   1556: iload 4
    //   1558: istore 6
    //   1560: aload 13
    //   1562: aload 23
    //   1564: invokeinterface 3806 1 0
    //   1569: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   1572: putfield 3848	com/tencent/mobileqq/qcall/PstnSwitchConfig:e	I
    //   1575: goto +3620 -> 5195
    //   1578: iload_2
    //   1579: istore 8
    //   1581: aload_1
    //   1582: astore 15
    //   1584: aload 13
    //   1586: astore 14
    //   1588: iload_3
    //   1589: istore 5
    //   1591: iload 4
    //   1593: istore 6
    //   1595: aload 16
    //   1597: ldc_w 3850
    //   1600: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1603: ifeq +38 -> 1641
    //   1606: iload_2
    //   1607: istore 8
    //   1609: aload_1
    //   1610: astore 15
    //   1612: aload 13
    //   1614: astore 14
    //   1616: iload_3
    //   1617: istore 5
    //   1619: iload 4
    //   1621: istore 6
    //   1623: aload 13
    //   1625: aload 23
    //   1627: invokeinterface 3806 1 0
    //   1632: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   1635: putfield 3852	com/tencent/mobileqq/qcall/PstnSwitchConfig:f	I
    //   1638: goto +3557 -> 5195
    //   1641: iload_2
    //   1642: istore 8
    //   1644: aload_1
    //   1645: astore 15
    //   1647: aload 13
    //   1649: astore 14
    //   1651: iload_3
    //   1652: istore 5
    //   1654: iload 4
    //   1656: istore 6
    //   1658: aload 16
    //   1660: ldc_w 3854
    //   1663: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1666: ifeq +38 -> 1704
    //   1669: iload_2
    //   1670: istore 8
    //   1672: aload_1
    //   1673: astore 15
    //   1675: aload 13
    //   1677: astore 14
    //   1679: iload_3
    //   1680: istore 5
    //   1682: iload 4
    //   1684: istore 6
    //   1686: aload 13
    //   1688: aload 23
    //   1690: invokeinterface 3806 1 0
    //   1695: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   1698: putfield 3855	com/tencent/mobileqq/qcall/PstnSwitchConfig:g	I
    //   1701: goto +3494 -> 5195
    //   1704: iload_2
    //   1705: istore 8
    //   1707: aload_1
    //   1708: astore 15
    //   1710: aload 13
    //   1712: astore 14
    //   1714: iload_3
    //   1715: istore 5
    //   1717: iload 4
    //   1719: istore 6
    //   1721: aload 16
    //   1723: ldc_w 3838
    //   1726: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1729: ifeq +3466 -> 5195
    //   1732: iload_2
    //   1733: istore 8
    //   1735: aload_1
    //   1736: astore 15
    //   1738: aload 13
    //   1740: astore 14
    //   1742: iload_3
    //   1743: istore 5
    //   1745: iload 4
    //   1747: istore 6
    //   1749: aload 22
    //   1751: aload 23
    //   1753: invokeinterface 3806 1 0
    //   1758: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   1761: invokevirtual 3857	com/tencent/mobileqq/qcall/PstnManager:d	(I)V
    //   1764: goto +3431 -> 5195
    //   1767: aload_1
    //   1768: ifnull +37 -> 1805
    //   1771: iload_2
    //   1772: istore 8
    //   1774: aload_1
    //   1775: astore 15
    //   1777: aload 13
    //   1779: astore 14
    //   1781: iload_3
    //   1782: istore 5
    //   1784: iload 4
    //   1786: istore 6
    //   1788: aload 23
    //   1790: iconst_0
    //   1791: invokeinterface 3789 2 0
    //   1796: astore 16
    //   1798: aload 18
    //   1800: astore 17
    //   1802: goto -1554 -> 248
    //   1805: iload_2
    //   1806: ifeq -1566 -> 240
    //   1809: iload_2
    //   1810: istore 8
    //   1812: aload_1
    //   1813: astore 15
    //   1815: aload 13
    //   1817: astore 14
    //   1819: iload_3
    //   1820: istore 5
    //   1822: iload 4
    //   1824: istore 6
    //   1826: aload 23
    //   1828: iconst_0
    //   1829: invokeinterface 3789 2 0
    //   1834: astore 16
    //   1836: iload_2
    //   1837: istore 8
    //   1839: aload_1
    //   1840: astore 15
    //   1842: aload 13
    //   1844: astore 14
    //   1846: iload_3
    //   1847: istore 5
    //   1849: iload 4
    //   1851: istore 6
    //   1853: aload 16
    //   1855: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   1858: ifne +67 -> 1925
    //   1861: iload_2
    //   1862: istore 8
    //   1864: aload_1
    //   1865: astore 15
    //   1867: aload 13
    //   1869: astore 14
    //   1871: iload_3
    //   1872: istore 5
    //   1874: iload 4
    //   1876: istore 6
    //   1878: aload 16
    //   1880: ldc_w 3859
    //   1883: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1886: ifeq +39 -> 1925
    //   1889: iload_2
    //   1890: istore 8
    //   1892: aload_1
    //   1893: astore 15
    //   1895: aload 13
    //   1897: astore 14
    //   1899: iload_3
    //   1900: istore 5
    //   1902: iload 4
    //   1904: istore 6
    //   1906: aload 23
    //   1908: invokeinterface 3806 1 0
    //   1913: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   1916: istore 7
    //   1918: iload 7
    //   1920: istore 4
    //   1922: goto +3284 -> 5206
    //   1925: iload_2
    //   1926: istore 8
    //   1928: aload_1
    //   1929: astore 15
    //   1931: aload 13
    //   1933: astore 14
    //   1935: iload_3
    //   1936: istore 5
    //   1938: iload 4
    //   1940: istore 6
    //   1942: aload 16
    //   1944: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   1947: ifne +3234 -> 5181
    //   1950: iload_2
    //   1951: istore 8
    //   1953: aload_1
    //   1954: astore 15
    //   1956: aload 13
    //   1958: astore 14
    //   1960: iload_3
    //   1961: istore 5
    //   1963: iload 4
    //   1965: istore 6
    //   1967: aload 16
    //   1969: ldc_w 3861
    //   1972: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   1975: ifeq +3206 -> 5181
    //   1978: iload_2
    //   1979: istore 8
    //   1981: aload_1
    //   1982: astore 15
    //   1984: aload 13
    //   1986: astore 14
    //   1988: iload_3
    //   1989: istore 5
    //   1991: iload 4
    //   1993: istore 6
    //   1995: aload 23
    //   1997: invokeinterface 3806 1 0
    //   2002: invokestatic 604	java/lang/Integer:parseInt	(Ljava/lang/String;)I
    //   2005: istore 7
    //   2007: iload 7
    //   2009: istore_3
    //   2010: goto +3196 -> 5206
    //   2013: iload_2
    //   2014: istore 8
    //   2016: aload_1
    //   2017: astore 15
    //   2019: aload 13
    //   2021: astore 14
    //   2023: iload_3
    //   2024: istore 5
    //   2026: iload 4
    //   2028: istore 6
    //   2030: aload 16
    //   2032: ldc_w 1095
    //   2035: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2038: ifeq +1045 -> 3083
    //   2041: iload_2
    //   2042: istore 8
    //   2044: aload_1
    //   2045: astore 15
    //   2047: aload 13
    //   2049: astore 14
    //   2051: iload_3
    //   2052: istore 5
    //   2054: iload 4
    //   2056: istore 6
    //   2058: aload 19
    //   2060: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   2063: ifne -1823 -> 240
    //   2066: aload_1
    //   2067: ifnull -1827 -> 240
    //   2070: iload_2
    //   2071: istore 8
    //   2073: aload_1
    //   2074: astore 15
    //   2076: aload 13
    //   2078: astore 14
    //   2080: iload_3
    //   2081: istore 5
    //   2083: iload 4
    //   2085: istore 6
    //   2087: aload 23
    //   2089: iconst_0
    //   2090: invokeinterface 3789 2 0
    //   2095: astore 16
    //   2097: iload_2
    //   2098: istore 8
    //   2100: aload_1
    //   2101: astore 15
    //   2103: aload 13
    //   2105: astore 14
    //   2107: iload_3
    //   2108: istore 5
    //   2110: iload 4
    //   2112: istore 6
    //   2114: aload 23
    //   2116: invokeinterface 3806 1 0
    //   2121: astore 17
    //   2123: iload_2
    //   2124: istore 8
    //   2126: aload_1
    //   2127: astore 15
    //   2129: aload 13
    //   2131: astore 14
    //   2133: iload_3
    //   2134: istore 5
    //   2136: iload 4
    //   2138: istore 6
    //   2140: aload 17
    //   2142: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   2145: ifeq +40 -> 2185
    //   2148: iload_2
    //   2149: istore 8
    //   2151: aload_1
    //   2152: astore 15
    //   2154: aload 13
    //   2156: astore 14
    //   2158: iload_3
    //   2159: istore 5
    //   2161: iload 4
    //   2163: istore 6
    //   2165: ldc 63
    //   2167: iconst_1
    //   2168: ldc_w 3863
    //   2171: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   2174: aload 19
    //   2176: astore 16
    //   2178: aload 18
    //   2180: astore 17
    //   2182: goto -1934 -> 248
    //   2185: iload_2
    //   2186: istore 8
    //   2188: aload_1
    //   2189: astore 15
    //   2191: aload 13
    //   2193: astore 14
    //   2195: iload_3
    //   2196: istore 5
    //   2198: iload 4
    //   2200: istore 6
    //   2202: aload 19
    //   2204: ldc_w 3865
    //   2207: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2210: ifeq +366 -> 2576
    //   2213: iload_2
    //   2214: istore 8
    //   2216: aload_1
    //   2217: astore 15
    //   2219: aload 13
    //   2221: astore 14
    //   2223: iload_3
    //   2224: istore 5
    //   2226: iload 4
    //   2228: istore 6
    //   2230: aload 16
    //   2232: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   2235: ifne +2982 -> 5217
    //   2238: iload_2
    //   2239: istore 8
    //   2241: aload_1
    //   2242: astore 15
    //   2244: aload 13
    //   2246: astore 14
    //   2248: iload_3
    //   2249: istore 5
    //   2251: iload 4
    //   2253: istore 6
    //   2255: aload 16
    //   2257: ldc_w 3801
    //   2260: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2263: ifeq +144 -> 2407
    //   2266: iload_2
    //   2267: istore 8
    //   2269: aload_1
    //   2270: astore 15
    //   2272: aload 13
    //   2274: astore 14
    //   2276: iload_3
    //   2277: istore 5
    //   2279: iload 4
    //   2281: istore 6
    //   2283: aload 18
    //   2285: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   2288: ifne +2929 -> 5217
    //   2291: iload_2
    //   2292: istore 8
    //   2294: aload_1
    //   2295: astore 15
    //   2297: aload 13
    //   2299: astore 14
    //   2301: iload_3
    //   2302: istore 5
    //   2304: iload 4
    //   2306: istore 6
    //   2308: aload 18
    //   2310: ldc_w 3867
    //   2313: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2316: ifeq +33 -> 2349
    //   2319: iload_2
    //   2320: istore 8
    //   2322: aload_1
    //   2323: astore 15
    //   2325: aload 13
    //   2327: astore 14
    //   2329: iload_3
    //   2330: istore 5
    //   2332: iload 4
    //   2334: istore 6
    //   2336: aload_1
    //   2337: ldc_w 3869
    //   2340: aload 17
    //   2342: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   2345: pop
    //   2346: goto +2871 -> 5217
    //   2349: iload_2
    //   2350: istore 8
    //   2352: aload_1
    //   2353: astore 15
    //   2355: aload 13
    //   2357: astore 14
    //   2359: iload_3
    //   2360: istore 5
    //   2362: iload 4
    //   2364: istore 6
    //   2366: aload 18
    //   2368: ldc_w 3871
    //   2371: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2374: ifeq +2843 -> 5217
    //   2377: iload_2
    //   2378: istore 8
    //   2380: aload_1
    //   2381: astore 15
    //   2383: aload 13
    //   2385: astore 14
    //   2387: iload_3
    //   2388: istore 5
    //   2390: iload 4
    //   2392: istore 6
    //   2394: aload_1
    //   2395: ldc_w 3873
    //   2398: aload 17
    //   2400: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   2403: pop
    //   2404: goto +2813 -> 5217
    //   2407: iload_2
    //   2408: istore 8
    //   2410: aload_1
    //   2411: astore 15
    //   2413: aload 13
    //   2415: astore 14
    //   2417: iload_3
    //   2418: istore 5
    //   2420: iload 4
    //   2422: istore 6
    //   2424: aload 16
    //   2426: ldc_w 3842
    //   2429: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2432: ifeq +2785 -> 5217
    //   2435: iload_2
    //   2436: istore 8
    //   2438: aload_1
    //   2439: astore 15
    //   2441: aload 13
    //   2443: astore 14
    //   2445: iload_3
    //   2446: istore 5
    //   2448: iload 4
    //   2450: istore 6
    //   2452: aload 18
    //   2454: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   2457: ifne +2760 -> 5217
    //   2460: iload_2
    //   2461: istore 8
    //   2463: aload_1
    //   2464: astore 15
    //   2466: aload 13
    //   2468: astore 14
    //   2470: iload_3
    //   2471: istore 5
    //   2473: iload 4
    //   2475: istore 6
    //   2477: aload 18
    //   2479: ldc_w 3867
    //   2482: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2485: ifeq +33 -> 2518
    //   2488: iload_2
    //   2489: istore 8
    //   2491: aload_1
    //   2492: astore 15
    //   2494: aload 13
    //   2496: astore 14
    //   2498: iload_3
    //   2499: istore 5
    //   2501: iload 4
    //   2503: istore 6
    //   2505: aload_1
    //   2506: ldc_w 3875
    //   2509: aload 17
    //   2511: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   2514: pop
    //   2515: goto +2702 -> 5217
    //   2518: iload_2
    //   2519: istore 8
    //   2521: aload_1
    //   2522: astore 15
    //   2524: aload 13
    //   2526: astore 14
    //   2528: iload_3
    //   2529: istore 5
    //   2531: iload 4
    //   2533: istore 6
    //   2535: aload 18
    //   2537: ldc_w 3871
    //   2540: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2543: ifeq +2674 -> 5217
    //   2546: iload_2
    //   2547: istore 8
    //   2549: aload_1
    //   2550: astore 15
    //   2552: aload 13
    //   2554: astore 14
    //   2556: iload_3
    //   2557: istore 5
    //   2559: iload 4
    //   2561: istore 6
    //   2563: aload_1
    //   2564: ldc_w 3877
    //   2567: aload 17
    //   2569: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   2572: pop
    //   2573: goto +2644 -> 5217
    //   2576: iload_2
    //   2577: istore 8
    //   2579: aload_1
    //   2580: astore 15
    //   2582: aload 13
    //   2584: astore 14
    //   2586: iload_3
    //   2587: istore 5
    //   2589: iload 4
    //   2591: istore 6
    //   2593: aload 19
    //   2595: ldc_w 3879
    //   2598: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2601: ifeq +144 -> 2745
    //   2604: iload_2
    //   2605: istore 8
    //   2607: aload_1
    //   2608: astore 15
    //   2610: aload 13
    //   2612: astore 14
    //   2614: iload_3
    //   2615: istore 5
    //   2617: iload 4
    //   2619: istore 6
    //   2621: aload 16
    //   2623: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   2626: ifne +2591 -> 5217
    //   2629: iload_2
    //   2630: istore 8
    //   2632: aload_1
    //   2633: astore 15
    //   2635: aload 13
    //   2637: astore 14
    //   2639: iload_3
    //   2640: istore 5
    //   2642: iload 4
    //   2644: istore 6
    //   2646: aload 16
    //   2648: ldc_w 3801
    //   2651: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2654: ifeq +33 -> 2687
    //   2657: iload_2
    //   2658: istore 8
    //   2660: aload_1
    //   2661: astore 15
    //   2663: aload 13
    //   2665: astore 14
    //   2667: iload_3
    //   2668: istore 5
    //   2670: iload 4
    //   2672: istore 6
    //   2674: aload_1
    //   2675: ldc_w 3881
    //   2678: aload 17
    //   2680: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   2683: pop
    //   2684: goto +2533 -> 5217
    //   2687: iload_2
    //   2688: istore 8
    //   2690: aload_1
    //   2691: astore 15
    //   2693: aload 13
    //   2695: astore 14
    //   2697: iload_3
    //   2698: istore 5
    //   2700: iload 4
    //   2702: istore 6
    //   2704: aload 16
    //   2706: ldc_w 3842
    //   2709: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2712: ifeq +2505 -> 5217
    //   2715: iload_2
    //   2716: istore 8
    //   2718: aload_1
    //   2719: astore 15
    //   2721: aload 13
    //   2723: astore 14
    //   2725: iload_3
    //   2726: istore 5
    //   2728: iload 4
    //   2730: istore 6
    //   2732: aload_1
    //   2733: ldc_w 3883
    //   2736: aload 17
    //   2738: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   2741: pop
    //   2742: goto +2475 -> 5217
    //   2745: iload_2
    //   2746: istore 8
    //   2748: aload_1
    //   2749: astore 15
    //   2751: aload 13
    //   2753: astore 14
    //   2755: iload_3
    //   2756: istore 5
    //   2758: iload 4
    //   2760: istore 6
    //   2762: aload 19
    //   2764: ldc_w 3885
    //   2767: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2770: ifeq +144 -> 2914
    //   2773: iload_2
    //   2774: istore 8
    //   2776: aload_1
    //   2777: astore 15
    //   2779: aload 13
    //   2781: astore 14
    //   2783: iload_3
    //   2784: istore 5
    //   2786: iload 4
    //   2788: istore 6
    //   2790: aload 16
    //   2792: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   2795: ifne +2422 -> 5217
    //   2798: iload_2
    //   2799: istore 8
    //   2801: aload_1
    //   2802: astore 15
    //   2804: aload 13
    //   2806: astore 14
    //   2808: iload_3
    //   2809: istore 5
    //   2811: iload 4
    //   2813: istore 6
    //   2815: aload 16
    //   2817: ldc_w 3887
    //   2820: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2823: ifeq +33 -> 2856
    //   2826: iload_2
    //   2827: istore 8
    //   2829: aload_1
    //   2830: astore 15
    //   2832: aload 13
    //   2834: astore 14
    //   2836: iload_3
    //   2837: istore 5
    //   2839: iload 4
    //   2841: istore 6
    //   2843: aload_1
    //   2844: ldc_w 3889
    //   2847: aload 17
    //   2849: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   2852: pop
    //   2853: goto +2364 -> 5217
    //   2856: iload_2
    //   2857: istore 8
    //   2859: aload_1
    //   2860: astore 15
    //   2862: aload 13
    //   2864: astore 14
    //   2866: iload_3
    //   2867: istore 5
    //   2869: iload 4
    //   2871: istore 6
    //   2873: aload 16
    //   2875: ldc_w 3891
    //   2878: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2881: ifeq +2336 -> 5217
    //   2884: iload_2
    //   2885: istore 8
    //   2887: aload_1
    //   2888: astore 15
    //   2890: aload 13
    //   2892: astore 14
    //   2894: iload_3
    //   2895: istore 5
    //   2897: iload 4
    //   2899: istore 6
    //   2901: aload_1
    //   2902: ldc_w 3893
    //   2905: aload 17
    //   2907: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   2910: pop
    //   2911: goto +2306 -> 5217
    //   2914: iload_2
    //   2915: istore 8
    //   2917: aload_1
    //   2918: astore 15
    //   2920: aload 13
    //   2922: astore 14
    //   2924: iload_3
    //   2925: istore 5
    //   2927: iload 4
    //   2929: istore 6
    //   2931: aload 19
    //   2933: ldc_w 3895
    //   2936: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2939: ifeq +2278 -> 5217
    //   2942: iload_2
    //   2943: istore 8
    //   2945: aload_1
    //   2946: astore 15
    //   2948: aload 13
    //   2950: astore 14
    //   2952: iload_3
    //   2953: istore 5
    //   2955: iload 4
    //   2957: istore 6
    //   2959: aload 16
    //   2961: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   2964: ifne +2253 -> 5217
    //   2967: iload_2
    //   2968: istore 8
    //   2970: aload_1
    //   2971: astore 15
    //   2973: aload 13
    //   2975: astore 14
    //   2977: iload_3
    //   2978: istore 5
    //   2980: iload 4
    //   2982: istore 6
    //   2984: aload 16
    //   2986: ldc_w 3801
    //   2989: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   2992: ifeq +33 -> 3025
    //   2995: iload_2
    //   2996: istore 8
    //   2998: aload_1
    //   2999: astore 15
    //   3001: aload 13
    //   3003: astore 14
    //   3005: iload_3
    //   3006: istore 5
    //   3008: iload 4
    //   3010: istore 6
    //   3012: aload_1
    //   3013: ldc_w 3897
    //   3016: aload 17
    //   3018: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   3021: pop
    //   3022: goto +2195 -> 5217
    //   3025: iload_2
    //   3026: istore 8
    //   3028: aload_1
    //   3029: astore 15
    //   3031: aload 13
    //   3033: astore 14
    //   3035: iload_3
    //   3036: istore 5
    //   3038: iload 4
    //   3040: istore 6
    //   3042: aload 16
    //   3044: ldc_w 3842
    //   3047: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   3050: ifeq +2167 -> 5217
    //   3053: iload_2
    //   3054: istore 8
    //   3056: aload_1
    //   3057: astore 15
    //   3059: aload 13
    //   3061: astore 14
    //   3063: iload_3
    //   3064: istore 5
    //   3066: iload 4
    //   3068: istore 6
    //   3070: aload_1
    //   3071: ldc_w 3899
    //   3074: aload 17
    //   3076: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   3079: pop
    //   3080: goto +2137 -> 5217
    //   3083: iload_2
    //   3084: istore 8
    //   3086: aload_1
    //   3087: astore 15
    //   3089: aload 13
    //   3091: astore 14
    //   3093: iload_3
    //   3094: istore 5
    //   3096: iload 4
    //   3098: istore 6
    //   3100: aload 16
    //   3102: ldc_w 3901
    //   3105: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   3108: ifeq +876 -> 3984
    //   3111: iload_2
    //   3112: istore 8
    //   3114: aload_1
    //   3115: astore 15
    //   3117: aload 13
    //   3119: astore 14
    //   3121: iload_3
    //   3122: istore 5
    //   3124: iload 4
    //   3126: istore 6
    //   3128: aload 19
    //   3130: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   3133: ifne -2893 -> 240
    //   3136: aload_1
    //   3137: ifnull -2897 -> 240
    //   3140: iload_2
    //   3141: istore 8
    //   3143: aload_1
    //   3144: astore 15
    //   3146: aload 13
    //   3148: astore 14
    //   3150: iload_3
    //   3151: istore 5
    //   3153: iload 4
    //   3155: istore 6
    //   3157: aload 23
    //   3159: iconst_0
    //   3160: invokeinterface 3789 2 0
    //   3165: astore 16
    //   3167: iload_2
    //   3168: istore 8
    //   3170: aload_1
    //   3171: astore 15
    //   3173: aload 13
    //   3175: astore 14
    //   3177: iload_3
    //   3178: istore 5
    //   3180: iload 4
    //   3182: istore 6
    //   3184: aload 23
    //   3186: invokeinterface 3806 1 0
    //   3191: astore 17
    //   3193: iload_2
    //   3194: istore 8
    //   3196: aload_1
    //   3197: astore 15
    //   3199: aload 13
    //   3201: astore 14
    //   3203: iload_3
    //   3204: istore 5
    //   3206: iload 4
    //   3208: istore 6
    //   3210: aload 17
    //   3212: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   3215: ifeq +40 -> 3255
    //   3218: iload_2
    //   3219: istore 8
    //   3221: aload_1
    //   3222: astore 15
    //   3224: aload 13
    //   3226: astore 14
    //   3228: iload_3
    //   3229: istore 5
    //   3231: iload 4
    //   3233: istore 6
    //   3235: ldc 63
    //   3237: iconst_1
    //   3238: ldc_w 3903
    //   3241: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   3244: aload 19
    //   3246: astore 16
    //   3248: aload 18
    //   3250: astore 17
    //   3252: goto -3004 -> 248
    //   3255: iload_2
    //   3256: istore 8
    //   3258: aload_1
    //   3259: astore 15
    //   3261: aload 13
    //   3263: astore 14
    //   3265: iload_3
    //   3266: istore 5
    //   3268: iload 4
    //   3270: istore 6
    //   3272: aload 19
    //   3274: ldc_w 3865
    //   3277: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   3280: ifeq +366 -> 3646
    //   3283: iload_2
    //   3284: istore 8
    //   3286: aload_1
    //   3287: astore 15
    //   3289: aload 13
    //   3291: astore 14
    //   3293: iload_3
    //   3294: istore 5
    //   3296: iload 4
    //   3298: istore 6
    //   3300: aload 16
    //   3302: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   3305: ifne +1923 -> 5228
    //   3308: iload_2
    //   3309: istore 8
    //   3311: aload_1
    //   3312: astore 15
    //   3314: aload 13
    //   3316: astore 14
    //   3318: iload_3
    //   3319: istore 5
    //   3321: iload 4
    //   3323: istore 6
    //   3325: aload 16
    //   3327: ldc_w 3801
    //   3330: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   3333: ifeq +144 -> 3477
    //   3336: iload_2
    //   3337: istore 8
    //   3339: aload_1
    //   3340: astore 15
    //   3342: aload 13
    //   3344: astore 14
    //   3346: iload_3
    //   3347: istore 5
    //   3349: iload 4
    //   3351: istore 6
    //   3353: aload 18
    //   3355: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   3358: ifne +1870 -> 5228
    //   3361: iload_2
    //   3362: istore 8
    //   3364: aload_1
    //   3365: astore 15
    //   3367: aload 13
    //   3369: astore 14
    //   3371: iload_3
    //   3372: istore 5
    //   3374: iload 4
    //   3376: istore 6
    //   3378: aload 18
    //   3380: ldc_w 3867
    //   3383: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   3386: ifeq +33 -> 3419
    //   3389: iload_2
    //   3390: istore 8
    //   3392: aload_1
    //   3393: astore 15
    //   3395: aload 13
    //   3397: astore 14
    //   3399: iload_3
    //   3400: istore 5
    //   3402: iload 4
    //   3404: istore 6
    //   3406: aload_1
    //   3407: ldc_w 3905
    //   3410: aload 17
    //   3412: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   3415: pop
    //   3416: goto +1812 -> 5228
    //   3419: iload_2
    //   3420: istore 8
    //   3422: aload_1
    //   3423: astore 15
    //   3425: aload 13
    //   3427: astore 14
    //   3429: iload_3
    //   3430: istore 5
    //   3432: iload 4
    //   3434: istore 6
    //   3436: aload 18
    //   3438: ldc_w 3871
    //   3441: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   3444: ifeq +1784 -> 5228
    //   3447: iload_2
    //   3448: istore 8
    //   3450: aload_1
    //   3451: astore 15
    //   3453: aload 13
    //   3455: astore 14
    //   3457: iload_3
    //   3458: istore 5
    //   3460: iload 4
    //   3462: istore 6
    //   3464: aload_1
    //   3465: ldc_w 3907
    //   3468: aload 17
    //   3470: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   3473: pop
    //   3474: goto +1754 -> 5228
    //   3477: iload_2
    //   3478: istore 8
    //   3480: aload_1
    //   3481: astore 15
    //   3483: aload 13
    //   3485: astore 14
    //   3487: iload_3
    //   3488: istore 5
    //   3490: iload 4
    //   3492: istore 6
    //   3494: aload 16
    //   3496: ldc_w 3842
    //   3499: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   3502: ifeq +1726 -> 5228
    //   3505: iload_2
    //   3506: istore 8
    //   3508: aload_1
    //   3509: astore 15
    //   3511: aload 13
    //   3513: astore 14
    //   3515: iload_3
    //   3516: istore 5
    //   3518: iload 4
    //   3520: istore 6
    //   3522: aload 18
    //   3524: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   3527: ifne +1701 -> 5228
    //   3530: iload_2
    //   3531: istore 8
    //   3533: aload_1
    //   3534: astore 15
    //   3536: aload 13
    //   3538: astore 14
    //   3540: iload_3
    //   3541: istore 5
    //   3543: iload 4
    //   3545: istore 6
    //   3547: aload 18
    //   3549: ldc_w 3867
    //   3552: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   3555: ifeq +33 -> 3588
    //   3558: iload_2
    //   3559: istore 8
    //   3561: aload_1
    //   3562: astore 15
    //   3564: aload 13
    //   3566: astore 14
    //   3568: iload_3
    //   3569: istore 5
    //   3571: iload 4
    //   3573: istore 6
    //   3575: aload_1
    //   3576: ldc_w 3909
    //   3579: aload 17
    //   3581: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   3584: pop
    //   3585: goto +1643 -> 5228
    //   3588: iload_2
    //   3589: istore 8
    //   3591: aload_1
    //   3592: astore 15
    //   3594: aload 13
    //   3596: astore 14
    //   3598: iload_3
    //   3599: istore 5
    //   3601: iload 4
    //   3603: istore 6
    //   3605: aload 18
    //   3607: ldc_w 3871
    //   3610: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   3613: ifeq +1615 -> 5228
    //   3616: iload_2
    //   3617: istore 8
    //   3619: aload_1
    //   3620: astore 15
    //   3622: aload 13
    //   3624: astore 14
    //   3626: iload_3
    //   3627: istore 5
    //   3629: iload 4
    //   3631: istore 6
    //   3633: aload_1
    //   3634: ldc_w 3911
    //   3637: aload 17
    //   3639: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   3642: pop
    //   3643: goto +1585 -> 5228
    //   3646: iload_2
    //   3647: istore 8
    //   3649: aload_1
    //   3650: astore 15
    //   3652: aload 13
    //   3654: astore 14
    //   3656: iload_3
    //   3657: istore 5
    //   3659: iload 4
    //   3661: istore 6
    //   3663: aload 19
    //   3665: ldc_w 3879
    //   3668: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   3671: ifeq +144 -> 3815
    //   3674: iload_2
    //   3675: istore 8
    //   3677: aload_1
    //   3678: astore 15
    //   3680: aload 13
    //   3682: astore 14
    //   3684: iload_3
    //   3685: istore 5
    //   3687: iload 4
    //   3689: istore 6
    //   3691: aload 16
    //   3693: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   3696: ifne +1532 -> 5228
    //   3699: iload_2
    //   3700: istore 8
    //   3702: aload_1
    //   3703: astore 15
    //   3705: aload 13
    //   3707: astore 14
    //   3709: iload_3
    //   3710: istore 5
    //   3712: iload 4
    //   3714: istore 6
    //   3716: aload 16
    //   3718: ldc_w 3801
    //   3721: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   3724: ifeq +33 -> 3757
    //   3727: iload_2
    //   3728: istore 8
    //   3730: aload_1
    //   3731: astore 15
    //   3733: aload 13
    //   3735: astore 14
    //   3737: iload_3
    //   3738: istore 5
    //   3740: iload 4
    //   3742: istore 6
    //   3744: aload_1
    //   3745: ldc_w 3913
    //   3748: aload 17
    //   3750: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   3753: pop
    //   3754: goto +1474 -> 5228
    //   3757: iload_2
    //   3758: istore 8
    //   3760: aload_1
    //   3761: astore 15
    //   3763: aload 13
    //   3765: astore 14
    //   3767: iload_3
    //   3768: istore 5
    //   3770: iload 4
    //   3772: istore 6
    //   3774: aload 16
    //   3776: ldc_w 3842
    //   3779: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   3782: ifeq +1446 -> 5228
    //   3785: iload_2
    //   3786: istore 8
    //   3788: aload_1
    //   3789: astore 15
    //   3791: aload 13
    //   3793: astore 14
    //   3795: iload_3
    //   3796: istore 5
    //   3798: iload 4
    //   3800: istore 6
    //   3802: aload_1
    //   3803: ldc_w 3915
    //   3806: aload 17
    //   3808: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   3811: pop
    //   3812: goto +1416 -> 5228
    //   3815: iload_2
    //   3816: istore 8
    //   3818: aload_1
    //   3819: astore 15
    //   3821: aload 13
    //   3823: astore 14
    //   3825: iload_3
    //   3826: istore 5
    //   3828: iload 4
    //   3830: istore 6
    //   3832: aload 19
    //   3834: ldc_w 3895
    //   3837: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   3840: ifeq +1388 -> 5228
    //   3843: iload_2
    //   3844: istore 8
    //   3846: aload_1
    //   3847: astore 15
    //   3849: aload 13
    //   3851: astore 14
    //   3853: iload_3
    //   3854: istore 5
    //   3856: iload 4
    //   3858: istore 6
    //   3860: aload 16
    //   3862: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   3865: ifne +1363 -> 5228
    //   3868: iload_2
    //   3869: istore 8
    //   3871: aload_1
    //   3872: astore 15
    //   3874: aload 13
    //   3876: astore 14
    //   3878: iload_3
    //   3879: istore 5
    //   3881: iload 4
    //   3883: istore 6
    //   3885: aload 16
    //   3887: ldc_w 3801
    //   3890: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   3893: ifeq +33 -> 3926
    //   3896: iload_2
    //   3897: istore 8
    //   3899: aload_1
    //   3900: astore 15
    //   3902: aload 13
    //   3904: astore 14
    //   3906: iload_3
    //   3907: istore 5
    //   3909: iload 4
    //   3911: istore 6
    //   3913: aload_1
    //   3914: ldc_w 3917
    //   3917: aload 17
    //   3919: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   3922: pop
    //   3923: goto +1305 -> 5228
    //   3926: iload_2
    //   3927: istore 8
    //   3929: aload_1
    //   3930: astore 15
    //   3932: aload 13
    //   3934: astore 14
    //   3936: iload_3
    //   3937: istore 5
    //   3939: iload 4
    //   3941: istore 6
    //   3943: aload 16
    //   3945: ldc_w 3842
    //   3948: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   3951: ifeq +1277 -> 5228
    //   3954: iload_2
    //   3955: istore 8
    //   3957: aload_1
    //   3958: astore 15
    //   3960: aload 13
    //   3962: astore 14
    //   3964: iload_3
    //   3965: istore 5
    //   3967: iload 4
    //   3969: istore 6
    //   3971: aload_1
    //   3972: ldc_w 3919
    //   3975: aload 17
    //   3977: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   3980: pop
    //   3981: goto +1247 -> 5228
    //   3984: iload_2
    //   3985: istore 8
    //   3987: aload_1
    //   3988: astore 15
    //   3990: aload 13
    //   3992: astore 14
    //   3994: iload_3
    //   3995: istore 5
    //   3997: iload 4
    //   3999: istore 6
    //   4001: aload 16
    //   4003: ldc_w 3921
    //   4006: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   4009: ifeq +707 -> 4716
    //   4012: iload_2
    //   4013: istore 8
    //   4015: aload_1
    //   4016: astore 15
    //   4018: aload 13
    //   4020: astore 14
    //   4022: iload_3
    //   4023: istore 5
    //   4025: iload 4
    //   4027: istore 6
    //   4029: aload 19
    //   4031: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   4034: ifne -3794 -> 240
    //   4037: aload_1
    //   4038: ifnull -3798 -> 240
    //   4041: iload_2
    //   4042: istore 8
    //   4044: aload_1
    //   4045: astore 15
    //   4047: aload 13
    //   4049: astore 14
    //   4051: iload_3
    //   4052: istore 5
    //   4054: iload 4
    //   4056: istore 6
    //   4058: aload 23
    //   4060: iconst_0
    //   4061: invokeinterface 3789 2 0
    //   4066: astore 16
    //   4068: iload_2
    //   4069: istore 8
    //   4071: aload_1
    //   4072: astore 15
    //   4074: aload 13
    //   4076: astore 14
    //   4078: iload_3
    //   4079: istore 5
    //   4081: iload 4
    //   4083: istore 6
    //   4085: aload 23
    //   4087: invokeinterface 3806 1 0
    //   4092: astore 17
    //   4094: iload_2
    //   4095: istore 8
    //   4097: aload_1
    //   4098: astore 15
    //   4100: aload 13
    //   4102: astore 14
    //   4104: iload_3
    //   4105: istore 5
    //   4107: iload 4
    //   4109: istore 6
    //   4111: aload 17
    //   4113: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   4116: ifeq +40 -> 4156
    //   4119: iload_2
    //   4120: istore 8
    //   4122: aload_1
    //   4123: astore 15
    //   4125: aload 13
    //   4127: astore 14
    //   4129: iload_3
    //   4130: istore 5
    //   4132: iload 4
    //   4134: istore 6
    //   4136: ldc 63
    //   4138: iconst_1
    //   4139: ldc_w 3923
    //   4142: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   4145: aload 19
    //   4147: astore 16
    //   4149: aload 18
    //   4151: astore 17
    //   4153: goto -3905 -> 248
    //   4156: iload_2
    //   4157: istore 8
    //   4159: aload_1
    //   4160: astore 15
    //   4162: aload 13
    //   4164: astore 14
    //   4166: iload_3
    //   4167: istore 5
    //   4169: iload 4
    //   4171: istore 6
    //   4173: aload 19
    //   4175: ldc_w 3865
    //   4178: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   4181: ifeq +366 -> 4547
    //   4184: iload_2
    //   4185: istore 8
    //   4187: aload_1
    //   4188: astore 15
    //   4190: aload 13
    //   4192: astore 14
    //   4194: iload_3
    //   4195: istore 5
    //   4197: iload 4
    //   4199: istore 6
    //   4201: aload 16
    //   4203: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   4206: ifne +1033 -> 5239
    //   4209: iload_2
    //   4210: istore 8
    //   4212: aload_1
    //   4213: astore 15
    //   4215: aload 13
    //   4217: astore 14
    //   4219: iload_3
    //   4220: istore 5
    //   4222: iload 4
    //   4224: istore 6
    //   4226: aload 16
    //   4228: ldc_w 3801
    //   4231: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   4234: ifeq +144 -> 4378
    //   4237: iload_2
    //   4238: istore 8
    //   4240: aload_1
    //   4241: astore 15
    //   4243: aload 13
    //   4245: astore 14
    //   4247: iload_3
    //   4248: istore 5
    //   4250: iload 4
    //   4252: istore 6
    //   4254: aload 18
    //   4256: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   4259: ifne +980 -> 5239
    //   4262: iload_2
    //   4263: istore 8
    //   4265: aload_1
    //   4266: astore 15
    //   4268: aload 13
    //   4270: astore 14
    //   4272: iload_3
    //   4273: istore 5
    //   4275: iload 4
    //   4277: istore 6
    //   4279: aload 18
    //   4281: ldc_w 3867
    //   4284: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   4287: ifeq +33 -> 4320
    //   4290: iload_2
    //   4291: istore 8
    //   4293: aload_1
    //   4294: astore 15
    //   4296: aload 13
    //   4298: astore 14
    //   4300: iload_3
    //   4301: istore 5
    //   4303: iload 4
    //   4305: istore 6
    //   4307: aload_1
    //   4308: ldc_w 3925
    //   4311: aload 17
    //   4313: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   4316: pop
    //   4317: goto +922 -> 5239
    //   4320: iload_2
    //   4321: istore 8
    //   4323: aload_1
    //   4324: astore 15
    //   4326: aload 13
    //   4328: astore 14
    //   4330: iload_3
    //   4331: istore 5
    //   4333: iload 4
    //   4335: istore 6
    //   4337: aload 18
    //   4339: ldc_w 3871
    //   4342: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   4345: ifeq +894 -> 5239
    //   4348: iload_2
    //   4349: istore 8
    //   4351: aload_1
    //   4352: astore 15
    //   4354: aload 13
    //   4356: astore 14
    //   4358: iload_3
    //   4359: istore 5
    //   4361: iload 4
    //   4363: istore 6
    //   4365: aload_1
    //   4366: ldc_w 3927
    //   4369: aload 17
    //   4371: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   4374: pop
    //   4375: goto +864 -> 5239
    //   4378: iload_2
    //   4379: istore 8
    //   4381: aload_1
    //   4382: astore 15
    //   4384: aload 13
    //   4386: astore 14
    //   4388: iload_3
    //   4389: istore 5
    //   4391: iload 4
    //   4393: istore 6
    //   4395: aload 16
    //   4397: ldc_w 3842
    //   4400: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   4403: ifeq +836 -> 5239
    //   4406: iload_2
    //   4407: istore 8
    //   4409: aload_1
    //   4410: astore 15
    //   4412: aload 13
    //   4414: astore 14
    //   4416: iload_3
    //   4417: istore 5
    //   4419: iload 4
    //   4421: istore 6
    //   4423: aload 18
    //   4425: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   4428: ifne +811 -> 5239
    //   4431: iload_2
    //   4432: istore 8
    //   4434: aload_1
    //   4435: astore 15
    //   4437: aload 13
    //   4439: astore 14
    //   4441: iload_3
    //   4442: istore 5
    //   4444: iload 4
    //   4446: istore 6
    //   4448: aload 18
    //   4450: ldc_w 3867
    //   4453: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   4456: ifeq +33 -> 4489
    //   4459: iload_2
    //   4460: istore 8
    //   4462: aload_1
    //   4463: astore 15
    //   4465: aload 13
    //   4467: astore 14
    //   4469: iload_3
    //   4470: istore 5
    //   4472: iload 4
    //   4474: istore 6
    //   4476: aload_1
    //   4477: ldc_w 3929
    //   4480: aload 17
    //   4482: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   4485: pop
    //   4486: goto +753 -> 5239
    //   4489: iload_2
    //   4490: istore 8
    //   4492: aload_1
    //   4493: astore 15
    //   4495: aload 13
    //   4497: astore 14
    //   4499: iload_3
    //   4500: istore 5
    //   4502: iload 4
    //   4504: istore 6
    //   4506: aload 18
    //   4508: ldc_w 3871
    //   4511: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   4514: ifeq +725 -> 5239
    //   4517: iload_2
    //   4518: istore 8
    //   4520: aload_1
    //   4521: astore 15
    //   4523: aload 13
    //   4525: astore 14
    //   4527: iload_3
    //   4528: istore 5
    //   4530: iload 4
    //   4532: istore 6
    //   4534: aload_1
    //   4535: ldc_w 3931
    //   4538: aload 17
    //   4540: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   4543: pop
    //   4544: goto +695 -> 5239
    //   4547: iload_2
    //   4548: istore 8
    //   4550: aload_1
    //   4551: astore 15
    //   4553: aload 13
    //   4555: astore 14
    //   4557: iload_3
    //   4558: istore 5
    //   4560: iload 4
    //   4562: istore 6
    //   4564: aload 19
    //   4566: ldc_w 3879
    //   4569: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   4572: ifeq +667 -> 5239
    //   4575: iload_2
    //   4576: istore 8
    //   4578: aload_1
    //   4579: astore 15
    //   4581: aload 13
    //   4583: astore 14
    //   4585: iload_3
    //   4586: istore 5
    //   4588: iload 4
    //   4590: istore 6
    //   4592: aload 16
    //   4594: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   4597: ifne +642 -> 5239
    //   4600: iload_2
    //   4601: istore 8
    //   4603: aload_1
    //   4604: astore 15
    //   4606: aload 13
    //   4608: astore 14
    //   4610: iload_3
    //   4611: istore 5
    //   4613: iload 4
    //   4615: istore 6
    //   4617: aload 16
    //   4619: ldc_w 3801
    //   4622: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   4625: ifeq +33 -> 4658
    //   4628: iload_2
    //   4629: istore 8
    //   4631: aload_1
    //   4632: astore 15
    //   4634: aload 13
    //   4636: astore 14
    //   4638: iload_3
    //   4639: istore 5
    //   4641: iload 4
    //   4643: istore 6
    //   4645: aload_1
    //   4646: ldc_w 3933
    //   4649: aload 17
    //   4651: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   4654: pop
    //   4655: goto +584 -> 5239
    //   4658: iload_2
    //   4659: istore 8
    //   4661: aload_1
    //   4662: astore 15
    //   4664: aload 13
    //   4666: astore 14
    //   4668: iload_3
    //   4669: istore 5
    //   4671: iload 4
    //   4673: istore 6
    //   4675: aload 16
    //   4677: ldc_w 3842
    //   4680: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   4683: ifeq +556 -> 5239
    //   4686: iload_2
    //   4687: istore 8
    //   4689: aload_1
    //   4690: astore 15
    //   4692: aload 13
    //   4694: astore 14
    //   4696: iload_3
    //   4697: istore 5
    //   4699: iload 4
    //   4701: istore 6
    //   4703: aload_1
    //   4704: ldc_w 3935
    //   4707: aload 17
    //   4709: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   4712: pop
    //   4713: goto +526 -> 5239
    //   4716: iload_2
    //   4717: istore 8
    //   4719: aload_1
    //   4720: astore 15
    //   4722: aload 13
    //   4724: astore 14
    //   4726: iload_3
    //   4727: istore 5
    //   4729: iload 4
    //   4731: istore 6
    //   4733: aload 16
    //   4735: ldc_w 3937
    //   4738: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   4741: ifeq -4501 -> 240
    //   4744: iload_2
    //   4745: istore 8
    //   4747: aload_1
    //   4748: astore 15
    //   4750: aload 13
    //   4752: astore 14
    //   4754: iload_3
    //   4755: istore 5
    //   4757: iload 4
    //   4759: istore 6
    //   4761: aload 19
    //   4763: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   4766: ifne -4526 -> 240
    //   4769: aload_1
    //   4770: ifnull -4530 -> 240
    //   4773: iload_2
    //   4774: istore 8
    //   4776: aload_1
    //   4777: astore 15
    //   4779: aload 13
    //   4781: astore 14
    //   4783: iload_3
    //   4784: istore 5
    //   4786: iload 4
    //   4788: istore 6
    //   4790: aload 23
    //   4792: iconst_0
    //   4793: invokeinterface 3789 2 0
    //   4798: astore 16
    //   4800: iload_2
    //   4801: istore 8
    //   4803: aload_1
    //   4804: astore 15
    //   4806: aload 13
    //   4808: astore 14
    //   4810: iload_3
    //   4811: istore 5
    //   4813: iload 4
    //   4815: istore 6
    //   4817: aload 23
    //   4819: invokeinterface 3806 1 0
    //   4824: astore 17
    //   4826: iload_2
    //   4827: istore 8
    //   4829: aload_1
    //   4830: astore 15
    //   4832: aload 13
    //   4834: astore 14
    //   4836: iload_3
    //   4837: istore 5
    //   4839: iload 4
    //   4841: istore 6
    //   4843: aload 17
    //   4845: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   4848: ifeq +40 -> 4888
    //   4851: iload_2
    //   4852: istore 8
    //   4854: aload_1
    //   4855: astore 15
    //   4857: aload 13
    //   4859: astore 14
    //   4861: iload_3
    //   4862: istore 5
    //   4864: iload 4
    //   4866: istore 6
    //   4868: ldc 63
    //   4870: iconst_1
    //   4871: ldc_w 3939
    //   4874: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   4877: aload 19
    //   4879: astore 16
    //   4881: aload 18
    //   4883: astore 17
    //   4885: goto -4637 -> 248
    //   4888: iload_2
    //   4889: istore 8
    //   4891: aload_1
    //   4892: astore 15
    //   4894: aload 13
    //   4896: astore 14
    //   4898: iload_3
    //   4899: istore 5
    //   4901: iload 4
    //   4903: istore 6
    //   4905: aload 19
    //   4907: ldc_w 3895
    //   4910: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   4913: ifeq +337 -> 5250
    //   4916: iload_2
    //   4917: istore 8
    //   4919: aload_1
    //   4920: astore 15
    //   4922: aload 13
    //   4924: astore 14
    //   4926: iload_3
    //   4927: istore 5
    //   4929: iload 4
    //   4931: istore 6
    //   4933: aload 16
    //   4935: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   4938: ifne +312 -> 5250
    //   4941: iload_2
    //   4942: istore 8
    //   4944: aload_1
    //   4945: astore 15
    //   4947: aload 13
    //   4949: astore 14
    //   4951: iload_3
    //   4952: istore 5
    //   4954: iload 4
    //   4956: istore 6
    //   4958: aload 16
    //   4960: ldc_w 3801
    //   4963: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   4966: ifeq +33 -> 4999
    //   4969: iload_2
    //   4970: istore 8
    //   4972: aload_1
    //   4973: astore 15
    //   4975: aload 13
    //   4977: astore 14
    //   4979: iload_3
    //   4980: istore 5
    //   4982: iload 4
    //   4984: istore 6
    //   4986: aload_1
    //   4987: ldc_w 3941
    //   4990: aload 17
    //   4992: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   4995: pop
    //   4996: goto +254 -> 5250
    //   4999: iload_2
    //   5000: istore 8
    //   5002: aload_1
    //   5003: astore 15
    //   5005: aload 13
    //   5007: astore 14
    //   5009: iload_3
    //   5010: istore 5
    //   5012: iload 4
    //   5014: istore 6
    //   5016: aload 16
    //   5018: ldc_w 3842
    //   5021: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   5024: ifeq +226 -> 5250
    //   5027: iload_2
    //   5028: istore 8
    //   5030: aload_1
    //   5031: astore 15
    //   5033: aload 13
    //   5035: astore 14
    //   5037: iload_3
    //   5038: istore 5
    //   5040: iload 4
    //   5042: istore 6
    //   5044: aload_1
    //   5045: ldc_w 3943
    //   5048: aload 17
    //   5050: invokevirtual 2891	java/util/HashMap:put	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   5053: pop
    //   5054: goto +196 -> 5250
    //   5057: iload_2
    //   5058: istore 8
    //   5060: aload_1
    //   5061: astore 15
    //   5063: aload 13
    //   5065: astore 14
    //   5067: iload_3
    //   5068: istore 5
    //   5070: iload 4
    //   5072: istore 6
    //   5074: aload 16
    //   5076: ldc_w 3798
    //   5079: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   5082: ifeq +13 -> 5095
    //   5085: aconst_null
    //   5086: astore 17
    //   5088: aload 19
    //   5090: astore 16
    //   5092: goto -4844 -> 248
    //   5095: iload_2
    //   5096: istore 8
    //   5098: aload_1
    //   5099: astore 15
    //   5101: aload 13
    //   5103: astore 14
    //   5105: iload_3
    //   5106: istore 5
    //   5108: iload 4
    //   5110: istore 6
    //   5112: aload 16
    //   5114: ldc_w 3799
    //   5117: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   5120: istore 12
    //   5122: iload 12
    //   5124: ifeq -4884 -> 240
    //   5127: aload 18
    //   5129: ifnonnull -4889 -> 240
    //   5132: aconst_null
    //   5133: astore 16
    //   5135: aload 18
    //   5137: astore 17
    //   5139: goto -4891 -> 248
    //   5142: astore_1
    //   5143: iload 5
    //   5145: istore_2
    //   5146: goto -3859 -> 1287
    //   5149: astore 18
    //   5151: iconst_0
    //   5152: istore_2
    //   5153: aconst_null
    //   5154: astore_1
    //   5155: aload 16
    //   5157: astore 13
    //   5159: goto -3991 -> 1168
    //   5162: astore 18
    //   5164: goto -3996 -> 1168
    //   5167: astore 18
    //   5169: iconst_0
    //   5170: istore_2
    //   5171: aconst_null
    //   5172: astore_1
    //   5173: goto -4326 -> 847
    //   5176: astore 18
    //   5178: goto -4331 -> 847
    //   5181: goto +25 -> 5206
    //   5184: aload 19
    //   5186: astore 16
    //   5188: aload 18
    //   5190: astore 17
    //   5192: goto -4944 -> 248
    //   5195: aload 19
    //   5197: astore 16
    //   5199: aload 18
    //   5201: astore 17
    //   5203: goto -4955 -> 248
    //   5206: aload 19
    //   5208: astore 16
    //   5210: aload 18
    //   5212: astore 17
    //   5214: goto -4966 -> 248
    //   5217: aload 19
    //   5219: astore 16
    //   5221: aload 18
    //   5223: astore 17
    //   5225: goto -4977 -> 248
    //   5228: aload 19
    //   5230: astore 16
    //   5232: aload 18
    //   5234: astore 17
    //   5236: goto -4988 -> 248
    //   5239: aload 19
    //   5241: astore 16
    //   5243: aload 18
    //   5245: astore 17
    //   5247: goto -4999 -> 248
    //   5250: aload 19
    //   5252: astore 16
    //   5254: aload 18
    //   5256: astore 17
    //   5258: goto -5010 -> 248
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	5261	0	this	ConfigServlet
    //   0	5261	1	paramString	String
    //   61	5110	2	i	int
    //   59	5047	3	j	int
    //   56	5053	4	k	int
    //   84	5060	5	m	int
    //   80	5031	6	n	int
    //   69	1939	7	i1	int
    //   192	4905	8	i2	int
    //   183	1174	9	i3	int
    //   169	1088	10	i4	int
    //   158	115	11	i5	int
    //   5120	3	12	bool	boolean
    //   41	5117	13	localObject1	Object
    //   77	5027	14	localObject2	Object
    //   73	5027	15	localObject3	Object
    //   44	5209	16	localObject4	Object
    //   50	5207	17	localObject5	Object
    //   63	646	18	localObject6	Object
    //   845	76	18	localNumberFormatException1	NumberFormatException
    //   1166	3970	18	localIOException1	IOException
    //   5149	1	18	localIOException2	IOException
    //   5162	1	18	localIOException3	IOException
    //   5167	1	18	localNumberFormatException2	NumberFormatException
    //   5176	79	18	localNumberFormatException3	NumberFormatException
    //   66	5185	19	localObject7	Object
    //   53	84	20	localObject8	Object
    //   47	94	21	localObject9	Object
    //   16	1734	22	localPstnManager	com.tencent.mobileqq.qcall.PstnManager
    //   89	4729	23	localXmlPullParser	XmlPullParser
    // Exception table:
    //   from	to	target	type
    //   208	217	845	java/lang/NumberFormatException
    //   302	313	845	java/lang/NumberFormatException
    //   330	340	845	java/lang/NumberFormatException
    //   357	365	845	java/lang/NumberFormatException
    //   382	393	845	java/lang/NumberFormatException
    //   410	419	845	java/lang/NumberFormatException
    //   443	454	845	java/lang/NumberFormatException
    //   471	480	845	java/lang/NumberFormatException
    //   503	514	845	java/lang/NumberFormatException
    //   536	547	845	java/lang/NumberFormatException
    //   564	574	845	java/lang/NumberFormatException
    //   598	609	845	java/lang/NumberFormatException
    //   626	634	845	java/lang/NumberFormatException
    //   656	666	845	java/lang/NumberFormatException
    //   683	691	845	java/lang/NumberFormatException
    //   708	719	845	java/lang/NumberFormatException
    //   736	747	845	java/lang/NumberFormatException
    //   764	779	845	java/lang/NumberFormatException
    //   799	810	845	java/lang/NumberFormatException
    //   827	842	845	java/lang/NumberFormatException
    //   1120	1131	845	java/lang/NumberFormatException
    //   1148	1163	845	java/lang/NumberFormatException
    //   1378	1389	845	java/lang/NumberFormatException
    //   1406	1421	845	java/lang/NumberFormatException
    //   1441	1452	845	java/lang/NumberFormatException
    //   1469	1480	845	java/lang/NumberFormatException
    //   1497	1512	845	java/lang/NumberFormatException
    //   1532	1543	845	java/lang/NumberFormatException
    //   1560	1575	845	java/lang/NumberFormatException
    //   1595	1606	845	java/lang/NumberFormatException
    //   1623	1638	845	java/lang/NumberFormatException
    //   1658	1669	845	java/lang/NumberFormatException
    //   1686	1701	845	java/lang/NumberFormatException
    //   1721	1732	845	java/lang/NumberFormatException
    //   1749	1764	845	java/lang/NumberFormatException
    //   1788	1798	845	java/lang/NumberFormatException
    //   1826	1836	845	java/lang/NumberFormatException
    //   1853	1861	845	java/lang/NumberFormatException
    //   1878	1889	845	java/lang/NumberFormatException
    //   1906	1918	845	java/lang/NumberFormatException
    //   1942	1950	845	java/lang/NumberFormatException
    //   1967	1978	845	java/lang/NumberFormatException
    //   1995	2007	845	java/lang/NumberFormatException
    //   2030	2041	845	java/lang/NumberFormatException
    //   2058	2066	845	java/lang/NumberFormatException
    //   2087	2097	845	java/lang/NumberFormatException
    //   2114	2123	845	java/lang/NumberFormatException
    //   2140	2148	845	java/lang/NumberFormatException
    //   2165	2174	845	java/lang/NumberFormatException
    //   2202	2213	845	java/lang/NumberFormatException
    //   2230	2238	845	java/lang/NumberFormatException
    //   2255	2266	845	java/lang/NumberFormatException
    //   2283	2291	845	java/lang/NumberFormatException
    //   2308	2319	845	java/lang/NumberFormatException
    //   2336	2346	845	java/lang/NumberFormatException
    //   2366	2377	845	java/lang/NumberFormatException
    //   2394	2404	845	java/lang/NumberFormatException
    //   2424	2435	845	java/lang/NumberFormatException
    //   2452	2460	845	java/lang/NumberFormatException
    //   2477	2488	845	java/lang/NumberFormatException
    //   2505	2515	845	java/lang/NumberFormatException
    //   2535	2546	845	java/lang/NumberFormatException
    //   2563	2573	845	java/lang/NumberFormatException
    //   2593	2604	845	java/lang/NumberFormatException
    //   2621	2629	845	java/lang/NumberFormatException
    //   2646	2657	845	java/lang/NumberFormatException
    //   2674	2684	845	java/lang/NumberFormatException
    //   2704	2715	845	java/lang/NumberFormatException
    //   2732	2742	845	java/lang/NumberFormatException
    //   2762	2773	845	java/lang/NumberFormatException
    //   2790	2798	845	java/lang/NumberFormatException
    //   2815	2826	845	java/lang/NumberFormatException
    //   2843	2853	845	java/lang/NumberFormatException
    //   2873	2884	845	java/lang/NumberFormatException
    //   2901	2911	845	java/lang/NumberFormatException
    //   2931	2942	845	java/lang/NumberFormatException
    //   2959	2967	845	java/lang/NumberFormatException
    //   2984	2995	845	java/lang/NumberFormatException
    //   3012	3022	845	java/lang/NumberFormatException
    //   3042	3053	845	java/lang/NumberFormatException
    //   3070	3080	845	java/lang/NumberFormatException
    //   3100	3111	845	java/lang/NumberFormatException
    //   3128	3136	845	java/lang/NumberFormatException
    //   3157	3167	845	java/lang/NumberFormatException
    //   3184	3193	845	java/lang/NumberFormatException
    //   3210	3218	845	java/lang/NumberFormatException
    //   3235	3244	845	java/lang/NumberFormatException
    //   3272	3283	845	java/lang/NumberFormatException
    //   3300	3308	845	java/lang/NumberFormatException
    //   3325	3336	845	java/lang/NumberFormatException
    //   3353	3361	845	java/lang/NumberFormatException
    //   3378	3389	845	java/lang/NumberFormatException
    //   3406	3416	845	java/lang/NumberFormatException
    //   3436	3447	845	java/lang/NumberFormatException
    //   3464	3474	845	java/lang/NumberFormatException
    //   3494	3505	845	java/lang/NumberFormatException
    //   3522	3530	845	java/lang/NumberFormatException
    //   3547	3558	845	java/lang/NumberFormatException
    //   3575	3585	845	java/lang/NumberFormatException
    //   3605	3616	845	java/lang/NumberFormatException
    //   3633	3643	845	java/lang/NumberFormatException
    //   3663	3674	845	java/lang/NumberFormatException
    //   3691	3699	845	java/lang/NumberFormatException
    //   3716	3727	845	java/lang/NumberFormatException
    //   3744	3754	845	java/lang/NumberFormatException
    //   3774	3785	845	java/lang/NumberFormatException
    //   3802	3812	845	java/lang/NumberFormatException
    //   3832	3843	845	java/lang/NumberFormatException
    //   3860	3868	845	java/lang/NumberFormatException
    //   3885	3896	845	java/lang/NumberFormatException
    //   3913	3923	845	java/lang/NumberFormatException
    //   3943	3954	845	java/lang/NumberFormatException
    //   3971	3981	845	java/lang/NumberFormatException
    //   4001	4012	845	java/lang/NumberFormatException
    //   4029	4037	845	java/lang/NumberFormatException
    //   4058	4068	845	java/lang/NumberFormatException
    //   4085	4094	845	java/lang/NumberFormatException
    //   4111	4119	845	java/lang/NumberFormatException
    //   4136	4145	845	java/lang/NumberFormatException
    //   4173	4184	845	java/lang/NumberFormatException
    //   4201	4209	845	java/lang/NumberFormatException
    //   4226	4237	845	java/lang/NumberFormatException
    //   4254	4262	845	java/lang/NumberFormatException
    //   4279	4290	845	java/lang/NumberFormatException
    //   4307	4317	845	java/lang/NumberFormatException
    //   4337	4348	845	java/lang/NumberFormatException
    //   4365	4375	845	java/lang/NumberFormatException
    //   4395	4406	845	java/lang/NumberFormatException
    //   4423	4431	845	java/lang/NumberFormatException
    //   4448	4459	845	java/lang/NumberFormatException
    //   4476	4486	845	java/lang/NumberFormatException
    //   4506	4517	845	java/lang/NumberFormatException
    //   4534	4544	845	java/lang/NumberFormatException
    //   4564	4575	845	java/lang/NumberFormatException
    //   4592	4600	845	java/lang/NumberFormatException
    //   4617	4628	845	java/lang/NumberFormatException
    //   4645	4655	845	java/lang/NumberFormatException
    //   4675	4686	845	java/lang/NumberFormatException
    //   4703	4713	845	java/lang/NumberFormatException
    //   4733	4744	845	java/lang/NumberFormatException
    //   4761	4769	845	java/lang/NumberFormatException
    //   4790	4800	845	java/lang/NumberFormatException
    //   4817	4826	845	java/lang/NumberFormatException
    //   4843	4851	845	java/lang/NumberFormatException
    //   4868	4877	845	java/lang/NumberFormatException
    //   4905	4916	845	java/lang/NumberFormatException
    //   4933	4941	845	java/lang/NumberFormatException
    //   4958	4969	845	java/lang/NumberFormatException
    //   4986	4996	845	java/lang/NumberFormatException
    //   5016	5027	845	java/lang/NumberFormatException
    //   5044	5054	845	java/lang/NumberFormatException
    //   5074	5085	845	java/lang/NumberFormatException
    //   5112	5122	845	java/lang/NumberFormatException
    //   208	217	1166	java/io/IOException
    //   302	313	1166	java/io/IOException
    //   330	340	1166	java/io/IOException
    //   357	365	1166	java/io/IOException
    //   382	393	1166	java/io/IOException
    //   410	419	1166	java/io/IOException
    //   443	454	1166	java/io/IOException
    //   471	480	1166	java/io/IOException
    //   503	514	1166	java/io/IOException
    //   536	547	1166	java/io/IOException
    //   564	574	1166	java/io/IOException
    //   598	609	1166	java/io/IOException
    //   626	634	1166	java/io/IOException
    //   656	666	1166	java/io/IOException
    //   683	691	1166	java/io/IOException
    //   708	719	1166	java/io/IOException
    //   736	747	1166	java/io/IOException
    //   764	779	1166	java/io/IOException
    //   799	810	1166	java/io/IOException
    //   827	842	1166	java/io/IOException
    //   1120	1131	1166	java/io/IOException
    //   1148	1163	1166	java/io/IOException
    //   1378	1389	1166	java/io/IOException
    //   1406	1421	1166	java/io/IOException
    //   1441	1452	1166	java/io/IOException
    //   1469	1480	1166	java/io/IOException
    //   1497	1512	1166	java/io/IOException
    //   1532	1543	1166	java/io/IOException
    //   1560	1575	1166	java/io/IOException
    //   1595	1606	1166	java/io/IOException
    //   1623	1638	1166	java/io/IOException
    //   1658	1669	1166	java/io/IOException
    //   1686	1701	1166	java/io/IOException
    //   1721	1732	1166	java/io/IOException
    //   1749	1764	1166	java/io/IOException
    //   1788	1798	1166	java/io/IOException
    //   1826	1836	1166	java/io/IOException
    //   1853	1861	1166	java/io/IOException
    //   1878	1889	1166	java/io/IOException
    //   1906	1918	1166	java/io/IOException
    //   1942	1950	1166	java/io/IOException
    //   1967	1978	1166	java/io/IOException
    //   1995	2007	1166	java/io/IOException
    //   2030	2041	1166	java/io/IOException
    //   2058	2066	1166	java/io/IOException
    //   2087	2097	1166	java/io/IOException
    //   2114	2123	1166	java/io/IOException
    //   2140	2148	1166	java/io/IOException
    //   2165	2174	1166	java/io/IOException
    //   2202	2213	1166	java/io/IOException
    //   2230	2238	1166	java/io/IOException
    //   2255	2266	1166	java/io/IOException
    //   2283	2291	1166	java/io/IOException
    //   2308	2319	1166	java/io/IOException
    //   2336	2346	1166	java/io/IOException
    //   2366	2377	1166	java/io/IOException
    //   2394	2404	1166	java/io/IOException
    //   2424	2435	1166	java/io/IOException
    //   2452	2460	1166	java/io/IOException
    //   2477	2488	1166	java/io/IOException
    //   2505	2515	1166	java/io/IOException
    //   2535	2546	1166	java/io/IOException
    //   2563	2573	1166	java/io/IOException
    //   2593	2604	1166	java/io/IOException
    //   2621	2629	1166	java/io/IOException
    //   2646	2657	1166	java/io/IOException
    //   2674	2684	1166	java/io/IOException
    //   2704	2715	1166	java/io/IOException
    //   2732	2742	1166	java/io/IOException
    //   2762	2773	1166	java/io/IOException
    //   2790	2798	1166	java/io/IOException
    //   2815	2826	1166	java/io/IOException
    //   2843	2853	1166	java/io/IOException
    //   2873	2884	1166	java/io/IOException
    //   2901	2911	1166	java/io/IOException
    //   2931	2942	1166	java/io/IOException
    //   2959	2967	1166	java/io/IOException
    //   2984	2995	1166	java/io/IOException
    //   3012	3022	1166	java/io/IOException
    //   3042	3053	1166	java/io/IOException
    //   3070	3080	1166	java/io/IOException
    //   3100	3111	1166	java/io/IOException
    //   3128	3136	1166	java/io/IOException
    //   3157	3167	1166	java/io/IOException
    //   3184	3193	1166	java/io/IOException
    //   3210	3218	1166	java/io/IOException
    //   3235	3244	1166	java/io/IOException
    //   3272	3283	1166	java/io/IOException
    //   3300	3308	1166	java/io/IOException
    //   3325	3336	1166	java/io/IOException
    //   3353	3361	1166	java/io/IOException
    //   3378	3389	1166	java/io/IOException
    //   3406	3416	1166	java/io/IOException
    //   3436	3447	1166	java/io/IOException
    //   3464	3474	1166	java/io/IOException
    //   3494	3505	1166	java/io/IOException
    //   3522	3530	1166	java/io/IOException
    //   3547	3558	1166	java/io/IOException
    //   3575	3585	1166	java/io/IOException
    //   3605	3616	1166	java/io/IOException
    //   3633	3643	1166	java/io/IOException
    //   3663	3674	1166	java/io/IOException
    //   3691	3699	1166	java/io/IOException
    //   3716	3727	1166	java/io/IOException
    //   3744	3754	1166	java/io/IOException
    //   3774	3785	1166	java/io/IOException
    //   3802	3812	1166	java/io/IOException
    //   3832	3843	1166	java/io/IOException
    //   3860	3868	1166	java/io/IOException
    //   3885	3896	1166	java/io/IOException
    //   3913	3923	1166	java/io/IOException
    //   3943	3954	1166	java/io/IOException
    //   3971	3981	1166	java/io/IOException
    //   4001	4012	1166	java/io/IOException
    //   4029	4037	1166	java/io/IOException
    //   4058	4068	1166	java/io/IOException
    //   4085	4094	1166	java/io/IOException
    //   4111	4119	1166	java/io/IOException
    //   4136	4145	1166	java/io/IOException
    //   4173	4184	1166	java/io/IOException
    //   4201	4209	1166	java/io/IOException
    //   4226	4237	1166	java/io/IOException
    //   4254	4262	1166	java/io/IOException
    //   4279	4290	1166	java/io/IOException
    //   4307	4317	1166	java/io/IOException
    //   4337	4348	1166	java/io/IOException
    //   4365	4375	1166	java/io/IOException
    //   4395	4406	1166	java/io/IOException
    //   4423	4431	1166	java/io/IOException
    //   4448	4459	1166	java/io/IOException
    //   4476	4486	1166	java/io/IOException
    //   4506	4517	1166	java/io/IOException
    //   4534	4544	1166	java/io/IOException
    //   4564	4575	1166	java/io/IOException
    //   4592	4600	1166	java/io/IOException
    //   4617	4628	1166	java/io/IOException
    //   4645	4655	1166	java/io/IOException
    //   4675	4686	1166	java/io/IOException
    //   4703	4713	1166	java/io/IOException
    //   4733	4744	1166	java/io/IOException
    //   4761	4769	1166	java/io/IOException
    //   4790	4800	1166	java/io/IOException
    //   4817	4826	1166	java/io/IOException
    //   4843	4851	1166	java/io/IOException
    //   4868	4877	1166	java/io/IOException
    //   4905	4916	1166	java/io/IOException
    //   4933	4941	1166	java/io/IOException
    //   4958	4969	1166	java/io/IOException
    //   4986	4996	1166	java/io/IOException
    //   5016	5027	1166	java/io/IOException
    //   5044	5054	1166	java/io/IOException
    //   5074	5085	1166	java/io/IOException
    //   5112	5122	1166	java/io/IOException
    //   208	217	1275	org/xmlpull/v1/XmlPullParserException
    //   302	313	1275	org/xmlpull/v1/XmlPullParserException
    //   330	340	1275	org/xmlpull/v1/XmlPullParserException
    //   357	365	1275	org/xmlpull/v1/XmlPullParserException
    //   382	393	1275	org/xmlpull/v1/XmlPullParserException
    //   410	419	1275	org/xmlpull/v1/XmlPullParserException
    //   443	454	1275	org/xmlpull/v1/XmlPullParserException
    //   471	480	1275	org/xmlpull/v1/XmlPullParserException
    //   503	514	1275	org/xmlpull/v1/XmlPullParserException
    //   536	547	1275	org/xmlpull/v1/XmlPullParserException
    //   564	574	1275	org/xmlpull/v1/XmlPullParserException
    //   598	609	1275	org/xmlpull/v1/XmlPullParserException
    //   626	634	1275	org/xmlpull/v1/XmlPullParserException
    //   656	666	1275	org/xmlpull/v1/XmlPullParserException
    //   683	691	1275	org/xmlpull/v1/XmlPullParserException
    //   708	719	1275	org/xmlpull/v1/XmlPullParserException
    //   736	747	1275	org/xmlpull/v1/XmlPullParserException
    //   764	779	1275	org/xmlpull/v1/XmlPullParserException
    //   799	810	1275	org/xmlpull/v1/XmlPullParserException
    //   827	842	1275	org/xmlpull/v1/XmlPullParserException
    //   881	887	1275	org/xmlpull/v1/XmlPullParserException
    //   904	934	1275	org/xmlpull/v1/XmlPullParserException
    //   1120	1131	1275	org/xmlpull/v1/XmlPullParserException
    //   1148	1163	1275	org/xmlpull/v1/XmlPullParserException
    //   1202	1208	1275	org/xmlpull/v1/XmlPullParserException
    //   1225	1255	1275	org/xmlpull/v1/XmlPullParserException
    //   1378	1389	1275	org/xmlpull/v1/XmlPullParserException
    //   1406	1421	1275	org/xmlpull/v1/XmlPullParserException
    //   1441	1452	1275	org/xmlpull/v1/XmlPullParserException
    //   1469	1480	1275	org/xmlpull/v1/XmlPullParserException
    //   1497	1512	1275	org/xmlpull/v1/XmlPullParserException
    //   1532	1543	1275	org/xmlpull/v1/XmlPullParserException
    //   1560	1575	1275	org/xmlpull/v1/XmlPullParserException
    //   1595	1606	1275	org/xmlpull/v1/XmlPullParserException
    //   1623	1638	1275	org/xmlpull/v1/XmlPullParserException
    //   1658	1669	1275	org/xmlpull/v1/XmlPullParserException
    //   1686	1701	1275	org/xmlpull/v1/XmlPullParserException
    //   1721	1732	1275	org/xmlpull/v1/XmlPullParserException
    //   1749	1764	1275	org/xmlpull/v1/XmlPullParserException
    //   1788	1798	1275	org/xmlpull/v1/XmlPullParserException
    //   1826	1836	1275	org/xmlpull/v1/XmlPullParserException
    //   1853	1861	1275	org/xmlpull/v1/XmlPullParserException
    //   1878	1889	1275	org/xmlpull/v1/XmlPullParserException
    //   1906	1918	1275	org/xmlpull/v1/XmlPullParserException
    //   1942	1950	1275	org/xmlpull/v1/XmlPullParserException
    //   1967	1978	1275	org/xmlpull/v1/XmlPullParserException
    //   1995	2007	1275	org/xmlpull/v1/XmlPullParserException
    //   2030	2041	1275	org/xmlpull/v1/XmlPullParserException
    //   2058	2066	1275	org/xmlpull/v1/XmlPullParserException
    //   2087	2097	1275	org/xmlpull/v1/XmlPullParserException
    //   2114	2123	1275	org/xmlpull/v1/XmlPullParserException
    //   2140	2148	1275	org/xmlpull/v1/XmlPullParserException
    //   2165	2174	1275	org/xmlpull/v1/XmlPullParserException
    //   2202	2213	1275	org/xmlpull/v1/XmlPullParserException
    //   2230	2238	1275	org/xmlpull/v1/XmlPullParserException
    //   2255	2266	1275	org/xmlpull/v1/XmlPullParserException
    //   2283	2291	1275	org/xmlpull/v1/XmlPullParserException
    //   2308	2319	1275	org/xmlpull/v1/XmlPullParserException
    //   2336	2346	1275	org/xmlpull/v1/XmlPullParserException
    //   2366	2377	1275	org/xmlpull/v1/XmlPullParserException
    //   2394	2404	1275	org/xmlpull/v1/XmlPullParserException
    //   2424	2435	1275	org/xmlpull/v1/XmlPullParserException
    //   2452	2460	1275	org/xmlpull/v1/XmlPullParserException
    //   2477	2488	1275	org/xmlpull/v1/XmlPullParserException
    //   2505	2515	1275	org/xmlpull/v1/XmlPullParserException
    //   2535	2546	1275	org/xmlpull/v1/XmlPullParserException
    //   2563	2573	1275	org/xmlpull/v1/XmlPullParserException
    //   2593	2604	1275	org/xmlpull/v1/XmlPullParserException
    //   2621	2629	1275	org/xmlpull/v1/XmlPullParserException
    //   2646	2657	1275	org/xmlpull/v1/XmlPullParserException
    //   2674	2684	1275	org/xmlpull/v1/XmlPullParserException
    //   2704	2715	1275	org/xmlpull/v1/XmlPullParserException
    //   2732	2742	1275	org/xmlpull/v1/XmlPullParserException
    //   2762	2773	1275	org/xmlpull/v1/XmlPullParserException
    //   2790	2798	1275	org/xmlpull/v1/XmlPullParserException
    //   2815	2826	1275	org/xmlpull/v1/XmlPullParserException
    //   2843	2853	1275	org/xmlpull/v1/XmlPullParserException
    //   2873	2884	1275	org/xmlpull/v1/XmlPullParserException
    //   2901	2911	1275	org/xmlpull/v1/XmlPullParserException
    //   2931	2942	1275	org/xmlpull/v1/XmlPullParserException
    //   2959	2967	1275	org/xmlpull/v1/XmlPullParserException
    //   2984	2995	1275	org/xmlpull/v1/XmlPullParserException
    //   3012	3022	1275	org/xmlpull/v1/XmlPullParserException
    //   3042	3053	1275	org/xmlpull/v1/XmlPullParserException
    //   3070	3080	1275	org/xmlpull/v1/XmlPullParserException
    //   3100	3111	1275	org/xmlpull/v1/XmlPullParserException
    //   3128	3136	1275	org/xmlpull/v1/XmlPullParserException
    //   3157	3167	1275	org/xmlpull/v1/XmlPullParserException
    //   3184	3193	1275	org/xmlpull/v1/XmlPullParserException
    //   3210	3218	1275	org/xmlpull/v1/XmlPullParserException
    //   3235	3244	1275	org/xmlpull/v1/XmlPullParserException
    //   3272	3283	1275	org/xmlpull/v1/XmlPullParserException
    //   3300	3308	1275	org/xmlpull/v1/XmlPullParserException
    //   3325	3336	1275	org/xmlpull/v1/XmlPullParserException
    //   3353	3361	1275	org/xmlpull/v1/XmlPullParserException
    //   3378	3389	1275	org/xmlpull/v1/XmlPullParserException
    //   3406	3416	1275	org/xmlpull/v1/XmlPullParserException
    //   3436	3447	1275	org/xmlpull/v1/XmlPullParserException
    //   3464	3474	1275	org/xmlpull/v1/XmlPullParserException
    //   3494	3505	1275	org/xmlpull/v1/XmlPullParserException
    //   3522	3530	1275	org/xmlpull/v1/XmlPullParserException
    //   3547	3558	1275	org/xmlpull/v1/XmlPullParserException
    //   3575	3585	1275	org/xmlpull/v1/XmlPullParserException
    //   3605	3616	1275	org/xmlpull/v1/XmlPullParserException
    //   3633	3643	1275	org/xmlpull/v1/XmlPullParserException
    //   3663	3674	1275	org/xmlpull/v1/XmlPullParserException
    //   3691	3699	1275	org/xmlpull/v1/XmlPullParserException
    //   3716	3727	1275	org/xmlpull/v1/XmlPullParserException
    //   3744	3754	1275	org/xmlpull/v1/XmlPullParserException
    //   3774	3785	1275	org/xmlpull/v1/XmlPullParserException
    //   3802	3812	1275	org/xmlpull/v1/XmlPullParserException
    //   3832	3843	1275	org/xmlpull/v1/XmlPullParserException
    //   3860	3868	1275	org/xmlpull/v1/XmlPullParserException
    //   3885	3896	1275	org/xmlpull/v1/XmlPullParserException
    //   3913	3923	1275	org/xmlpull/v1/XmlPullParserException
    //   3943	3954	1275	org/xmlpull/v1/XmlPullParserException
    //   3971	3981	1275	org/xmlpull/v1/XmlPullParserException
    //   4001	4012	1275	org/xmlpull/v1/XmlPullParserException
    //   4029	4037	1275	org/xmlpull/v1/XmlPullParserException
    //   4058	4068	1275	org/xmlpull/v1/XmlPullParserException
    //   4085	4094	1275	org/xmlpull/v1/XmlPullParserException
    //   4111	4119	1275	org/xmlpull/v1/XmlPullParserException
    //   4136	4145	1275	org/xmlpull/v1/XmlPullParserException
    //   4173	4184	1275	org/xmlpull/v1/XmlPullParserException
    //   4201	4209	1275	org/xmlpull/v1/XmlPullParserException
    //   4226	4237	1275	org/xmlpull/v1/XmlPullParserException
    //   4254	4262	1275	org/xmlpull/v1/XmlPullParserException
    //   4279	4290	1275	org/xmlpull/v1/XmlPullParserException
    //   4307	4317	1275	org/xmlpull/v1/XmlPullParserException
    //   4337	4348	1275	org/xmlpull/v1/XmlPullParserException
    //   4365	4375	1275	org/xmlpull/v1/XmlPullParserException
    //   4395	4406	1275	org/xmlpull/v1/XmlPullParserException
    //   4423	4431	1275	org/xmlpull/v1/XmlPullParserException
    //   4448	4459	1275	org/xmlpull/v1/XmlPullParserException
    //   4476	4486	1275	org/xmlpull/v1/XmlPullParserException
    //   4506	4517	1275	org/xmlpull/v1/XmlPullParserException
    //   4534	4544	1275	org/xmlpull/v1/XmlPullParserException
    //   4564	4575	1275	org/xmlpull/v1/XmlPullParserException
    //   4592	4600	1275	org/xmlpull/v1/XmlPullParserException
    //   4617	4628	1275	org/xmlpull/v1/XmlPullParserException
    //   4645	4655	1275	org/xmlpull/v1/XmlPullParserException
    //   4675	4686	1275	org/xmlpull/v1/XmlPullParserException
    //   4703	4713	1275	org/xmlpull/v1/XmlPullParserException
    //   4733	4744	1275	org/xmlpull/v1/XmlPullParserException
    //   4761	4769	1275	org/xmlpull/v1/XmlPullParserException
    //   4790	4800	1275	org/xmlpull/v1/XmlPullParserException
    //   4817	4826	1275	org/xmlpull/v1/XmlPullParserException
    //   4843	4851	1275	org/xmlpull/v1/XmlPullParserException
    //   4868	4877	1275	org/xmlpull/v1/XmlPullParserException
    //   4905	4916	1275	org/xmlpull/v1/XmlPullParserException
    //   4933	4941	1275	org/xmlpull/v1/XmlPullParserException
    //   4958	4969	1275	org/xmlpull/v1/XmlPullParserException
    //   4986	4996	1275	org/xmlpull/v1/XmlPullParserException
    //   5016	5027	1275	org/xmlpull/v1/XmlPullParserException
    //   5044	5054	1275	org/xmlpull/v1/XmlPullParserException
    //   5074	5085	1275	org/xmlpull/v1/XmlPullParserException
    //   5112	5122	1275	org/xmlpull/v1/XmlPullParserException
    //   86	91	5142	org/xmlpull/v1/XmlPullParserException
    //   109	133	5142	org/xmlpull/v1/XmlPullParserException
    //   151	160	5142	org/xmlpull/v1/XmlPullParserException
    //   265	274	5142	org/xmlpull/v1/XmlPullParserException
    //   109	133	5149	java/io/IOException
    //   151	160	5149	java/io/IOException
    //   265	274	5162	java/io/IOException
    //   109	133	5167	java/lang/NumberFormatException
    //   151	160	5167	java/lang/NumberFormatException
    //   265	274	5176	java/lang/NumberFormatException
  }
  
  private void a(String paramString, int paramInt)
  {
    for (int i = 1;; i = 0) {
      for (;;)
      {
        try
        {
          localObject = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(paramString.getBytes("utf-8")));
          str1 = ((Document)localObject).getElementsByTagName("location").item(0).getFirstChild().getNodeValue();
          str2 = ((Document)localObject).getElementsByTagName("title").item(0).getFirstChild().getNodeValue();
          if (((Document)localObject).getElementsByTagName("iconUrl").item(0).getFirstChild() != null)
          {
            paramString = ((Document)localObject).getElementsByTagName("iconUrl").item(0).getFirstChild().getNodeValue();
            localObject = ((Document)localObject).getElementsByTagName("backupUrl").item(0).getFirstChild().getNodeValue();
            if ("aio".equals(str1))
            {
              if (str1 != null)
              {
                if (str2 == null) {
                  break label440;
                }
                paramInt = 1;
                continue;
                if (((i & paramInt) != 0) && (!"".equals(str1)) && (!"".equals(str2)) && (!"".equals(paramString)) && (localObject != null) && (!"".equals(localObject))) {
                  SharedPreUtils.b(((QQAppInterface)getAppRuntime()).getCurrentAccountUin()).edit().putBoolean("aio_jump_lightalk_red_dot", true).commit();
                }
              }
              AIOJumpLightalkConfig.a(str1, str2, paramString, (String)localObject, jdField_a_of_type_JavaLangString);
              return;
            }
            if ("profile".equals(str1))
            {
              PCJumpLightalkConfig.a(str1, str2, paramString, (String)localObject, jdField_a_of_type_JavaLangString);
              return;
            }
          }
        }
        catch (Exception paramString)
        {
          Object localObject;
          String str1;
          String str2;
          paramString.printStackTrace();
          if (QLog.isColorLevel())
          {
            QLog.i("SPLASH_ConfigServlet", 2, "parse jump_lightalk xml  exception : " + paramString.getMessage());
            return;
            if ("call_detail".equals(str1))
            {
              CLJumpLightalkConfig.a(str1, str2, paramString, (String)localObject, jdField_a_of_type_JavaLangString);
              return;
            }
            if ("call_list".equals(str1))
            {
              CallTabLightalkConfig.a(str1, str2, paramString, (String)localObject, jdField_a_of_type_JavaLangString);
              return;
            }
            if ("calling".equals(str1))
            {
              QQCallLightalkConfig.a(str1, str2, paramString, (String)localObject, jdField_a_of_type_JavaLangString);
              return;
              paramString = "";
              continue;
              if (paramString == null) {
                break;
              }
              continue;
            }
          }
          return;
        }
        label440:
        paramInt = 0;
      }
    }
  }
  
  public static boolean a(PicAndAdConf paramPicAndAdConf, String paramString, Set paramSet)
  {
    boolean bool2 = false;
    for (;;)
    {
      Document localDocument;
      String str1;
      int i;
      long l1;
      String str2;
      String str3;
      int k;
      Object localObject;
      long l2;
      long l3;
      boolean bool1;
      try
      {
        localDocument = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(paramString.getBytes("utf-8")));
        NodeList localNodeList = localDocument.getElementsByTagName("pushbanner");
        str1 = "";
        i = 0;
        if (i < localNodeList.getLength())
        {
          l1 = Long.parseLong(localDocument.getElementsByTagName("channel").item(i).getFirstChild().getNodeValue());
          str2 = localDocument.getElementsByTagName("img").item(i).getFirstChild().getNodeValue();
          str3 = localDocument.getElementsByTagName("digest").item(i).getFirstChild().getNodeValue();
          k = Integer.parseInt(localDocument.getElementsByTagName("weight").item(i).getFirstChild().getNodeValue());
          localObject = localDocument.getElementsByTagName("md5").item(i).getFirstChild();
          if (localObject != null) {
            str1 = ((Node)localObject).getNodeValue();
          }
          localObject = localDocument.getElementsByTagName("end").item(i).getFirstChild().getNodeValue();
          SimpleDateFormat localSimpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
          l2 = localSimpleDateFormat.parse((String)localObject).getTime();
          l3 = localSimpleDateFormat.parse(localDocument.getElementsByTagName("begin").item(i).getFirstChild().getNodeValue()).getTime();
          if (System.currentTimeMillis() > l2)
          {
            if (QLog.isColorLevel()) {
              QLog.i("SPLASH_ConfigServlet", 2, "parseXML | NearbyBanner out of date, cid = " + l1 + ", endTime = " + (String)localObject);
            }
          }
          else if (str1.length() < 15)
          {
            if (!QLog.isColorLevel()) {
              break label758;
            }
            QLog.i("SPLASH_ConfigServlet", 2, "parseXML | NearbyBanner md5 length < 15, cid = " + l1);
          }
        }
      }
      catch (Exception paramPicAndAdConf)
      {
        bool1 = bool2;
        if (QLog.isColorLevel())
        {
          QLog.i("SPLASH_ConfigServlet", 2, "parseXML | NearbyBanner parse exception,", paramPicAndAdConf);
          bool1 = bool2;
        }
      }
      for (;;)
      {
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "parseNearbyBannerXml,result = " + bool1 + ",bannerContent =" + paramString);
        }
        return bool1;
        if ((paramSet != null) && (paramSet.contains(l1 + str1)))
        {
          if (!QLog.isColorLevel()) {
            break;
          }
          QLog.i("SPLASH_ConfigServlet", 2, "parseXML | NearbyBanner " + l1 + " had been closed, throw it");
          break;
        }
        localObject = new StringBuffer();
        int j = 0;
        while (j < localDocument.getElementsByTagName("url").item(i).getChildNodes().getLength())
        {
          ((StringBuffer)localObject).append(localDocument.getElementsByTagName("url").item(i).getChildNodes().item(j).getNodeValue());
          j += 1;
        }
        paramPicAndAdConf.a(paramPicAndAdConf.a(l1, str3, (byte)3, str2, ((StringBuffer)localObject).toString(), BaseApplication.getContext().getFilesDir().getAbsolutePath() + "/" + "NearbyBannerPic" + "/" + str1, l3 + "|" + l2, (short)k, str1));
        NearbySPUtil.a(jdField_a_of_type_JavaLangString, "has_new_banner", Boolean.valueOf(true));
        break;
        bool1 = true;
      }
      label758:
      i += 1;
    }
  }
  
  private static byte[] a(ConfigurationService.ReqGetConfig paramReqGetConfig)
  {
    paramReqGetConfig = paramReqGetConfig.toByteArray();
    long l = paramReqGetConfig.length;
    byte[] arrayOfByte = new byte[(int)l + 4];
    PkgTools.a(arrayOfByte, 0, 4L + l);
    PkgTools.a(arrayOfByte, 4, paramReqGetConfig, (int)l);
    return arrayOfByte;
  }
  
  public static byte[] a(byte[] paramArrayOfByte)
  {
    int i = paramArrayOfByte.length - 4;
    byte[] arrayOfByte = new byte[i];
    PkgTools.a(arrayOfByte, 0, paramArrayOfByte, 4, i);
    return arrayOfByte;
  }
  
  private void aa(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    for (;;)
    {
      int i;
      try
      {
        if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
        {
          i = 0;
          if (i < paramConfig.content_list.size())
          {
            Object localObject = ((String)paramConfig.content_list.get(i)).trim();
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServletQ.nearby.tag_nearby_config", 2, "receiveAllConfigs|type: 201,content: " + (String)localObject + ",version: " + paramConfig.version.get());
            }
            int j = paramConfig.version.get();
            if (j != SharedPreUtils.a(paramQQAppInterface.getApp(), "nearby_config_version", jdField_a_of_type_JavaLangString))
            {
              boolean bool = TextUtils.isEmpty((CharSequence)localObject);
              if (!bool) {
                try
                {
                  localObject = new JSONObject((String)localObject);
                  SharedPreUtils.a(paramQQAppInterface.getApp(), paramQQAppInterface.getCurrentAccountUin(), (JSONObject)localObject);
                  SharedPreUtils.a(paramQQAppInterface.getApp(), "nearby_config_version", jdField_a_of_type_JavaLangString, j);
                }
                catch (JSONException localJSONException)
                {
                  if (!QLog.isColorLevel()) {
                    continue;
                  }
                  QLog.e("SPLASH_ConfigServletQ.nearby.tag_nearby_config", 2, "received JSONException ");
                  continue;
                }
              }
            }
          }
          else
          {
            return;
          }
        }
      }
      catch (Exception paramQQAppInterface)
      {
        if (QLog.isColorLevel()) {
          QLog.e("SPLASH_ConfigServletQ.nearby.tag_nearby_config", 2, "received change machine config error,cmd : 201" + paramQQAppInterface.toString());
        }
      }
      while (QLog.isColorLevel())
      {
        QLog.d("SPLASH_ConfigServletQ.nearby.tag_nearby_config", 2, "received CHNAGE_MACHINE_CONFIG IGNORE THIS ACTION  because of SAME VERSION ");
        break;
        if (QLog.isColorLevel())
        {
          QLog.d("SPLASH_ConfigServletQ.nearby.tag_nearby_config", 2, "receiveAllConfigs|type: 201,content_list is empty ,version: " + paramConfig.version.get());
          return;
        }
      }
      i += 1;
    }
  }
  
  private void ab(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    try
    {
      SharedPreferences.Editor localEditor = paramQQAppInterface.getApp().getSharedPreferences("NearbyActivity.nearByTabUrl", 4).edit();
      if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
      {
        int i = 0;
        if (i < paramConfig.content_list.size())
        {
          Object localObject = ((String)paramConfig.content_list.get(i)).trim();
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServletQ.nearby.tag_nearby_config", 2, "receiveAllConfigs|type: 129,content: " + (String)localObject + ",version: " + paramConfig.version.get());
          }
          int j = paramConfig.version.get();
          if (j != SharedPreUtils.a(paramQQAppInterface.getApp(), "nearby_nowlive_tab_config_version", jdField_a_of_type_JavaLangString))
          {
            boolean bool = TextUtils.isEmpty((CharSequence)localObject);
            if (!bool) {
              for (;;)
              {
                try
                {
                  localObject = new JSONObject((String)localObject);
                  String str1 = ((JSONObject)localObject).getJSONObject("android").getString("url");
                  String str2 = ((JSONObject)localObject).getJSONObject("android").getString("menuCell_startLive");
                  String str3 = ((JSONObject)localObject).getJSONObject("android").getString("menuCell_personalCenter");
                  String str4 = ((JSONObject)localObject).getJSONObject("android").getString("menuCell_help");
                  localEditor.putString("nearByTabUrl", str1);
                  localEditor.putString("menuCell_startLive", str2);
                  localEditor.putString("menuCell_personalCenter", str3);
                  localEditor.putString("menuCell_help", str4);
                  if (Build.VERSION.SDK_INT >= 9) {
                    continue;
                  }
                  localEditor.commit();
                  if (QLog.isColorLevel()) {
                    QLog.e("SPLASH_ConfigServletQ.nearby.tag_nearby_config", 2, "received NearbyActivity.nearByTabUrl " + ((JSONObject)localObject).getJSONObject("android"));
                  }
                }
                catch (JSONException localJSONException)
                {
                  if (!QLog.isColorLevel()) {
                    continue;
                  }
                  QLog.e("SPLASH_ConfigServletQ.nearby.tag_nearby_config", 2, "received JSONException in get NearbyActivity.nearByTabUrl");
                  continue;
                }
                SharedPreUtils.a(paramQQAppInterface.getApp(), "nearby_nowlive_tab_config_version", jdField_a_of_type_JavaLangString, j);
                i += 1;
                break;
                localEditor.apply();
              }
            }
          }
        }
        else
        {
          return;
        }
      }
    }
    catch (Exception paramQQAppInterface)
    {
      if (QLog.isColorLevel()) {
        QLog.e("SPLASH_ConfigServletQ.nearby.tag_nearby_config", 2, "received change machine config error,cmd : 129" + paramQQAppInterface.toString());
      }
    }
    do
    {
      if (!QLog.isColorLevel()) {
        break;
      }
      QLog.d("SPLASH_ConfigServletQ.nearby.tag_nearby_config", 2, "received CHNAGE_MACHINE_CONFIG IGNORE THIS ACTION  because of SAME VERSION ");
      break;
    } while (!QLog.isColorLevel());
    QLog.d("SPLASH_ConfigServletQ.nearby.tag_nearby_config", 2, "receiveAllConfigs|type: 129,content_list is empty ,version: " + paramConfig.version.get());
  }
  
  private void ac(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    for (;;)
    {
      int i;
      try
      {
        ChangeMachineManager localChangeMachineManager = (ChangeMachineManager)paramQQAppInterface.getManager(182);
        if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
        {
          i = 0;
          if (i < paramConfig.content_list.size())
          {
            String str = ((String)paramConfig.content_list.get(i)).trim();
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 120,content: " + str + ",version: " + paramConfig.version.get());
            }
            int j = paramConfig.version.get();
            if ((j != SharedPreUtils.a(paramQQAppInterface.getApp(), "change_machine_version", jdField_a_of_type_JavaLangString)) && (!TextUtils.isEmpty(str)))
            {
              if (BaseApplicationImpl.isFirstLogin) {
                localChangeMachineManager.a(str);
              }
              SharedPreUtils.a(paramQQAppInterface.getApp(), "change_machine_version", jdField_a_of_type_JavaLangString, j);
            }
            else if (QLog.isColorLevel())
            {
              QLog.d("SPLASH_ConfigServlet", 2, "received CHNAGE_MACHINE_CONFIG IGNORE THIS ACTION  because of SAME VERSION ");
            }
          }
        }
      }
      catch (Exception paramQQAppInterface)
      {
        if (QLog.isColorLevel()) {
          QLog.e("SPLASH_ConfigServlet", 2, "received change machine config error,cmd : 120" + paramQQAppInterface.toString());
        }
      }
      while (!QLog.isColorLevel()) {
        return;
      }
      QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 120,content_list is empty ,version: " + paramConfig.version.get());
      return;
      i += 1;
    }
  }
  
  private void ad(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    for (;;)
    {
      try
      {
        j = paramConfig.version.get();
        k = SharedPreUtils.a(paramQQAppInterface.getApp(), "change_machine_version", jdField_a_of_type_JavaLangString);
        if (paramConfig.msg_content_list == null) {
          break label262;
        }
        i = paramConfig.msg_content_list.size();
        if (!QLog.isColorLevel()) {
          continue;
        }
        QLog.d("SPLASH_ConfigServlet", 2, String.format("handleNearbyVideoChatConfig, serverVersion[%s], localVersion[%s], size[%s]", new Object[] { Integer.valueOf(j), Integer.valueOf(k), Integer.valueOf(i) }));
      }
      catch (Exception paramQQAppInterface)
      {
        int j;
        int k;
        NearbyVideoChatManager localNearbyVideoChatManager;
        if (!QLog.isColorLevel()) {
          break label261;
        }
        QLog.e("SPLASH_ConfigServlet", 2, "received handleNearbyVideoChatConfig error,cmd : 195", paramQQAppInterface);
        return;
        if (!QLog.isColorLevel()) {
          break label261;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "GetDoodleTemplateConfig|type: handleNearbyVideoChatConfig null");
        return;
        localNearbyVideoChatManager.a("");
        if (!QLog.isColorLevel()) {
          break label261;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 195,content_list is empty ,version: " + paramConfig.version.get());
        return;
        if (j != k) {
          continue;
        }
      }
      localNearbyVideoChatManager = (NearbyVideoChatManager)paramQQAppInterface.getManager(223);
      if (i > 0)
      {
        paramConfig = b(paramConfig, k, 195);
        localNearbyVideoChatManager.a(paramConfig);
        if (!TextUtils.isEmpty(paramConfig))
        {
          SharedPreUtils.a(paramQQAppInterface.getApp(), "change_machine_version", jdField_a_of_type_JavaLangString, j);
          if (!QLog.isColorLevel()) {
            break label261;
          }
          QLog.d("SPLASH_ConfigServlet", 2, "GetDoodleTemplateConfig|type: handleNearbyVideoChatConfig, content: \n" + paramConfig);
          return;
        }
      }
      label261:
      return;
      label262:
      int i = -1;
    }
  }
  
  private void ae(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    for (;;)
    {
      try
      {
        j = paramConfig.version.get();
        k = SharedPreUtils.a(paramQQAppInterface.getApp(), "nearby_auth_video_config_version", jdField_a_of_type_JavaLangString);
        if (paramConfig.msg_content_list == null) {
          break label241;
        }
        i = paramConfig.msg_content_list.size();
        if (!QLog.isColorLevel()) {
          continue;
        }
        QLog.d("SPLASH_ConfigServlet", 2, String.format("handleNearbyAuthVideoConfig, serverVersion[%s], localVersion[%s], size[%s]", new Object[] { Integer.valueOf(j), Integer.valueOf(k), Integer.valueOf(i) }));
      }
      catch (Exception paramQQAppInterface)
      {
        int j;
        int k;
        if (!QLog.isColorLevel()) {
          break label240;
        }
        QLog.e("SPLASH_ConfigServlet", 2, "received handleNearbyAuthVideoConfig error,cmd : 227", paramQQAppInterface);
        return;
        if (!QLog.isColorLevel()) {
          break label240;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "GetDoodleTemplateConfig|type: handleNearbyAuthVideoConfig null");
        return;
        if (!QLog.isColorLevel()) {
          break label240;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 227,content_list is empty ,version: " + paramConfig.version.get());
        return;
        if (j != k) {
          continue;
        }
      }
      if (i > 0)
      {
        paramConfig = b(paramConfig, k, 227);
        if (!TextUtils.isEmpty(paramConfig))
        {
          NearbyVideoUtils.a(paramConfig);
          SharedPreUtils.a(paramQQAppInterface.getApp(), "nearby_auth_video_config_version", jdField_a_of_type_JavaLangString, j);
          if (!QLog.isColorLevel()) {
            break label240;
          }
          QLog.d("SPLASH_ConfigServlet", 2, "GetDoodleTemplateConfig|type: handleNearbyAuthVideoConfig, content: \n" + paramConfig);
          return;
        }
      }
      label240:
      return;
      label241:
      int i = -1;
    }
  }
  
  private void af(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    for (;;)
    {
      try
      {
        j = paramConfig.version.get();
        k = SharedPreUtils.a(paramQQAppInterface.getApp(), "nearby_videochat_dialog_config_version", jdField_a_of_type_JavaLangString);
        if (paramConfig.msg_content_list == null) {
          break label251;
        }
        i = paramConfig.msg_content_list.size();
        if (!QLog.isColorLevel()) {
          continue;
        }
        QLog.d("SPLASH_ConfigServlet", 2, String.format("handleNearbyVideoChatDialogConfig, serverVersion[%s], localVersion[%s], size[%s]", new Object[] { Integer.valueOf(j), Integer.valueOf(k), Integer.valueOf(i) }));
      }
      catch (Exception paramQQAppInterface)
      {
        int j;
        int k;
        if (!QLog.isColorLevel()) {
          break label250;
        }
        QLog.e("SPLASH_ConfigServlet", 2, "received handleNearbyVideoChatDialogConfig error,cmd : 268", paramQQAppInterface);
        return;
        if (!QLog.isColorLevel()) {
          break label250;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "GetDoodleTemplateConfig|type: handleNearbyVideoChatDialogConfig null");
        return;
        if (!QLog.isColorLevel()) {
          break label250;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 268,content_list is empty ,version: " + paramConfig.version.get());
        return;
        if (j != k) {
          continue;
        }
      }
      if (i > 0)
      {
        paramConfig = b(paramConfig, k, 268);
        if (!TextUtils.isEmpty(paramConfig))
        {
          ((NearbyVideoChatManager)paramQQAppInterface.getManager(223)).c(paramConfig);
          SharedPreUtils.a(paramQQAppInterface.getApp(), "nearby_videochat_dialog_config_version", jdField_a_of_type_JavaLangString, j);
          if (!QLog.isColorLevel()) {
            break label250;
          }
          QLog.d("SPLASH_ConfigServlet", 2, "GetDoodleTemplateConfig|type: handleNearbyVideoChatDialogConfig, content: \n" + paramConfig);
          return;
        }
      }
      label250:
      return;
      label251:
      int i = -1;
    }
  }
  
  private void ag(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    for (;;)
    {
      try
      {
        j = paramConfig.version.get();
        k = SharedPreUtils.a(paramQQAppInterface.getApp(), "nearby_videochat_banner_config_version", jdField_a_of_type_JavaLangString);
        if (paramConfig.msg_content_list == null) {
          break label251;
        }
        i = paramConfig.msg_content_list.size();
        if (!QLog.isColorLevel()) {
          continue;
        }
        QLog.d("SPLASH_ConfigServlet", 2, String.format("handleNearbyVideoChatBannerConfig, serverVersion[%s], localVersion[%s], size[%s]", new Object[] { Integer.valueOf(j), Integer.valueOf(k), Integer.valueOf(i) }));
      }
      catch (Exception paramQQAppInterface)
      {
        int j;
        int k;
        if (!QLog.isColorLevel()) {
          break label250;
        }
        QLog.e("SPLASH_ConfigServlet", 2, "received handleNearbyVideoChatBannerConfig error,cmd : 269", paramQQAppInterface);
        return;
        if (!QLog.isColorLevel()) {
          break label250;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "GetDoodleTemplateConfig|type: handleNearbyVideoChatBannerConfig null");
        return;
        if (!QLog.isColorLevel()) {
          break label250;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 269,content_list is empty ,version: " + paramConfig.version.get());
        return;
        if (j != k) {
          continue;
        }
      }
      if (i > 0)
      {
        paramConfig = b(paramConfig, k, 269);
        if (!TextUtils.isEmpty(paramConfig))
        {
          ((NearbyVideoChatManager)paramQQAppInterface.getManager(223)).b(paramConfig);
          SharedPreUtils.a(paramQQAppInterface.getApp(), "nearby_videochat_banner_config_version", jdField_a_of_type_JavaLangString, j);
          if (!QLog.isColorLevel()) {
            break label250;
          }
          QLog.d("SPLASH_ConfigServlet", 2, "GetDoodleTemplateConfig|type: handleNearbyVideoChatBannerConfig, content: \n" + paramConfig);
          return;
        }
      }
      label250:
      return;
      label251:
      int i = -1;
    }
  }
  
  private void ah(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
    {
      paramQQAppInterface = (PhoneContactManagerImp)paramQQAppInterface.getManager(10);
      if (paramConfig.content_list.size() < 0)
      {
        str = (String)paramConfig.content_list.get(0);
        i = paramConfig.version.get();
        j = paramQQAppInterface.e();
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 97,content: " + str + ",version: " + paramConfig.version.get());
        }
        if ((i != j) || (paramConfig.content_list.size() > 0)) {
          paramQQAppInterface.a(i, str);
        }
      }
    }
    while (!QLog.isColorLevel())
    {
      String str;
      int i;
      int j;
      return;
    }
    QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 97,content_list is empty ,version: " + paramConfig.version.get());
  }
  
  private void ai(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    int i = SharedPreUtils.a(paramQQAppInterface.getApp(), "push_open_notify_version", jdField_a_of_type_JavaLangString);
    int j = paramConfig.version.get();
    if (QLog.isColorLevel()) {
      QLog.d("PushOpenNotify", 2, "handlePushOpenNotifyConfig, version: " + j + " oldVersion: " + i);
    }
    if (i == j) {}
    String str;
    do
    {
      return;
      while (!paramConfig.hasNext())
      {
        do
        {
          SharedPreUtils.a(getAppRuntime().getApplication(), "push_open_notify_version", jdField_a_of_type_JavaLangString, j);
        } while ((paramConfig.content_list == null) || (paramConfig.content_list.size() <= 0));
        paramConfig = paramConfig.content_list.get().iterator();
      }
      str = (String)paramConfig.next();
      if (QLog.isColorLevel()) {
        QLog.i("PushOpenNotify", 2, "config :" + str);
      }
    } while (TextUtils.isEmpty(str));
    MsgNotifyPushDialog.a(paramQQAppInterface, str, false);
    PreferenceManager.getDefaultSharedPreferences(paramQQAppInterface.getApp()).edit().putString(paramQQAppInterface.c() + "_" + "push_open_notify_xml", str).commit();
  }
  
  private void aj(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    try
    {
      i = paramConfig.version.get();
      localBabyQHandler = (BabyQHandler)paramQQAppInterface.a(53);
      j = localBabyQHandler.a(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount());
      if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
      {
        paramQQAppInterface = (String)paramConfig.content_list.get(0);
        if (QLog.isColorLevel()) {
          QLog.d("babyqConfig", 2, "received BabyQPlusPanelConfig configVersion:" + i + " ,localVersion:" + j + " ,configContent" + paramQQAppInterface);
        }
        if (i != j)
        {
          localBabyQHandler.a(i, paramQQAppInterface);
          return;
        }
        localBabyQHandler.a(false, false);
        return;
      }
    }
    catch (Exception paramQQAppInterface)
    {
      int i;
      BabyQHandler localBabyQHandler;
      int j;
      if (QLog.isColorLevel())
      {
        QLog.e("babyqConfig", 2, "received BabyQPlusPanelConfig error", paramQQAppInterface);
        return;
        if (i == j) {
          if (QLog.isColorLevel()) {
            QLog.d("babyqConfig", 2, "received BabyQPlusPanelConfig, content_list is empty, ignored because of SAME VERSION");
          }
        }
        for (;;)
        {
          localBabyQHandler.a(false, false);
          return;
          if (QLog.isColorLevel()) {
            QLog.d("babyqConfig", 2, "received BabyQPlusPanelConfig, content_list is empty, use default config");
          }
        }
      }
    }
  }
  
  private void ak(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if (QLog.isColorLevel()) {
      QLog.d("SPLASH_ConfigServlet", 2, "handleRespAddContactsViewConfig|type= " + paramConfig.type.get());
    }
    int j = paramConfig.version.get();
    if (j == SharedPreUtils.ac(paramQQAppInterface.getApp(), paramQQAppInterface.getCurrentAccountUin())) {
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "AddContactsViewConfig serverVersion is equals to localVersion ");
      }
    }
    do
    {
      do
      {
        return;
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "AddContactsViewConfig contentlist:" + paramConfig.content_list);
        }
      } while ((paramConfig.content_list == null) || (paramConfig.content_list.size() <= 0));
      paramConfig = (String)paramConfig.content_list.get(0);
    } while (paramConfig == null);
    XmlPullParser localXmlPullParser = Xml.newPullParser();
    ConfigurationService.Config localConfig = null;
    for (;;)
    {
      try
      {
        localXmlPullParser.setInput(new ByteArrayInputStream(paramConfig.getBytes()), "utf-8");
        i = localXmlPullParser.getEventType();
      }
      catch (Exception paramQQAppInterface) {}
      int i = localXmlPullParser.next();
      localConfig = paramConfig;
      break label357;
      String str = localXmlPullParser.getName();
      paramConfig = localConfig;
      if (str != null)
      {
        paramConfig = localConfig;
        if (str.equalsIgnoreCase("entrencelist"))
        {
          paramConfig = localXmlPullParser.nextText();
          continue;
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, "AddContactsView entrencelist:" + localConfig);
          }
          if ((localConfig == null) || (localConfig.length() <= 0)) {
            break;
          }
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, "success");
          }
          SharedPreUtils.c(paramQQAppInterface.getApp(), j, paramQQAppInterface.getCurrentAccountUin(), localConfig);
          return;
          if (!QLog.isColorLevel()) {
            break;
          }
          QLog.e("SPLASH_ConfigServlet", 2, "AddContactsViewConfig appear exception:" + paramQQAppInterface.toString());
          return;
          label357:
          if (i != 1)
          {
            paramConfig = localConfig;
            switch (i)
            {
            }
            paramConfig = localConfig;
          }
        }
      }
    }
  }
  
  private void al(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    ConfigurationService.Config localConfig = null;
    if (QLog.isColorLevel()) {
      QLog.d("SPLASH_ConfigServlet", 2, "handleRespClassicHeadConfig|type= " + paramConfig.type.get());
    }
    int j = paramConfig.version.get();
    if (j == SharedPreUtils.ad(paramQQAppInterface.getApp(), paramQQAppInterface.getCurrentAccountUin())) {
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "ClassicHeadConfig serverVersion is equals to localVersion ");
      }
    }
    label81:
    do
    {
      break label81;
      break label81;
      do
      {
        return;
      } while ((paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() <= 0));
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "ClassicHeadConfig size:" + paramConfig.msg_content_list.size() + "ClassicHeadConfig content:" + paramConfig.msg_content_list.get(0));
      }
      paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
    } while (paramConfig == null);
    if (paramConfig.compress.get() == 1)
    {
      paramConfig = OlympicUtil.a(paramConfig.content.get().toByteArray());
      if (paramConfig == null) {}
    }
    for (;;)
    {
      XmlPullParser localXmlPullParser;
      int i;
      try
      {
        paramConfig = new String(paramConfig, "UTF-8");
        if (paramConfig == null) {
          break label81;
        }
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "ClassicHead xmlContent = " + paramConfig);
        }
        localXmlPullParser = Xml.newPullParser();
        try
        {
          localXmlPullParser.setInput(new ByteArrayInputStream(paramConfig.getBytes()), "utf-8");
          i = localXmlPullParser.getEventType();
        }
        catch (Exception paramQQAppInterface) {}
        i = localXmlPullParser.next();
        localConfig = paramConfig;
      }
      catch (Throwable paramConfig)
      {
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "Throwable:" + paramConfig.getMessage());
        }
        paramConfig = null;
        continue;
      }
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "inflateConfigString error!");
      }
      paramConfig = null;
      continue;
      paramConfig = paramConfig.content.get().toStringUtf8();
      continue;
      String str = localXmlPullParser.getName();
      if ((str != null) && (str.equalsIgnoreCase("beginTime")))
      {
        paramConfig = localXmlPullParser.nextText();
      }
      else
      {
        paramConfig = localConfig;
        if (str != null)
        {
          paramConfig = localConfig;
          if (str.equalsIgnoreCase("endTime"))
          {
            paramConfig = localConfig + "|" + localXmlPullParser.nextText();
            continue;
            do
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "ClassicHead entrence:" + localConfig);
              }
              if ((localConfig == null) || (localConfig.length() <= 0)) {
                break;
              }
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "ClassicHead getContent success");
              }
              SharedPreUtils.d(paramQQAppInterface.getApp(), j, paramQQAppInterface.getCurrentAccountUin(), localConfig);
              paramQQAppInterface = (ClassicHeadActivityManager)paramQQAppInterface.getManager(198);
              if (paramQQAppInterface == null) {
                break;
              }
              paramQQAppInterface.a();
              return;
              if (!QLog.isColorLevel()) {
                break;
              }
              QLog.e("SPLASH_ConfigServlet", 2, "ClassicHeadConfig appear exception:", paramQQAppInterface);
              return;
            } while (i == 1);
            paramConfig = localConfig;
            switch (i)
            {
            }
            paramConfig = localConfig;
          }
        }
      }
    }
  }
  
  private void am(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    try
    {
      i = paramConfig.version.get();
      j = SharedPreUtils.K(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount());
      if ((paramConfig.content_list == null) || (paramConfig.content_list.size() <= 0)) {
        break label156;
      }
      paramConfig = (String)paramConfig.content_list.get(0);
      if (QLog.isColorLevel()) {
        QLog.d("HeadsUp", 2, "received Headsup Notify configVersion:" + i + " ,localVersion:" + j + " ,configContent" + paramConfig);
      }
      if (i == j) {
        return;
      }
      if (!paramConfig.contains("headsup_switch")) {
        break label248;
      }
      bool = paramConfig.split("=")[1].trim().equals("true");
    }
    catch (Exception paramQQAppInterface)
    {
      int i;
      int j;
      boolean bool;
      label156:
      while (QLog.isColorLevel())
      {
        QLog.e("HeadsUp", 2, "received Headsup Notify error", paramQQAppInterface);
        return;
        label248:
        bool = false;
      }
    }
    SharedPreUtils.a(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount(), i, true, bool);
    return;
    if (i != j)
    {
      SharedPreUtils.a(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount(), i, false, true);
      paramQQAppInterface.a.jdField_a_of_type_Boolean = false;
    }
    if (QLog.isColorLevel())
    {
      QLog.d("HeadsUp", 2, "received Headsup Notify configVersion:" + i + " ,localVersion:" + j);
      return;
    }
  }
  
  private void an(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    try
    {
      i = paramConfig.version.get();
      int j = SharedPreUtils.M(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
      if ((i > 0) && (i != j))
      {
        SharedPreUtils.o(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, i);
        if ((paramConfig.content_list.has()) && (paramConfig.content_list.size() > 0))
        {
          paramQQAppInterface = (String)paramConfig.content_list.get(0);
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, "received readinjoy hb config configVersion:" + i + " ,localVersion:" + j + " ,configContent" + paramQQAppInterface);
          }
          KandianHBManager.a().a(paramQQAppInterface);
          return;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "received readinjoy hb config , but content is empty!");
        return;
      }
    }
    catch (Exception paramQQAppInterface)
    {
      int i;
      if (QLog.isColorLevel())
      {
        QLog.e("SPLASH_ConfigServlet", 2, "received readinjou hb config error , msg : ", paramQQAppInterface);
        return;
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "received readinjoy hb config versionCode is error : " + i);
        }
      }
    }
  }
  
  private void ao(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    SearchEntryConfigManager.jdField_a_of_type_JavaLangString = paramQQAppInterface.getCurrentAccountUin();
    int i = paramConfig.version.get();
    int j = SearchEntryConfigManager.a(paramQQAppInterface.getApp(), paramQQAppInterface.getCurrentAccountUin());
    if (QLog.isColorLevel()) {
      QLog.d("Q.uniteSearch.SearchNetEntryConfig", 2, "handleSearchNetEntryConfig, version: " + i + " localVersion: " + j);
    }
    if (i == j) {
      return;
    }
    SearchEntryConfigManager.a(paramQQAppInterface.getApp(), i, paramQQAppInterface.getCurrentAccountUin());
    SearchEntryConfigManager.a(paramQQAppInterface.getApp(), paramConfig, paramQQAppInterface.c());
  }
  
  private void ap(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if (QLog.isColorLevel()) {
      QLog.d("Medal_SPLASH_ConfigServlet", 2, "handleMedalConfig|type= " + paramConfig.type.get());
    }
    int j = paramConfig.version.get();
    if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
    {
      Object localObject = (String)paramConfig.content_list.get(0);
      if (QLog.isColorLevel()) {
        QLog.d("Medal_SPLASH_ConfigServlet", 2, "content" + (String)localObject);
      }
      if (localObject != null)
      {
        String str3 = "";
        String str4 = "";
        String str5 = "";
        String str2 = str5;
        String str1 = str4;
        paramConfig = str3;
        try
        {
          localObject = new JSONObject((String)localObject);
          str2 = str5;
          str1 = str4;
          paramConfig = str3;
          str3 = ((JSONObject)localObject).optString("hosturl", "");
          str2 = str5;
          str1 = str4;
          paramConfig = str3;
          str4 = ((JSONObject)localObject).optString("customurl", "");
          str2 = str5;
          str1 = str4;
          paramConfig = str3;
          str5 = ((JSONObject)localObject).optString("shareurl", "");
          str2 = str5;
          str1 = str4;
          paramConfig = str3;
          int i = ((JSONObject)localObject).optInt("entrance_visibility", 0);
          paramConfig = str3;
          str1 = str4;
          str2 = str5;
          return;
        }
        catch (Exception localException)
        {
          for (;;)
          {
            try
            {
              ((MedalWallMng)paramQQAppInterface.getManager(249)).a(i, paramConfig, str1, str2);
              SharedPreUtils.y(paramQQAppInterface.getApp(), j, paramQQAppInterface.getCurrentAccountUin());
              SharedPreUtils.C(paramQQAppInterface.getApp(), paramQQAppInterface.getCurrentAccountUin(), i);
              return;
            }
            catch (Exception paramQQAppInterface)
            {
              if (!QLog.isColorLevel()) {
                return;
              }
              QLog.e("SPLASH_ConfigServlet", 2, paramQQAppInterface, new Object[0]);
            }
            localException = localException;
            if (QLog.isColorLevel()) {
              QLog.i("SPLASH_ConfigServlet", 2, localException.getMessage(), localException);
            }
            i = 0;
          }
        }
      }
    }
  }
  
  private void aq(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    j = 0;
    int i = 0;
    k = 0;
    m = 0;
    Object localObject1 = null;
    Object localObject2 = null;
    int n = paramConfig.version.get();
    int i1 = SharedPreUtils.b(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 2);
    if (n != i1)
    {
      if (paramConfig.msg_content_list.size() <= 0) {
        break label391;
      }
      paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
      if (paramConfig != null) {
        break label266;
      }
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, " handleMedalStrongReminderConfig content is null !");
      }
      i = 1;
      paramConfig = localObject2;
      j = i;
      k = m;
      if (TextUtils.isEmpty(paramConfig)) {}
    }
    for (;;)
    {
      for (;;)
      {
        try
        {
          localObject1 = new JSONObject(paramConfig);
          if (!((JSONObject)localObject1).has("medal_strong_reminder_off")) {
            continue;
          }
          j = ((JSONObject)localObject1).getInt("medal_strong_reminder_off");
          k = j;
          j = i;
        }
        catch (Exception localException)
        {
          label266:
          localException.printStackTrace();
          j = 5;
          k = m;
          continue;
        }
        if (j == 0)
        {
          SharedPreUtils.d(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 3, k);
          if (paramQQAppInterface.a(249)) {
            ((MedalWallMng)paramQQAppInterface.getManager(249)).a(k);
          }
        }
        SharedPreUtils.d(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 2, n);
        localObject1 = paramConfig;
        if (QLog.isColorLevel()) {
          QLog.i("SPLASH_ConfigServlet", 2, String.format(Locale.getDefault(), "handleMedalStrongReminderConfig localVersion: %s, version: %s, result: %s, value: %s, strContent: %s", new Object[] { Integer.valueOf(i1), Integer.valueOf(n), Integer.valueOf(j), Integer.valueOf(k), localObject1 }));
        }
        return;
        if (paramConfig.compress.get() != 1) {
          continue;
        }
        paramConfig = OlympicUtil.a(paramConfig.content.get().toByteArray());
        if (paramConfig != null) {
          try
          {
            paramConfig = new String(paramConfig, "UTF-8");
            i = 0;
          }
          catch (Throwable paramConfig)
          {
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet", 2, " handleMedalStrongReminderConfig Throwable:" + paramConfig.getMessage());
            }
            i = 2;
            paramConfig = null;
          }
        }
      }
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, " handleMedalStrongReminderConfig inflateConfigString error!");
      }
      i = 3;
      paramConfig = null;
      continue;
      paramConfig = paramConfig.content.get().toStringUtf8();
      break;
      label391:
      i = 4;
      paramConfig = localObject2;
      break;
      i = 6;
      j = 0;
    }
  }
  
  private void ar(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    int j = 0;
    int i = 0;
    Object localObject2 = null;
    Object localObject1 = null;
    for (;;)
    {
      try
      {
        int k = paramConfig.version.get();
        int m = ((Integer)SharedPreUtils.a(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 2)).intValue();
        if (k != m)
        {
          if (paramConfig.msg_content_list.size() <= 0) {
            continue;
          }
          paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
          if (paramConfig == null)
          {
            if (!QLog.isColorLevel()) {
              break label336;
            }
            QLog.d("SPLASH_ConfigServlet", 2, " handlePushRecommendShieldConfig content is null !");
            break label336;
            if (i == 0)
            {
              SharedPreUtils.a(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 3, localObject1);
              if (paramQQAppInterface.a(158)) {
                ((MayknowRecommendManager)paramQQAppInterface.getManager(158)).a((String)localObject1);
              }
            }
            SharedPreUtils.a(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, 2, Integer.valueOf(k));
          }
        }
        else
        {
          if (!QLog.isColorLevel()) {
            break label355;
          }
          QLog.i("SPLASH_ConfigServlet", 2, String.format(Locale.getDefault(), "handlePushRecommendShieldConfig localVersion: %s, version: %s, result: %s, strContent: %s", new Object[] { Integer.valueOf(m), Integer.valueOf(k), Integer.valueOf(i), localObject1 }));
          return;
        }
        if (paramConfig.compress.get() == 1)
        {
          paramConfig = OlympicUtil.a(paramConfig.content.get().toByteArray());
          if (paramConfig != null)
          {
            try
            {
              paramConfig = new String(paramConfig, "UTF-8");
              i = 0;
            }
            catch (Throwable paramConfig)
            {
              if (!QLog.isColorLevel()) {
                break label356;
              }
            }
            QLog.d("SPLASH_ConfigServlet", 2, " handlePushRecommendShieldConfig Throwable:" + paramConfig.getMessage());
            break label356;
          }
          else
          {
            if (!QLog.isColorLevel()) {
              break label363;
            }
            QLog.d("SPLASH_ConfigServlet", 2, " handlePushRecommendShieldConfig inflateConfigString error!");
            break label363;
          }
        }
        else
        {
          paramConfig = paramConfig.content.get().toStringUtf8();
          i = j;
          break label341;
          i = 4;
          paramConfig = localObject2;
        }
      }
      catch (Throwable paramQQAppInterface)
      {
        paramQQAppInterface.printStackTrace();
        return;
      }
      label336:
      i = 1;
      paramConfig = localObject2;
      label341:
      localObject1 = paramConfig;
      if (paramConfig == null)
      {
        localObject1 = "";
        continue;
        label355:
        return;
        label356:
        paramConfig = null;
        i = 2;
        continue;
        label363:
        paramConfig = null;
        i = 3;
      }
    }
  }
  
  private void as(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    int i = paramConfig.version.get();
    int j = SharedPreUtils.L(paramQQAppInterface.getApp(), paramQQAppInterface.getCurrentAccountUin());
    if (QLog.isColorLevel()) {
      QLog.d("SPLASH_ConfigServlet", 2, "handleLbsPackConfig, version: " + i + " localVersion: " + j);
    }
    if (i == j) {}
    do
    {
      do
      {
        return;
        if ((paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() <= 0)) {
          break;
        }
        paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
      } while (paramConfig == null);
      if (paramConfig.compress.get() == 1)
      {
        paramConfig = OlympicUtil.a(paramConfig.content.get().toByteArray());
        if (paramConfig == null) {}
      }
      for (;;)
      {
        try
        {
          paramConfig = new String(paramConfig, "UTF-8");
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, "handleLbsPackConfig,xmlContent:" + paramConfig);
          }
          paramConfig = LbsPackConfig.parseConfig(paramConfig);
          if (paramConfig == null) {
            break;
          }
          paramConfig.version = i;
          String str = paramQQAppInterface.getCurrentAccountUin();
          SharedPreUtils.n(paramQQAppInterface.getApp(), str, i);
          ThreadManager.getFileThreadHandler().post(new ablt(this, paramConfig, str));
          return;
        }
        catch (Throwable paramConfig)
        {
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, "Throwable:" + paramConfig.getMessage());
          }
          paramConfig = null;
          continue;
        }
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "inflateConfigString error!");
        }
        paramConfig = null;
        continue;
        paramConfig = paramConfig.content.get().toStringUtf8();
      }
      LbsPackConfig.deleteLocalConfig(jdField_a_of_type_JavaLangString);
    } while (!QLog.isColorLevel());
    QLog.d("SPLASH_ConfigServlet", 2, "handleLbsPackConfig, msg_content_list is null");
  }
  
  private void at(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    Object localObject3 = null;
    Object localObject1 = localObject3;
    Object localObject4;
    if (paramConfig.msg_content_list != null)
    {
      localObject1 = localObject3;
      if (paramConfig.msg_content_list.size() > 0)
      {
        localObject4 = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
        localObject1 = localObject3;
        if (localObject4 != null)
        {
          if (((ConfigurationService.Content)localObject4).compress.get() != 1) {
            break label460;
          }
          localObject3 = OlympicUtil.a(((ConfigurationService.Content)localObject4).content.get().toByteArray());
          if (localObject3 == null) {
            break label521;
          }
        }
      }
    }
    for (;;)
    {
      try
      {
        localObject1 = new String((byte[])localObject3, "UTF-8");
        localObject3 = BaseApplicationImpl.getApplication().getSharedPreferences("DynamicAdjustment", 4).edit();
        try
        {
          if (!TextUtils.isEmpty((CharSequence)localObject1))
          {
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet", 2, "SVDNAdjustment config : " + (String)localObject1);
            }
            localObject4 = new JSONObject((String)localObject1).getJSONObject("SVDNAdjustment").getJSONArray("configs").getJSONObject(0).getJSONObject("config");
            ((SharedPreferences.Editor)localObject3).putFloat("SVDNAdjustment_data_type", (float)((JSONObject)localObject4).optDouble("data_type", 0.5D));
            ((SharedPreferences.Editor)localObject3).putInt("SVDNAdjustment_max_downmark", ((JSONObject)localObject4).optInt("max_downmark", 2));
            ((SharedPreferences.Editor)localObject3).putInt("SVDNAdjustment_max_upmark", ((JSONObject)localObject4).optInt("max_upmark", 2));
            ((SharedPreferences.Editor)localObject3).putInt("SVDNAdjustment_up_threshold_base", ((JSONObject)localObject4).optInt("up_threshold_base", 11));
            ((SharedPreferences.Editor)localObject3).putInt("SVDNAdjustment_down_threshold_base", ((JSONObject)localObject4).optInt("down_threshold_base", 25));
            ((SharedPreferences.Editor)localObject3).putInt("SVDNAdjustment_quality_up_threshold", ((JSONObject)localObject4).optInt("up_threshold_base", 11));
            ((SharedPreferences.Editor)localObject3).putInt("SVDNAdjustment_quality_down_threshold", ((JSONObject)localObject4).optInt("down_threshold_base", 25));
            ((SharedPreferences.Editor)localObject3).putFloat("SVDNAdjustment_up_threshold_coefficient", (float)((JSONObject)localObject4).optDouble("up_threshold_coefficient", 0.7D));
            ((SharedPreferences.Editor)localObject3).putFloat("SVDNAdjustment_down_threshold_coefficient", (float)((JSONObject)localObject4).optDouble("down_threshold_coefficient", 1.3D));
            ((SharedPreferences.Editor)localObject3).commit();
          }
        }
        catch (Exception localException)
        {
          Object localObject2;
          String str1;
          if (!QLog.isColorLevel()) {
            break label513;
          }
          QLog.e("SPLASH_ConfigServlet", 2, "error: " + localException.toString());
          localException.printStackTrace();
          continue;
        }
        com.tencent.mobileqq.activity.richmedia.VideoFilterTools.a();
        com.tencent.mobileqq.activity.richmedia.VideoFilterTools.a((String)localObject1);
        SharedPreUtils.x(paramQQAppInterface.getApp(), paramConfig.version.get(), jdField_a_of_type_JavaLangString);
        return;
      }
      catch (UnsupportedEncodingException localUnsupportedEncodingException)
      {
        if (QLog.isColorLevel()) {
          localUnsupportedEncodingException.printStackTrace();
        }
        localObject2 = null;
        continue;
      }
      catch (OutOfMemoryError localOutOfMemoryError)
      {
        if (QLog.isColorLevel()) {
          localOutOfMemoryError.printStackTrace();
        }
        System.gc();
        try
        {
          str1 = new String((byte[])localObject3, "UTF-8");
        }
        catch (Throwable localThrowable)
        {
          str2 = null;
        }
        continue;
      }
      label460:
      String str2 = ((ConfigurationService.Content)localObject4).content.get().toStringUtf8();
      continue;
      label513:
      label521:
      str2 = null;
    }
  }
  
  private void au(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    Object localObject = null;
    int i = SharedPreUtils.d(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, "campus_circle_config");
    int j = paramConfig.version.get();
    if (i != j) {
      if ((paramConfig.msg_content_list != null) && (paramConfig.msg_content_list.size() > 0))
      {
        paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
        if ((paramConfig != null) && (paramConfig.content.has())) {
          if (paramConfig.compress.get() == 1)
          {
            paramConfig = OlympicUtil.a(paramConfig.content.get().toByteArray());
            if (paramConfig == null) {
              break label301;
            }
          }
        }
      }
    }
    for (;;)
    {
      try
      {
        paramConfig = new String(paramConfig, "UTF-8");
        if (QLog.isColorLevel()) {
          QLog.i("CAMPUS_CIRCLE_CONFIG", 2, String.format(Locale.getDefault(), "handleCampusCircleConfig config_content: %s", new Object[] { paramConfig }));
        }
        localObject = paramConfig;
        if (paramConfig == null) {
          localObject = "";
        }
        SharedPreUtils.a(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, "campus_circle_config", (String)localObject);
        SharedPreUtils.d(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, "campus_circle_config", j);
        return;
      }
      catch (Exception paramConfig)
      {
        QLog.e("SPLASH_ConfigServlet", 1, "handleCUOpenCardGuideConfig|uncompress failed" + paramConfig);
        paramConfig = null;
        continue;
      }
      paramConfig = paramConfig.content.get().toStringUtf8();
      continue;
      paramConfig = (ConfigurationService.Config)localObject;
      if (QLog.isColorLevel())
      {
        QLog.i("CAMPUS_CIRCLE_CONFIG", 2, "handleCampusCircleConfig empty content");
        paramConfig = (ConfigurationService.Config)localObject;
        continue;
        paramConfig = (ConfigurationService.Config)localObject;
        if (QLog.isColorLevel())
        {
          QLog.i("CAMPUS_CIRCLE_CONFIG", 2, "handleCampusCircleConfig empty config");
          paramConfig = (ConfigurationService.Config)localObject;
          continue;
          if (QLog.isColorLevel())
          {
            QLog.i("CAMPUS_CIRCLE_CONFIG", 2, "handleCampusCircleConfig same version, no need to update");
            return;
            label301:
            paramConfig = null;
          }
        }
      }
    }
  }
  
  private void av(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    Object localObject2 = null;
    Object localObject1 = null;
    boolean bool2 = true;
    OCRManager localOCRManager = (OCRManager)paramQQAppInterface.getManager(227);
    int i = localOCRManager.a();
    int j = paramConfig.version.get();
    QLog.d("SPLASH_ConfigServlet", 1, "handleGetOCRConfig, version:" + j + ",localVersion:" + i);
    if (i != j) {
      if ((paramConfig.msg_content_list != null) && (paramConfig.msg_content_list.size() > 0))
      {
        paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
        paramQQAppInterface = localObject2;
        if (paramConfig == null) {
          break label343;
        }
        if (paramConfig.compress.get() == 1)
        {
          paramQQAppInterface = OlympicUtil.a(paramConfig.content.get().toByteArray());
          if (paramQQAppInterface == null) {}
        }
      }
    }
    for (;;)
    {
      try
      {
        paramQQAppInterface = new String(paramQQAppInterface, "UTF-8");
        paramConfig = OcrConfig.parse(paramQQAppInterface);
        paramQQAppInterface = paramConfig;
        if (paramConfig == null) {
          break label343;
        }
        paramConfig.version = j;
        bool1 = true;
        paramQQAppInterface = paramConfig;
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "handleGetOCRConfig, isSucc = " + bool1 + ", ocrConfig = " + paramQQAppInterface);
        }
        localOCRManager.a(bool1, paramQQAppInterface);
        return;
      }
      catch (Throwable paramQQAppInterface)
      {
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "Throwable:" + paramQQAppInterface.getMessage());
        }
        paramQQAppInterface = null;
        continue;
      }
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "inflateConfigString error!");
      }
      paramQQAppInterface = null;
      continue;
      paramQQAppInterface = paramConfig.content.get().toStringUtf8();
      continue;
      OcrConfig.deleteLocalConfig(jdField_a_of_type_JavaLangString);
      paramQQAppInterface = localObject1;
      boolean bool1 = bool2;
      if (QLog.isColorLevel())
      {
        QLog.d("SPLASH_ConfigServlet", 2, "handleGetOCRConfig, msg_content_list is null");
        paramQQAppInterface = localObject1;
        bool1 = bool2;
        continue;
        label343:
        bool1 = false;
        continue;
        bool1 = false;
        paramQQAppInterface = localObject1;
      }
    }
  }
  
  private void aw(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if (QLog.isColorLevel()) {
      QLog.d("SPLASH_ConfigServlet", 2, "love language handleRespLoveLanguageConfig|type= " + paramConfig.type.get());
    }
    int i = paramConfig.version.get();
    if (i == SharedPreUtils.ae(paramQQAppInterface.getApp(), paramQQAppInterface.getCurrentAccountUin())) {
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "love language handleRespLoveLanguageConfig serverVersion is equals to localVersion ");
      }
    }
    do
    {
      return;
      if ((paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() <= 0)) {
        break;
      }
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "love language handleRespLoveLanguageConfig size:" + paramConfig.msg_content_list.size() + ",content:" + paramConfig.msg_content_list.get(0));
      }
      paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
    } while (paramConfig == null);
    if (paramConfig.compress.get() == 1)
    {
      paramConfig = OlympicUtil.a(paramConfig.content.get().toByteArray());
      if (paramConfig == null) {}
    }
    for (;;)
    {
      int k;
      try
      {
        paramConfig = new String(paramConfig, "UTF-8");
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, new Object[] { "love language configContent:", paramConfig });
        }
        if (paramConfig == null) {
          break;
        }
        label360:
        try
        {
          paramConfig = new JSONObject(paramConfig);
          int j = paramConfig.optInt("lovelanguage");
          k = paramConfig.optInt("lovelanguagegray");
          SharedPreUtils.b(paramQQAppInterface.getApp(), paramQQAppInterface.getCurrentAccountUin(), i, j, k);
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, new Object[] { "love language save config -- version:", Integer.valueOf(i), ",activity =", Integer.valueOf(j), ",gray=", Integer.valueOf(k) });
          }
          paramQQAppInterface = (LoveLanguageManager)paramQQAppInterface.getManager(273);
          if (j != 1) {
            break label462;
          }
          bool1 = true;
        }
        catch (JSONException paramQQAppInterface) {}
        paramQQAppInterface.a(bool1, bool2);
        return;
        if (!QLog.isColorLevel()) {
          break;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "love language JSONException :", paramQQAppInterface);
        return;
      }
      catch (Throwable paramConfig)
      {
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "love language:" + paramConfig.getMessage());
        }
        paramConfig = null;
        continue;
      }
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "love language inflateConfigString error!");
      }
      paramConfig = null;
      continue;
      paramConfig = paramConfig.content.get().toStringUtf8();
      continue;
      label462:
      boolean bool1 = false;
      while (k != 1)
      {
        bool2 = false;
        break label360;
        if (!QLog.isColorLevel()) {
          break;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "love language handleRespLoveLanguageConfig size=0 or null");
        return;
      }
      boolean bool2 = true;
    }
  }
  
  public static String b(ConfigurationService.Config paramConfig, int paramInt1, int paramInt2)
  {
    if (paramConfig.version.get() == paramInt1) {
      return null;
    }
    if ((paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() == 0))
    {
      QLog.i("SPLASH_ConfigServlet", 1, String.format("handleCompressConfig| version is update but config content is null. newVersion=%d, oldVersion=%d, type=%d", new Object[] { Integer.valueOf(paramConfig.version.get()), Integer.valueOf(paramInt1), Integer.valueOf(paramInt2) }));
      return "";
    }
    if (paramConfig.msg_content_list.size() >= 2) {}
    for (paramInt1 = 1;; paramInt1 = 0)
    {
      Object localObject1 = ((ConfigurationService.Content)paramConfig.msg_content_list.get(paramInt1)).content.get().toByteArray();
      if (localObject1 == null)
      {
        QLog.e("SPLASH_ConfigServlet", 1, "handleCompressConfig| config content is null. type=" + paramInt2);
        return null;
      }
      Object localObject2;
      if (((ConfigurationService.Content)paramConfig.msg_content_list.get(0)).compress.get() == 1)
      {
        localObject2 = ArConfigUtils.a((byte[])localObject1);
        localObject1 = localObject2;
        if (localObject2 == null)
        {
          QLog.e("SPLASH_ConfigServlet", 1, "handleCompressConfig| decompress is failed. type=" + paramInt2 + ", data=null");
          return null;
        }
      }
      String str;
      try
      {
        localObject2 = new String((byte[])localObject1, "utf-8");
        if (localObject2 == null)
        {
          QLog.e("SPLASH_ConfigServlet", 1, "handleCompressConfig| switch data[] to String failed. type=" + paramInt2 + ", data=" + new String((byte[])localObject1));
          return null;
        }
      }
      catch (UnsupportedEncodingException localUnsupportedEncodingException)
      {
        for (;;)
        {
          localUnsupportedEncodingException.printStackTrace();
          str = null;
        }
        paramConfig = String.format("handleCompressConfig| config is update. version=%d, type=%d", new Object[] { Integer.valueOf(paramConfig.version.get()), Integer.valueOf(paramInt2) });
        if (!QLog.isColorLevel()) {
          break label358;
        }
      }
      QLog.i("SPLASH_ConfigServlet", 2, paramConfig + "content=" + str);
      for (;;)
      {
        return str;
        label358:
        QLog.i("SPLASH_ConfigServlet", 1, paramConfig);
      }
    }
  }
  
  private void b(Intent paramIntent, ConfigurationService.Config paramConfig)
  {
    if (QLog.isColorLevel()) {
      QLog.d("ArConfig_configServlet", 2, "handleResp_GetArEntranceConfig|type= " + paramConfig.type.get());
    }
    QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
    ArResourceManager localArResourceManager = (ArResourceManager)localQQAppInterface.getManager(167);
    if (paramConfig.type.get() != 88)
    {
      OlympicServlet.a(localQQAppInterface, 88, 0, 0, 1, 3, 0);
      return;
    }
    int i = paramConfig.version.get();
    int j;
    if (paramIntent.getIntExtra("key_ar_entrance_effect_version", 0) != i) {
      if ((paramConfig.msg_content_list != null) && (paramConfig.msg_content_list.size() > 0))
      {
        paramIntent = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
        j = paramIntent.task_id.get();
        if (paramIntent.compress.get() == 1)
        {
          paramIntent = ArConfigUtils.a(paramIntent.content.get().toByteArray());
          if (paramIntent == null)
          {
            OlympicServlet.a(localQQAppInterface, 88, i, j, 1, 4, 0);
            if (!QLog.isColorLevel()) {
              break label393;
            }
            QLog.d("ArConfig_configServlet", 2, "handleResp_GetArEntranceConfig||deCompress error!");
            paramIntent = null;
          }
        }
      }
    }
    for (;;)
    {
      paramIntent = ArEffectConfig.a(paramIntent);
      if (paramIntent != null)
      {
        paramIntent.jdField_a_of_type_Int = i;
        if (localArResourceManager != null) {
          localArResourceManager.a(paramIntent);
        }
        for (;;)
        {
          for (;;)
          {
            OlympicServlet.a(localQQAppInterface, 88, i, j, 1, 0, 0);
            return;
            try
            {
              paramIntent = new String(paramIntent, "utf-8");
            }
            catch (UnsupportedEncodingException localUnsupportedEncodingException)
            {
              paramConfig = null;
              paramIntent = paramConfig;
            }
          }
          if (!QLog.isColorLevel()) {
            break;
          }
          QLog.d("SPLASH_ConfigServlet", 2, localUnsupportedEncodingException.getMessage());
          paramIntent = paramConfig;
          break;
          paramIntent = paramIntent.content.get().toStringUtf8();
          break;
          if (QLog.isColorLevel()) {
            QLog.d("ArConfig_configServlet", 2, "handleResp_GetArEntranceConfig|arManager is null ");
          }
        }
      }
      OlympicServlet.a(localQQAppInterface, 88, i, j, 1, 5, 0);
      if (!QLog.isColorLevel()) {
        break;
      }
      QLog.d("ArConfig_configServlet", 2, "handleResp_GetArEntranceConfig||parseArEffectConfig error!");
      return;
      if (localArResourceManager != null) {
        localArResourceManager.b();
      }
      if (!QLog.isColorLevel()) {
        break;
      }
      QLog.d("ArConfig_configServlet", 2, "handleResp_GetArEntranceConfig || msg_content_list is null");
      return;
      if (!QLog.isColorLevel()) {
        break;
      }
      QLog.d("ArConfig_configServlet", 2, "handleResp_GetArEntranceConfig || has same version");
      return;
      label393:
      paramIntent = null;
    }
  }
  
  public static void b(QQAppInterface paramQQAppInterface, int paramInt)
  {
    if (QLog.isColorLevel()) {
      QLog.i("ShortVideoResourceManager", 2, "getShortVideoResourceConfig| getType=" + paramInt);
    }
    ShortVideoResourceManager.a = System.currentTimeMillis();
    a(paramQQAppInterface, 215, null);
  }
  
  private void b(QQAppInterface paramQQAppInterface, Intent paramIntent, ConfigurationService.Config paramConfig)
  {
    paramIntent = CapturePtvTemplateManager.a();
    int j = paramConfig.version.get();
    int i = SharedPreUtils.i(((QQAppInterface)getAppRuntime()).getApp());
    if (!CapturePtvTemplateManager.a()) {
      i = 0;
    }
    for (;;)
    {
      if (QLog.isColorLevel()) {
        QLog.d("CapturePtvTemplateManager_VideoRedbag", 2, "serverVersion=" + j + "|localVersion=" + i);
      }
      if (j == i) {
        break;
      }
      SharedPreUtils.g(((QQAppInterface)getAppRuntime()).getApp(), j);
      try
      {
        String str = b(paramConfig, i, 226);
        if (str != null)
        {
          paramIntent.c();
          paramIntent.a(paramQQAppInterface, str, 1);
          if (!QLog.isColorLevel()) {
            break;
          }
          QLog.d("CapturePtvTemplateManager", 2, "receiveAllConfigs|type: 226,content: " + str + ",version: " + paramConfig.version.get());
          return;
        }
        if (QLog.isColorLevel()) {
          QLog.d("CapturePtvTemplateManager", 2, "receiveAllConfigs|type: 226,content_list is empty ,version: " + paramConfig.version.get());
        }
        paramIntent.a(paramQQAppInterface, "", 1);
        return;
      }
      catch (OutOfMemoryError paramQQAppInterface)
      {
        if (!QLog.isColorLevel()) {
          break;
        }
      }
      QLog.e("CapturePtvTemplateManager", 2, "receiveAllConfigs|exception:" + paramQQAppInterface.getMessage());
      return;
    }
  }
  
  public static void b(QQAppInterface paramQQAppInterface, String paramString)
  {
    jdField_a_of_type_JavaLangString = paramString;
    NewIntent localNewIntent = new NewIntent(paramQQAppInterface.getApp(), ConfigServlet.class);
    localNewIntent.putExtra("k_cmd_type", new int[] { 34 });
    localNewIntent.putExtra("key_uin", paramString);
    paramQQAppInterface.startServlet(localNewIntent);
  }
  
  public static void b(QQAppInterface paramQQAppInterface, String paramString, int paramInt)
  {
    if ((paramQQAppInterface == null) || (TextUtils.isEmpty(paramString))) {
      QLog.d("SPLASH_ConfigServlet", 1, "armap config push app is null or uin is empty");
    }
    ARMapConfigManager localARMapConfigManager;
    if ((paramInt != -1) && (paramQQAppInterface != null))
    {
      localARMapConfigManager = (ARMapConfigManager)paramQQAppInterface.getManager(189);
      if (localARMapConfigManager.a()) {
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "ARMapForbidden getARMapConfig return");
        }
      }
    }
    do
    {
      return;
      int i = localARMapConfigManager.a();
      QLog.d("SPLASH_ConfigServlet", 1, "armap config push localVersion:" + i);
      if (paramInt == i)
      {
        QLog.d("SPLASH_ConfigServlet", 1, "armap config push same version");
        return;
      }
      QLog.d("SPLASH_ConfigServlet", 1, "armap config push pushVersion:" + paramInt);
    } while (paramQQAppInterface == null);
    a(2, paramQQAppInterface, paramString);
  }
  
  private void b(ConfigurationService.Config paramConfig, QQAppInterface paramQQAppInterface)
  {
    if (QLog.isColorLevel()) {
      QLog.d("SPLASH_ConfigServlet", 2, "received PUBLIC_ACCOUNT_CENTER_URL_CONFIG_CMD response");
    }
    label291:
    do
    {
      int i;
      int j;
      do
      {
        Iterator localIterator;
        for (;;)
        {
          String str;
          try
          {
            if ((paramConfig.content_list == null) || (paramConfig.content_list.size() <= 0)) {
              break label291;
            }
            i = paramConfig.version.get();
            j = PublicAccountConfigUtil.b(paramQQAppInterface);
            if (i == j) {
              break;
            }
            localIterator = paramConfig.content_list.get().iterator();
            if (localIterator.hasNext())
            {
              str = (String)localIterator.next();
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 70, version:" + paramConfig.version.get() + ", content:" + str);
              }
              if (PublicAccountConfigUtil.b(str))
              {
                PublicAccountConfigUtil.d(paramQQAppInterface);
                PublicAccountConfigUtil.b(paramQQAppInterface, i);
                if (!QLog.isColorLevel()) {
                  continue;
                }
                QLog.d("SPLASH_ConfigServlet", 2, "received PUBLIC_ACCOUNT_CENTER_URL_CONFIG_CMD save version: " + i);
              }
            }
            else
            {
              return;
            }
          }
          catch (Exception paramConfig)
          {
            if (QLog.isColorLevel()) {
              QLog.e("SPLASH_ConfigServlet", 2, "received PUBLIC_ACCOUNT_CENTER_URL_CONFIG_CMD error", paramConfig);
            }
            paramConfig.printStackTrace();
          }
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, "received PUBLIC_ACCOUNT_CENTER_URL_CONFIG_CMD content error:" + str);
          }
        }
      } while (!QLog.isColorLevel());
      QLog.d("SPLASH_ConfigServlet", 2, "received PUBLIC_ACCOUNT_CENTER_URL_CONFIG_CMD remote version: " + i + " | localVersion: " + j);
      return;
    } while (!QLog.isColorLevel());
    QLog.d("SPLASH_ConfigServlet", 2, "received PUBLIC_ACCOUNT_CENTER_URL_CONFIG_CMD content_list is empty");
  }
  
  private void b(String paramString, int paramInt)
  {
    try
    {
      Object localObject = a(new ByteArrayInputStream(paramString.getBytes("utf-8")));
      if (localObject != null)
      {
        paramString = ((String)localObject).substring(((String)localObject).indexOf("<?xml"), ((String)localObject).indexOf("</msg><msg")) + "</msg>";
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "qav_upgrade_invite msg1 = " + paramString);
        }
        String str = ((String)localObject).substring(((String)localObject).indexOf("<?xml"), ((String)localObject).indexOf("?>")) + "?>";
        localObject = ((String)localObject).substring(((String)localObject).indexOf("</msg><msg"), ((String)localObject).lastIndexOf("</msg>"));
        str = str + ((String)localObject).substring(6) + "</msg>";
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "qav_upgrade_invite msg2 = " + str);
        }
        localObject = SharedPreUtils.c(((QQAppInterface)getAppRuntime()).getCurrentAccountUin());
        ((SharedPreferences)localObject).edit().putString("qav_upgrade_invite_video", paramString).commit();
        ((SharedPreferences)localObject).edit().putString("qav_upgrade_invite_multi", str).commit();
        SharedPreUtils.m(getAppRuntime().getApplication(), paramInt, jdField_a_of_type_JavaLangString);
      }
      return;
    }
    catch (Exception paramString)
    {
      do
      {
        paramString.printStackTrace();
      } while (!QLog.isColorLevel());
      QLog.i("SPLASH_ConfigServlet", 2, "parse qav_upgrade_invite xml  exception : " + paramString.getMessage());
    }
  }
  
  public static byte[] b(byte[] paramArrayOfByte)
  {
    ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
    try
    {
      paramArrayOfByte = new InflaterInputStream(new ByteArrayInputStream(paramArrayOfByte));
      byte[] arrayOfByte = new byte[256];
      for (;;)
      {
        int i = paramArrayOfByte.read(arrayOfByte);
        if (-1 == i) {
          break;
        }
        localByteArrayOutputStream.write(arrayOfByte, 0, i);
      }
      paramArrayOfByte = localByteArrayOutputStream.toByteArray();
    }
    catch (Throwable paramArrayOfByte)
    {
      if (QLog.isColorLevel())
      {
        QLog.d("OlympicUtil", 2, "inflateConfigString");
        paramArrayOfByte.printStackTrace();
      }
      return null;
    }
    return paramArrayOfByte;
  }
  
  private void c(Intent paramIntent, ConfigurationService.Config paramConfig)
  {
    QLog.d("ArConfig_configServlet", 1, "handleResp_GetArResourceConfig| 2 type= " + paramConfig.type.get());
    QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
    ArResourceManager localArResourceManager = (ArResourceManager)localQQAppInterface.getManager(167);
    if (localArResourceManager == null)
    {
      QLog.d("ArConfig_configServlet", 1, "handleResp_GetArResourceConfig| manager is null");
      return;
    }
    Object localObject1 = BaseApplicationImpl.getApplication();
    int i;
    int j;
    ArrayList localArrayList;
    try
    {
      i = ((Context)localObject1).getPackageManager().getPackageInfo(((Context)localObject1).getPackageName(), 0).versionCode;
      localArResourceManager.a(i);
      QLog.d("ArConfig_configServlet", 1, "handleResp_GetArResourceConfig| 3 type= version code is " + i);
      if (paramConfig.type.get() != 87) {
        break label752;
      }
      j = paramConfig.version.get();
      i = paramIntent.getIntExtra("key_config_version", 0);
      if (QLog.isColorLevel()) {
        QLog.d("handleResp_GetArResourceConfig", 2, "handleResp_GetArResource|server-Version is " + j);
      }
      if (i == j) {
        break label731;
      }
      if (paramConfig.msg_content_list == null) {
        break label707;
      }
      int k = paramConfig.msg_content_list.size();
      if (k <= 0) {
        break label707;
      }
      localObject1 = null;
      localArrayList = new ArrayList();
      i = 0;
      if (i < k)
      {
        localObject3 = (ConfigurationService.Content)paramConfig.msg_content_list.get(i);
        m = ((ConfigurationService.Content)localObject3).task_id.get();
        localObject2 = ((ConfigurationService.Content)localObject3).content.get().toByteArray();
        paramIntent = (Intent)localObject2;
        if (((ConfigurationService.Content)localObject3).compress.get() == 1) {
          paramIntent = ArConfigUtils.a((byte[])localObject2);
        }
        if (paramIntent == null) {}
      }
    }
    catch (PackageManager.NameNotFoundException localNameNotFoundException)
    {
      for (;;)
      {
        int m;
        try
        {
          localObject2 = new String(paramIntent, "utf-8");
          localObject3 = ArConfigInfo.parseArConfig((String)localObject2);
          if (localObject3 != null) {
            if (localObject1 == null)
            {
              paramIntent = (Intent)localObject3;
              localArrayList.addAll(((ArConfigInfo)localObject3).mArCloudConfigInfos);
              QLog.i("ArConfig_configServlet", 1, "config loop|| taskid=" + m + ",endtime=" + ((ArConfigInfo)localObject3).aREnd + ",xmlcontent=" + (String)localObject2);
              OlympicServlet.a(localQQAppInterface, 87, j, m, 1, 0, 0);
              i += 1;
              localObject1 = paramIntent;
              continue;
              localNameNotFoundException = localNameNotFoundException;
              localNameNotFoundException.printStackTrace();
              QLog.d("ArConfig_configServlet", 1, "handleResp_GetArResourceConfig| 3 type= error happen");
            }
          }
        }
        catch (UnsupportedEncodingException paramIntent)
        {
          Object localObject3;
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, paramIntent.getMessage());
          }
          Object localObject2 = null;
          continue;
          paramIntent = localNameNotFoundException;
          if (localNameNotFoundException.aREnd >= ((ArConfigInfo)localObject3).aREnd) {
            continue;
          }
          paramIntent = (Intent)localObject3;
          continue;
          OlympicServlet.a(localQQAppInterface, 87, j, m, 1, 5, 0);
          paramIntent = localNameNotFoundException;
          if (!QLog.isColorLevel()) {
            continue;
          }
          QLog.d("ArConfig_configServlet", 2, "handleResp_GetArResource||parseArConfig error!");
          paramIntent = localNameNotFoundException;
          continue;
        }
        OlympicServlet.a(localQQAppInterface, 87, j, m, 1, 4, 0);
        paramIntent = localNameNotFoundException;
        if (QLog.isColorLevel())
        {
          QLog.d("ArConfig_configServlet", 2, "handleResp_GetArResource||deCompress error!");
          paramIntent = localNameNotFoundException;
        }
      }
    }
    if (localNameNotFoundException != null)
    {
      localNameNotFoundException.mArCloudConfigInfos = localArrayList;
      localNameNotFoundException.version = 2;
      localArResourceManager.b(j);
      localArResourceManager.a(localNameNotFoundException);
      if (QLog.isColorLevel()) {
        QLog.d("ArConfig_configServlet", 2, "maxEndTimeArConfigInfo|| maxEndtime=" + localNameNotFoundException.aREnd);
      }
      OlympicServlet.a(localQQAppInterface, 87, j, 0, 0, 0, 0);
    }
    for (;;)
    {
      i = 0;
      label648:
      if ((i == 0) || (localArResourceManager == null)) {
        break;
      }
      QLog.d("ArConfig_configServlet", 1, "arManager.downloadArResource");
      localArResourceManager.a(true, false);
      return;
      if (QLog.isColorLevel()) {
        QLog.d("ArConfig_configServlet", 2, "handleResp_GetArResource|combineArConfigInfo is null");
      }
      OlympicServlet.a(localQQAppInterface, 87, j, 0, 0, 5, 0);
      continue;
      label707:
      localArResourceManager.a();
      if (QLog.isColorLevel()) {
        QLog.d("ArConfig_configServlet", 2, "handleResp_GetArResource||msg_content_list is null!");
      }
    }
    label731:
    if (QLog.isColorLevel()) {
      QLog.d("ArConfig_configServlet", 2, "handleResp_GetArResource || has same version");
    }
    for (;;)
    {
      i = 1;
      break label648;
      break;
      label752:
      QLog.d("ArConfig_configServlet", 2, "handleResp_GetArResource || fail");
      OlympicServlet.a(localQQAppInterface, 87, 0, 0, 1, 3, 0);
    }
  }
  
  public static void c(QQAppInterface paramQQAppInterface, String paramString)
  {
    jdField_a_of_type_JavaLangString = paramString;
    a(paramQQAppInterface, 62);
  }
  
  private void c(String paramString, int paramInt)
  {
    try
    {
      paramString = a(new ByteArrayInputStream(paramString.getBytes("utf-8")));
      if (paramString != null)
      {
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "qav_anychat_time_limit stream = " + paramString);
        }
        SharedPreUtils.e(((QQAppInterface)getAppRuntime()).getCurrentAccountUin()).edit().putString("qav_anychat_time_value", paramString).commit();
        SharedPreUtils.n(getAppRuntime().getApplication(), paramInt, jdField_a_of_type_JavaLangString);
      }
      return;
    }
    catch (Exception paramString)
    {
      do
      {
        paramString.printStackTrace();
      } while (!QLog.isColorLevel());
      QLog.i("SPLASH_ConfigServlet", 2, "parse qav_anychat_time_limit  exception : " + paramString.getMessage());
    }
  }
  
  private void d(Intent paramIntent, ConfigurationService.Config paramConfig)
  {
    if (QLog.isColorLevel()) {
      QLog.d("handleResp_GetArGlobalConfig", 2, "handleResp_GetArGlobalConfig |  type= " + paramConfig.type.get());
    }
    ARGlobalConfigManager localARGlobalConfigManager = (ARGlobalConfigManager)((QQAppInterface)getAppRuntime()).getManager(219);
    int i;
    byte[] arrayOfByte;
    if (paramConfig.type.get() == 188)
    {
      i = paramConfig.version.get();
      if (paramIntent.getIntExtra("ar_global_key_config_version", 0) == i) {
        break label363;
      }
      if ((paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() <= 0)) {
        break label334;
      }
      paramIntent = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
      if (paramIntent == null) {
        break label315;
      }
      if (paramIntent.compress.get() != 1) {
        break label301;
      }
      arrayOfByte = OlympicUtil.a(paramIntent.content.get().toByteArray());
      if (arrayOfByte == null) {
        break label382;
      }
    }
    for (;;)
    {
      try
      {
        paramIntent = new String(arrayOfByte, "UTF-8");
        if (paramIntent != null)
        {
          if (QLog.isColorLevel()) {
            QLog.d("handleResp_GetArGlobalConfigSPLASH_ConfigServlet", 2, "handleRespGetHotDaysConfig, config_content is " + paramIntent);
          }
          i = paramConfig.version.get();
          if (localARGlobalConfigManager.a(paramIntent))
          {
            localARGlobalConfigManager.a(i);
            localARGlobalConfigManager.a();
          }
        }
        if (QLog.isColorLevel()) {
          QLog.d("handleResp_GetArGlobalConfigSPLASH_ConfigServlet", 2, "handleRespGetHotDaysConfig, config type 188");
        }
        return;
      }
      catch (UnsupportedEncodingException paramIntent)
      {
        if (QLog.isColorLevel()) {
          paramIntent.printStackTrace();
        }
        paramIntent = null;
        continue;
      }
      catch (OutOfMemoryError paramIntent)
      {
        if (QLog.isColorLevel()) {
          paramIntent.printStackTrace();
        }
        System.gc();
        try
        {
          paramIntent = new String(arrayOfByte, "UTF-8");
        }
        catch (Throwable paramIntent)
        {
          paramIntent = null;
        }
        continue;
      }
      label301:
      paramIntent = paramIntent.content.get().toStringUtf8();
      continue;
      label315:
      if (QLog.isColorLevel())
      {
        QLog.d("handleResp_GetArGlobalConfigSPLASH_ConfigServlet", 2, "handleRespGetHotDaysConfig, content is null");
        continue;
        label334:
        if (localARGlobalConfigManager != null) {
          localARGlobalConfigManager.b();
        }
        if (QLog.isColorLevel())
        {
          QLog.d("handleResp_GetArGlobalConfigSPLASH_ConfigServlet", 2, "we delete ARConfig info here");
          continue;
          label363:
          if (QLog.isColorLevel())
          {
            QLog.d("handleResp_GetArGlobalConfigSPLASH_ConfigServlet", 2, "handleRespGetHotDaysConfig, version same");
            continue;
            label382:
            paramIntent = null;
          }
        }
      }
    }
  }
  
  public static void d(QQAppInterface paramQQAppInterface, String paramString)
  {
    jdField_a_of_type_JavaLangString = paramString;
    a(paramQQAppInterface, 43);
  }
  
  private void d(String paramString, int paramInt)
  {
    int i;
    long l1;
    Object localObject1;
    Object localObject2;
    int k;
    Object localObject3;
    Object localObject4;
    long l2;
    long l3;
    Object localObject5;
    int j;
    try
    {
      Document localDocument = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(paramString.getBytes("utf-8")));
      NodeList localNodeList = localDocument.getElementsByTagName("pushbanner");
      paramString = "";
      i = 0;
      if (i < localNodeList.getLength())
      {
        l1 = Long.parseLong(localDocument.getElementsByTagName("channel").item(i).getFirstChild().getNodeValue());
        localObject1 = localDocument.getElementsByTagName("img").item(i).getFirstChild().getNodeValue();
        localObject2 = localDocument.getElementsByTagName("digest").item(i).getFirstChild().getNodeValue();
        k = Integer.parseInt(localDocument.getElementsByTagName("weight").item(i).getFirstChild().getNodeValue());
        localObject3 = localDocument.getElementsByTagName("md5").item(i).getFirstChild();
        if (localObject3 != null) {
          paramString = ((Node)localObject3).getNodeValue();
        }
        localObject3 = localDocument.getElementsByTagName("end").item(i).getFirstChild().getNodeValue();
        localObject4 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        l2 = ((SimpleDateFormat)localObject4).parse((String)localObject3).getTime();
        l3 = ((SimpleDateFormat)localObject4).parse(localDocument.getElementsByTagName("begin").item(i).getFirstChild().getNodeValue()).getTime();
        if (System.currentTimeMillis() > l2)
        {
          if (QLog.isColorLevel()) {
            QLog.i("SPLASH_ConfigServlet", 2, "this pushbanner is outdate , throw it");
          }
        }
        else
        {
          localObject3 = new StringBuffer();
          paramInt = 0;
          while (paramInt < localDocument.getElementsByTagName("url").item(i).getChildNodes().getLength())
          {
            ((StringBuffer)localObject3).append(localDocument.getElementsByTagName("url").item(i).getChildNodes().item(paramInt).getNodeValue());
            paramInt += 1;
          }
          localObject4 = ((StringBuffer)localObject3).toString();
          localObject3 = ((QQAppInterface)getAppRuntime()).getEntityManagerFactory().createEntityManager();
          localObject5 = ((EntityManager)localObject3).a(ExpiredPushBanner.class);
          j = 0;
          paramInt = 0;
          if (localObject5 != null)
          {
            localObject5 = ((List)localObject5).iterator();
            label459:
            j = paramInt;
            if (((Iterator)localObject5).hasNext())
            {
              if (((ExpiredPushBanner)((Iterator)localObject5).next()).cid != l1) {
                break label1051;
              }
              paramInt = 1;
              break label1061;
            }
          }
          if (j != 0)
          {
            if (!QLog.isColorLevel()) {
              break label1054;
            }
            QLog.i("SPLASH_ConfigServlet", 2, "this pushbanner had been close or click , throw it");
          }
        }
      }
    }
    catch (Exception paramString)
    {
      paramString.printStackTrace();
      if (QLog.isColorLevel()) {
        QLog.i("SPLASH_ConfigServlet", 2, "push exception : " + paramString.getMessage());
      }
    }
    return;
    if (paramString.length() < 15)
    {
      if (QLog.isColorLevel()) {
        QLog.i("SPLASH_ConfigServlet", 2, "this pushbanner md5 length < 15 .throw");
      }
    }
    else
    {
      localObject5 = BaseApplication.getContext().getFilesDir().getAbsolutePath() + "/ADPic/" + paramString;
      if (!ConfigParser.a(paramString)) {
        ThreadManager.executeOnNetWorkThread(new ablz(this, (String)localObject1));
      }
      com.tencent.mobileqq.config.Config.a.a(com.tencent.mobileqq.config.Config.a.a(l1, (String)localObject2, (byte)3, (String)localObject1, (String)localObject4, (String)localObject5, l3 + "|" + l2, (short)k, paramString));
      paramInt = 1;
      k = 1;
    }
    for (;;)
    {
      try
      {
        localObject1 = ((EntityManager)localObject3).a(ReportedBanner.class, false, null, null, null, null, "endtime DESC", null);
        j = paramInt;
        if (localObject1 != null)
        {
          j = paramInt;
          if (((List)localObject1).size() > 0)
          {
            localObject2 = ((List)localObject1).iterator();
            paramInt = k;
            if (((Iterator)localObject2).hasNext())
            {
              localObject4 = (ReportedBanner)((Iterator)localObject2).next();
              if ((localObject4 == null) || (((ReportedBanner)localObject4).cid != l1)) {
                continue;
              }
              paramInt = 0;
            }
            j = paramInt;
            if (((List)localObject1).size() > 18)
            {
              k = ((List)localObject1).size() - 1;
              j = paramInt;
              if (k >= 9)
              {
                localObject2 = (ReportedBanner)((List)localObject1).get(k);
                if ((localObject2 == null) || (((ReportedBanner)localObject2).cid == l1)) {
                  break label1064;
                }
                ((EntityManager)localObject3).b((Entity)localObject2);
                break label1064;
              }
            }
          }
        }
        if (j == 0) {
          break label1015;
        }
        ReportController.b((QQAppInterface)getAppRuntime(), "dc00898", "", "", "0X80087C0", "0X80087C0", (int)l1, 0, "", "", "", "");
        localObject1 = new ReportedBanner();
        ((ReportedBanner)localObject1).cid = l1;
        ((ReportedBanner)localObject1).md5 = paramString;
        ((ReportedBanner)localObject1).endtime = l2;
        ((EntityManager)localObject3).a((Entity)localObject1);
        if (!QLog.isColorLevel()) {
          break label1054;
        }
        QLog.i("SPLASH_ConfigServlet", 2, String.format(Locale.getDefault(), "push banner report cid: %d", new Object[] { Long.valueOf(l1) }));
      }
      catch (Throwable localThrowable)
      {
        if (!QLog.isColorLevel()) {
          break label1054;
        }
      }
      QLog.i("SPLASH_ConfigServlet", 2, String.format(Locale.getDefault(), "push banner report exception t: %s", new Object[] { localThrowable }));
      break label1054;
      label1015:
      if (QLog.isColorLevel())
      {
        QLog.i("SPLASH_ConfigServlet", 2, String.format(Locale.getDefault(), "push banner report repeat cid: %d", new Object[] { Long.valueOf(l1) }));
        break label1054;
        break label1061;
      }
      label1051:
      label1054:
      i += 1;
      break;
      label1061:
      break label459;
      label1064:
      k -= 1;
    }
  }
  
  private void e(Intent paramIntent, ConfigurationService.Config paramConfig)
  {
    paramIntent = paramIntent.getStringExtra("key_uin");
    if (!TextUtils.isEmpty(paramIntent))
    {
      int i = paramConfig.version.get();
      int j = SharedPreUtils.x(((QQAppInterface)getAppRuntime()).getApp(), paramIntent);
      if (QLog.isColorLevel()) {
        QLog.d("nearby_flower_operation_gray_tips", 2, "serverVersion=" + i + "|localVersion=" + j);
      }
      if (i != j)
      {
        SharedPreUtils.c(((QQAppInterface)getAppRuntime()).getApp(), paramIntent, i);
        NearbyFlowerManager localNearbyFlowerManager = (NearbyFlowerManager)((QQAppInterface)getAppRuntime()).getManager(123);
        if ((!paramConfig.content_list.has()) || (paramConfig.content_list.get().size() <= 0)) {
          break label246;
        }
        localList = paramConfig.content_list.get();
        if ((localList != null) && (localList.size() > 0))
        {
          localNearbyFlowerManager.a(paramIntent, (String)localList.get(0));
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 53,content: " + (String)localList.get(0) + ",version: " + paramConfig.version.get());
          }
        }
      }
    }
    label246:
    while (!QLog.isColorLevel())
    {
      List localList;
      return;
    }
    QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 53,content_list is empty ,version: " + paramConfig.version.get());
  }
  
  public static void e(QQAppInterface paramQQAppInterface, String paramString)
  {
    long l = System.currentTimeMillis();
    if (QLog.isColorLevel()) {
      NearbyUtils.a("GENERAL_LBS_CONFIGS_CMD", new Object[] { "getGeneralLBSConfigs", paramString, Long.valueOf(l) });
    }
    paramString = new NewIntent(paramQQAppInterface.getApp(), ConfigServlet.class);
    paramString.putExtra("k_cmd_type", new int[] { 87, 12, 174, 189 });
    paramQQAppInterface.startServlet(paramString);
  }
  
  private void e(ConfigurationService.Config paramConfig)
  {
    int i = paramConfig.version.get();
    int j = SharedPreUtils.R(((QQAppInterface)getAppRuntime()).getApp(), jdField_a_of_type_JavaLangString);
    if (QLog.isColorLevel()) {
      QLog.i("SPLASH_ConfigServlet", 2, "pstn_switch_wording_config_version serverVersion=" + i + "|localVersion=" + j);
    }
    if (i != j)
    {
      SharedPreUtils.t(((QQAppInterface)getAppRuntime()).getApp(), jdField_a_of_type_JavaLangString, i);
      if ((paramConfig.content_list.get() == null) || (paramConfig.content_list.get().size() <= 0)) {
        break label236;
      }
      localStringBuilder = new StringBuilder(512);
      localStringBuilder.append("receiveAllConfigs|type: ").append(60);
      localIterator = paramConfig.content_list.get().iterator();
      while (localIterator.hasNext())
      {
        str = (String)localIterator.next();
        localStringBuilder.append(",content: ").append(str);
        a(str);
      }
      localStringBuilder.append(",version: ").append(paramConfig.version.get());
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, localStringBuilder.toString());
      }
    }
    label236:
    while (!QLog.isColorLevel())
    {
      StringBuilder localStringBuilder;
      Iterator localIterator;
      String str;
      return;
    }
    QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 60,content_list is empty ,version: " + paramConfig.version.get());
  }
  
  /* Error */
  private void e(String paramString, int paramInt)
  {
    // Byte code:
    //   0: invokestatic 425	javax/xml/parsers/DocumentBuilderFactory:newInstance	()Ljavax/xml/parsers/DocumentBuilderFactory;
    //   3: invokevirtual 429	javax/xml/parsers/DocumentBuilderFactory:newDocumentBuilder	()Ljavax/xml/parsers/DocumentBuilder;
    //   6: new 431	java/io/ByteArrayInputStream
    //   9: dup
    //   10: aload_1
    //   11: ldc_w 433
    //   14: invokevirtual 437	java/lang/String:getBytes	(Ljava/lang/String;)[B
    //   17: invokespecial 440	java/io/ByteArrayInputStream:<init>	([B)V
    //   20: invokevirtual 446	javax/xml/parsers/DocumentBuilder:parse	(Ljava/io/InputStream;)Lorg/w3c/dom/Document;
    //   23: astore 14
    //   25: aload 14
    //   27: ldc_w 4790
    //   30: invokeinterface 454 2 0
    //   35: astore 15
    //   37: ldc 13
    //   39: astore 12
    //   41: fconst_0
    //   42: fstore 4
    //   44: fconst_0
    //   45: fstore 5
    //   47: iconst_0
    //   48: istore 10
    //   50: ldc 13
    //   52: astore 11
    //   54: fconst_0
    //   55: fstore 6
    //   57: fconst_0
    //   58: fstore_3
    //   59: ldc_w 4792
    //   62: astore_1
    //   63: ldc 13
    //   65: astore 13
    //   67: iconst_0
    //   68: istore 9
    //   70: iload 9
    //   72: aload 15
    //   74: invokeinterface 484 1 0
    //   79: if_icmpge +480 -> 559
    //   82: aload 14
    //   84: ldc_w 3980
    //   87: invokeinterface 454 2 0
    //   92: iload 9
    //   94: invokeinterface 460 2 0
    //   99: invokeinterface 466 1 0
    //   104: invokeinterface 469 1 0
    //   109: astore 13
    //   111: aload 14
    //   113: ldc_w 3986
    //   116: invokeinterface 454 2 0
    //   121: iload 9
    //   123: invokeinterface 460 2 0
    //   128: invokeinterface 466 1 0
    //   133: invokeinterface 469 1 0
    //   138: astore 12
    //   140: aload 14
    //   142: ldc_w 4793
    //   145: invokeinterface 454 2 0
    //   150: iload 9
    //   152: invokeinterface 460 2 0
    //   157: invokeinterface 466 1 0
    //   162: invokeinterface 469 1 0
    //   167: invokestatic 4799	java/lang/Float:parseFloat	(Ljava/lang/String;)F
    //   170: fstore 4
    //   172: aload 14
    //   174: ldc_w 4801
    //   177: invokeinterface 454 2 0
    //   182: iload 9
    //   184: invokeinterface 460 2 0
    //   189: invokeinterface 466 1 0
    //   194: invokeinterface 469 1 0
    //   199: invokestatic 4799	java/lang/Float:parseFloat	(Ljava/lang/String;)F
    //   202: fstore_3
    //   203: iconst_1
    //   204: istore 10
    //   206: aload 14
    //   208: ldc_w 4802
    //   211: invokeinterface 454 2 0
    //   216: iload 9
    //   218: invokeinterface 460 2 0
    //   223: invokeinterface 466 1 0
    //   228: invokeinterface 469 1 0
    //   233: invokestatic 4799	java/lang/Float:parseFloat	(Ljava/lang/String;)F
    //   236: fstore 5
    //   238: aload 14
    //   240: ldc_w 4803
    //   243: invokeinterface 454 2 0
    //   248: iload 9
    //   250: invokeinterface 460 2 0
    //   255: invokeinterface 466 1 0
    //   260: invokeinterface 469 1 0
    //   265: invokestatic 4799	java/lang/Float:parseFloat	(Ljava/lang/String;)F
    //   268: fstore 8
    //   270: aload 14
    //   272: ldc_w 4805
    //   275: invokeinterface 454 2 0
    //   280: iload 9
    //   282: invokeinterface 460 2 0
    //   287: invokeinterface 466 1 0
    //   292: invokeinterface 469 1 0
    //   297: astore 11
    //   299: aload 14
    //   301: ldc_w 4806
    //   304: invokeinterface 454 2 0
    //   309: iload 9
    //   311: invokeinterface 460 2 0
    //   316: invokeinterface 466 1 0
    //   321: invokeinterface 469 1 0
    //   326: invokestatic 4799	java/lang/Float:parseFloat	(Ljava/lang/String;)F
    //   329: fstore 7
    //   331: aload 14
    //   333: ldc_w 4802
    //   336: invokeinterface 454 2 0
    //   341: iload 9
    //   343: invokeinterface 460 2 0
    //   348: invokeinterface 466 1 0
    //   353: invokeinterface 469 1 0
    //   358: invokestatic 4799	java/lang/Float:parseFloat	(Ljava/lang/String;)F
    //   361: fstore 6
    //   363: aload 14
    //   365: ldc_w 4808
    //   368: invokeinterface 454 2 0
    //   373: iload 9
    //   375: invokeinterface 460 2 0
    //   380: invokeinterface 466 1 0
    //   385: invokeinterface 469 1 0
    //   390: astore_1
    //   391: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   394: ifeq +296 -> 690
    //   397: ldc 63
    //   399: iconst_2
    //   400: new 122	java/lang/StringBuilder
    //   403: dup
    //   404: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   407: ldc_w 4810
    //   410: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   413: aload 13
    //   415: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   418: ldc_w 4812
    //   421: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   424: aload 12
    //   426: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   429: ldc_w 4814
    //   432: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   435: fload 4
    //   437: invokevirtual 4817	java/lang/StringBuilder:append	(F)Ljava/lang/StringBuilder;
    //   440: ldc_w 4819
    //   443: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   446: fload_3
    //   447: invokevirtual 4817	java/lang/StringBuilder:append	(F)Ljava/lang/StringBuilder;
    //   450: ldc_w 4821
    //   453: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   456: iload 10
    //   458: invokevirtual 834	java/lang/StringBuilder:append	(Z)Ljava/lang/StringBuilder;
    //   461: ldc_w 4823
    //   464: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   467: fload 5
    //   469: invokevirtual 4817	java/lang/StringBuilder:append	(F)Ljava/lang/StringBuilder;
    //   472: ldc_w 4825
    //   475: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   478: fload 8
    //   480: invokevirtual 4817	java/lang/StringBuilder:append	(F)Ljava/lang/StringBuilder;
    //   483: ldc_w 4827
    //   486: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   489: aload 11
    //   491: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   494: ldc_w 4829
    //   497: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   500: fload 7
    //   502: invokevirtual 4817	java/lang/StringBuilder:append	(F)Ljava/lang/StringBuilder;
    //   505: ldc_w 4831
    //   508: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   511: aload_1
    //   512: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   515: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   518: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   521: goto +169 -> 690
    //   524: astore_1
    //   525: aload 14
    //   527: ldc_w 4832
    //   530: invokeinterface 454 2 0
    //   535: iload 9
    //   537: invokeinterface 460 2 0
    //   542: invokeinterface 466 1 0
    //   547: invokeinterface 469 1 0
    //   552: invokestatic 4799	java/lang/Float:parseFloat	(Ljava/lang/String;)F
    //   555: fstore_3
    //   556: goto -350 -> 206
    //   559: aload 13
    //   561: ifnull +126 -> 687
    //   564: aload 13
    //   566: invokevirtual 601	java/lang/String:trim	()Ljava/lang/String;
    //   569: ldc 13
    //   571: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   574: ifne +113 -> 687
    //   577: new 122	java/lang/StringBuilder
    //   580: dup
    //   581: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   584: aload_0
    //   585: invokevirtual 109	com/tencent/mobileqq/config/splashlogo/ConfigServlet:getAppRuntime	()Lmqq/app/AppRuntime;
    //   588: invokevirtual 2622	mqq/app/AppRuntime:getApplication	()Lmqq/app/MobileQQ;
    //   591: invokevirtual 3053	mqq/app/MobileQQ:getFilesDir	()Ljava/io/File;
    //   594: invokevirtual 3056	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   597: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   600: ldc_w 3081
    //   603: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   606: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   609: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   612: ldc_w 3081
    //   615: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   618: ldc_w 3126
    //   621: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   624: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   627: astore 14
    //   629: ldc_w 4834
    //   632: aload 13
    //   634: invokestatic 4839	com/tencent/mobileqq/msf/sdk/MsfSdkUtils:insertMtype	(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
    //   637: astore 13
    //   639: fload_3
    //   640: fstore 7
    //   642: fload_3
    //   643: fconst_0
    //   644: fcmpg
    //   645: ifge +8 -> 653
    //   648: ldc_w 1115
    //   651: fstore 7
    //   653: new 4841	abma
    //   656: dup
    //   657: aload_0
    //   658: aload 14
    //   660: aload 13
    //   662: fload 4
    //   664: fload 5
    //   666: fload 7
    //   668: aload 11
    //   670: aload_1
    //   671: fload 6
    //   673: iload 10
    //   675: iload_2
    //   676: aload 12
    //   678: invokespecial 4844	abma:<init>	(Lcom/tencent/mobileqq/config/splashlogo/ConfigServlet;Ljava/lang/String;Ljava/lang/String;FFFLjava/lang/String;Ljava/lang/String;FZILjava/lang/String;)V
    //   681: iconst_2
    //   682: aconst_null
    //   683: iconst_0
    //   684: invokestatic 3722	com/tencent/mobileqq/app/ThreadManager:post	(Ljava/lang/Runnable;ILcom/tencent/mobileqq/app/ThreadExcutor$IThreadListener;Z)V
    //   687: return
    //   688: astore_1
    //   689: return
    //   690: iload 9
    //   692: iconst_1
    //   693: iadd
    //   694: istore 9
    //   696: fload_3
    //   697: fstore 5
    //   699: fload 6
    //   701: fstore_3
    //   702: fload 7
    //   704: fstore 6
    //   706: goto -636 -> 70
    //   709: astore_1
    //   710: ldc_w 4792
    //   713: astore_1
    //   714: goto -323 -> 391
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	717	0	this	ConfigServlet
    //   0	717	1	paramString	String
    //   0	717	2	paramInt	int
    //   58	644	3	f1	float
    //   42	621	4	f2	float
    //   45	653	5	f3	float
    //   55	650	6	f4	float
    //   329	374	7	f5	float
    //   268	211	8	f6	float
    //   68	627	9	i	int
    //   48	626	10	bool	boolean
    //   52	617	11	str1	String
    //   39	638	12	str2	String
    //   65	596	13	str3	String
    //   23	636	14	localObject	Object
    //   35	38	15	localNodeList	NodeList
    // Exception table:
    //   from	to	target	type
    //   172	203	524	java/lang/Exception
    //   0	37	688	java/lang/Exception
    //   70	172	688	java/lang/Exception
    //   206	363	688	java/lang/Exception
    //   391	521	688	java/lang/Exception
    //   525	556	688	java/lang/Exception
    //   564	639	688	java/lang/Exception
    //   653	687	688	java/lang/Exception
    //   363	391	709	java/lang/Exception
  }
  
  private void f(Intent paramIntent, ConfigurationService.Config paramConfig)
  {
    paramIntent = paramIntent.getStringExtra("key_uin");
    if (!TextUtils.isEmpty(paramIntent))
    {
      int i = paramConfig.version.get();
      int j = SharedPreUtils.y(((QQAppInterface)getAppRuntime()).getApp(), paramIntent);
      if (QLog.isColorLevel()) {
        QLog.d("HotChatManager", 2, "serverVersion=" + i + "|localVersion=" + j);
      }
      if (i != j)
      {
        SharedPreUtils.d(((QQAppInterface)getAppRuntime()).getApp(), paramIntent, i);
        HotChatManager localHotChatManager = (HotChatManager)((QQAppInterface)getAppRuntime()).getManager(59);
        if ((!paramConfig.content_list.has()) || (paramConfig.content_list.get().size() <= 0)) {
          break label246;
        }
        localList = paramConfig.content_list.get();
        if ((localList != null) && (localList.size() > 0))
        {
          localHotChatManager.a(paramIntent, (String)localList.get(0));
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 78,content: " + (String)localList.get(0) + ",version: " + paramConfig.version.get());
          }
        }
      }
    }
    label246:
    while (!QLog.isColorLevel())
    {
      List localList;
      return;
    }
    QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 78,content_list is empty ,version: " + paramConfig.version.get());
  }
  
  public static void f(QQAppInterface paramQQAppInterface, String paramString)
  {
    if (QLog.isColorLevel()) {
      QLog.d("SPLASH_ConfigServlet", 2, "getPrecoverConfig, PRECOVER_CONFIG_CMD, uin=" + paramString);
    }
    paramString = (PrecoverManager)paramQQAppInterface.getManager(178);
    if ((paramString != null) && (paramString.a() != null) && (paramString.a().d * 1000L <= 0L)) {}
    paramString = new NewIntent(paramQQAppInterface.getApp(), ConfigServlet.class);
    paramString.putExtra("k_cmd_type", new int[] { 113 });
    paramQQAppInterface.startServlet(paramString);
  }
  
  private void f(ConfigurationService.Config paramConfig)
  {
    int i = paramConfig.version.get();
    int j = SharedPreUtils.f(((QQAppInterface)getAppRuntime()).getApp());
    if (QLog.isColorLevel()) {
      QLog.d("TroopRankConfig", 2, "handleTroopRankConfigCmd, serverVersion=" + i + "|localVersion=" + j);
    }
    byte[] arrayOfByte;
    if ((i != j) && (paramConfig.msg_content_list != null) && (paramConfig.msg_content_list.size() > 0))
    {
      paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
      if (paramConfig != null)
      {
        if (paramConfig.compress.get() != 1) {
          break label297;
        }
        arrayOfByte = OlympicUtil.a(paramConfig.content.get().toByteArray());
        if (arrayOfByte == null) {
          break label292;
        }
      }
    }
    label292:
    label297:
    do
    {
      for (;;)
      {
        try
        {
          paramConfig = new String(arrayOfByte, "UTF-8");
          if (TextUtils.isEmpty(paramConfig)) {
            break;
          }
          boolean bool = TroopRankConfig.a(paramConfig);
          if (bool) {
            SharedPreUtils.e(((QQAppInterface)getAppRuntime()).getApp(), i);
          }
          if (QLog.isColorLevel()) {
            QLog.d("TroopRankConfig", 2, "refreshConfig ret=" + bool);
          }
          return;
        }
        catch (Exception paramConfig)
        {
          if (QLog.isColorLevel()) {
            QLog.w("TroopRankConfig", 2, "handleTroopRankConfigCmd", paramConfig);
          }
          paramConfig = null;
          continue;
        }
        catch (OutOfMemoryError paramConfig)
        {
          if (QLog.isColorLevel()) {
            QLog.w("TroopRankConfig", 2, "handleTroopRankConfigCmd", paramConfig);
          }
          System.gc();
          try
          {
            paramConfig = new String(arrayOfByte, "UTF-8");
          }
          catch (Throwable paramConfig)
          {
            if (QLog.isColorLevel()) {
              QLog.w("TroopRankConfig", 2, "handleTroopRankConfigCmd", paramConfig);
            }
          }
        }
        paramConfig = null;
        continue;
        paramConfig = paramConfig.content.get().toStringUtf8();
      }
    } while (!QLog.isColorLevel());
    QLog.d("TroopRankConfig", 2, "handleTroopRankConfigCmd, config_content is empty");
  }
  
  private void f(String paramString, int paramInt)
  {
    for (;;)
    {
      int i;
      try
      {
        String str4 = getAppRuntime().getApplication().getFilesDir().getAbsolutePath() + "/splashpic/";
        Object localObject2 = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(paramString.getBytes("utf-8")));
        NodeList localNodeList = ((Document)localObject2).getElementsByTagName("splash");
        String str3 = null;
        String str2 = null;
        Object localObject1 = null;
        paramString = "";
        String str1 = "";
        i = 0;
        if (i < localNodeList.getLength())
        {
          str3 = ((Document)localObject2).getElementsByTagName("img").item(i).getFirstChild().getNodeValue();
          str2 = ((Document)localObject2).getElementsByTagName("begin").item(i).getFirstChild().getNodeValue();
          localObject1 = ((Document)localObject2).getElementsByTagName("end").item(i).getFirstChild().getNodeValue();
          paramString = ((Document)localObject2).getElementsByTagName("md5").item(i).getFirstChild().getNodeValue();
          str1 = ((Document)localObject2).getElementsByTagName("channel").item(i).getFirstChild().getNodeValue();
          String str5 = ((Document)localObject2).getElementsByTagName("title").item(i).getFirstChild().getNodeValue();
          getAppRuntime().getApplication().getSharedPreferences("flash_car_game_config", 0).edit().putString("splash_title", str5).apply();
          if (QLog.isColorLevel()) {
            QLog.i("SPLASH_ConfigServlet", 2, "parse result,img == " + str3 + " ,begin = " + str2 + " ,end=" + (String)localObject1 + ",md5=" + paramString + " title = " + str5);
          }
        }
        else
        {
          if ((str3 == null) || (str3.trim().equals(""))) {
            break;
          }
          str3 = MsfSdkUtils.insertMtype("ConfigCheck", str3);
          localObject2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
          str2 = ((SimpleDateFormat)localObject2).parse(str2).getTime() + "|" + ((SimpleDateFormat)localObject2).parse((String)localObject1).getTime();
          SharedPreUtils.a(getAppRuntime().getApplication(), paramInt, str2, paramString);
          new File(getAppRuntime().getApplication().getFilesDir().getAbsolutePath() + "/splashpic");
          if (((SimpleDateFormat)localObject2).parse((String)localObject1).getTime() < System.currentTimeMillis())
          {
            paramString = new File(str4 + paramString);
            if (paramString.exists()) {
              paramString.delete();
            }
            if (!QLog.isColorLevel()) {
              break;
            }
            QLog.i("SPLASH_ConfigServlet", 2, "this splash is outdate, throw it");
            return;
          }
          localObject1 = new File(str4 + paramString);
          localObject2 = new File(str4 + str2 + "_" + paramString + "_" + str1);
          if (((File)localObject2).exists()) {
            break;
          }
          if (QLog.isColorLevel()) {
            QLog.i("SPLASH_ConfigServlet", 2, "begin a thread try to download");
          }
          ThreadManager.post(new abmb(this, (File)localObject1, str3, paramString, (File)localObject2, str4, str2, str1, str3), 5, null, true);
          return;
        }
      }
      catch (Exception paramString)
      {
        return;
      }
      i += 1;
    }
  }
  
  private void g(Intent paramIntent, ConfigurationService.Config paramConfig)
  {
    paramIntent = com.tencent.mobileqq.shortvideo.PtvTemplateManager.a((QQAppInterface)getAppRuntime());
    int j = paramConfig.version.get();
    int i = SharedPreUtils.h(((QQAppInterface)getAppRuntime()).getApp());
    if (!com.tencent.mobileqq.shortvideo.PtvTemplateManager.a()) {
      i = 0;
    }
    if (QLog.isColorLevel()) {
      QLog.d("PtvTemplateManager", 2, "serverVersion=" + j + "|localVersion=" + i);
    }
    if (j != i)
    {
      SharedPreUtils.f(((QQAppInterface)getAppRuntime()).getApp(), j);
      if ((!paramConfig.content_list.has()) || (paramConfig.content_list.get().size() <= 0)) {
        break label239;
      }
      localList = paramConfig.content_list.get();
      if ((localList != null) && (localList.size() > 0))
      {
        paramIntent.a((String)localList.get(0), (QQAppInterface)getAppRuntime(), 1);
        if (QLog.isColorLevel()) {
          QLog.d("PtvTemplateManager", 2, "receiveAllConfigs|type: 84,content: " + (String)localList.get(0) + ",version: " + paramConfig.version.get());
        }
      }
    }
    label239:
    while (!QLog.isColorLevel())
    {
      List localList;
      return;
    }
    QLog.d("PtvTemplateManager", 2, "receiveAllConfigs|type: 84,content_list is empty ,version: " + paramConfig.version.get());
  }
  
  public static void g(QQAppInterface paramQQAppInterface, String paramString)
  {
    jdField_a_of_type_JavaLangString = paramString;
    a(paramQQAppInterface, 185);
  }
  
  private void g(ConfigurationService.Config paramConfig)
  {
    int i;
    int j;
    String str;
    try
    {
      QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
      if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
      {
        i = paramConfig.version.get();
        j = PublicAccountConfigUtil.a(localQQAppInterface);
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 81, version:" + paramConfig.version.get());
        }
        if (i != j)
        {
          Iterator localIterator = paramConfig.content_list.get().iterator();
          while (localIterator.hasNext())
          {
            str = (String)localIterator.next();
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 81, version:" + paramConfig.version.get() + ", content:" + str);
            }
            if (!PublicAccountConfigUtil.c(localQQAppInterface, str)) {
              break label246;
            }
            PublicAccountConfigUtil.c(localQQAppInterface);
            PublicAccountConfigUtil.a(localQQAppInterface, i);
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet", 2, "received SERVICE_ACCOUNT_FOLDER_CONFIG_CMD save version: " + i);
            }
          }
          return;
        }
      }
    }
    catch (Exception paramConfig)
    {
      if (QLog.isColorLevel()) {
        QLog.e("SPLASH_ConfigServlet", 2, "received SERVICE_ACCOUNT_FOLDER_CONFIG_CMD error", paramConfig);
      }
      paramConfig.printStackTrace();
    }
    label246:
    do
    {
      do
      {
        if (!QLog.isColorLevel()) {
          break;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "received SERVICE_ACCOUNT_FOLDER_CONFIG_CMD content error:" + str);
        break;
      } while (!QLog.isColorLevel());
      QLog.d("SPLASH_ConfigServlet", 2, "received SERVICE_ACCOUNT_FOLDER_CONFIG_CMD remote version: " + i + " | localVersion: " + j);
      return;
    } while (!QLog.isColorLevel());
    QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 81, content_list is empty , version: " + paramConfig.version.get());
  }
  
  private void h(Intent paramIntent, ConfigurationService.Config paramConfig)
  {
    paramIntent = com.tencent.mobileqq.shortvideo.PtvTemplateManager.a((QQAppInterface)getAppRuntime());
    int j = paramConfig.version.get();
    int i = SharedPreUtils.j(((QQAppInterface)getAppRuntime()).getApp());
    if (!com.tencent.mobileqq.shortvideo.PtvTemplateManager.b()) {
      i = 0;
    }
    for (;;)
    {
      if (QLog.isColorLevel()) {
        QLog.d("PtvTemplateManager", 2, "serverVersion=" + j + "|localVersion=" + i);
      }
      if (j != i)
      {
        SharedPreUtils.h(((QQAppInterface)getAppRuntime()).getApp(), j);
        String str = b(paramConfig, i, 167);
        if (str == null) {
          break label187;
        }
        paramIntent.a(str, (QQAppInterface)getAppRuntime(), 2);
        if (QLog.isColorLevel()) {
          QLog.d("PtvTemplateManager", 2, "receiveAllConfigs|type: 167,content: " + str + ",version: " + paramConfig.version.get());
        }
      }
      label187:
      while (!QLog.isColorLevel()) {
        return;
      }
      QLog.d("PtvTemplateManager", 2, "receiveAllConfigs|type: 167,content_list is empty ,version: " + paramConfig.version.get());
      return;
    }
  }
  
  public static void h(QQAppInterface paramQQAppInterface, String paramString) {}
  
  private void h(ConfigurationService.Config paramConfig)
  {
    QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
    int i = paramConfig.version.get();
    int j = SharedPreUtils.q(localQQAppInterface.getApp());
    if (QLog.isColorLevel()) {
      QLog.d("VideoDownCTWhiteList", 2, String.format("received VideoDownCTWhiteList remote version: %d, localVersion: %d, cmd: %d", new Object[] { Integer.valueOf(i), Integer.valueOf(j), Integer.valueOf(80) }));
    }
    if (i != j)
    {
      if ((paramConfig.content_list == null) || (paramConfig.content_list.size() <= 0)) {
        break label167;
      }
      str = (String)paramConfig.content_list.get(0);
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 80,content: " + str + ",version: " + paramConfig.version.get());
      }
      SharedPreUtils.s(localQQAppInterface.getApp(), i, str);
    }
    label167:
    while (!QLog.isColorLevel())
    {
      String str;
      return;
    }
    QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 80,content_list is empty ,version: " + paramConfig.version.get());
  }
  
  private void i(Intent paramIntent, ConfigurationService.Config paramConfig)
  {
    NearbyGrayTipsManager localNearbyGrayTipsManager;
    String str;
    if (!TextUtils.isEmpty(paramIntent.getStringExtra("key_uin")))
    {
      int i = paramConfig.version.get();
      int j = SharedPreUtils.e(((QQAppInterface)getAppRuntime()).getApp());
      if (QLog.isColorLevel()) {
        QLog.d("nearby_aio_operation_gray_tips", 2, "serverVersion=" + i + "|localVersion=" + j);
      }
      if (i != j)
      {
        SharedPreUtils.d(((QQAppInterface)getAppRuntime()).getApp(), i);
        localNearbyGrayTipsManager = (NearbyGrayTipsManager)((QQAppInterface)getAppRuntime()).getManager(92);
        if ((!paramConfig.content_list.has()) || (paramConfig.content_list.get().size() <= 0)) {
          break label617;
        }
        paramIntent = paramConfig.content_list.get();
        if (QLog.isColorLevel()) {
          QLog.d("nearby_aio_operation_gray_tips", 2, "config.content_list size=" + paramIntent.size());
        }
        if ((paramIntent != null) && (paramIntent.size() > 0))
        {
          localNearbyGrayTipsManager.b();
          Iterator localIterator = paramIntent.iterator();
          do
          {
            if (!localIterator.hasNext()) {
              break;
            }
            str = (String)localIterator.next();
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 23,content: " + str + ",version: " + paramConfig.version.get());
            }
          } while (StringUtil.a(str));
        }
      }
    }
    for (;;)
    {
      try
      {
        localObject1 = new JSONObject(str);
        if (((JSONObject)localObject1).isNull("MD5")) {
          break label670;
        }
        paramIntent = ((JSONObject)localObject1).getString("MD5");
        if (TextUtils.isEmpty(paramIntent)) {
          break label667;
        }
        paramIntent = paramIntent.toLowerCase();
        if (((JSONObject)localObject1).isNull("URL")) {
          break label661;
        }
        localObject1 = ((JSONObject)localObject1).getString("URL");
        if (StringUtil.a((String)localObject1)) {
          break;
        }
        Object localObject2 = NearbyGrayTipsManager.a();
        localObject2 = new File((String)localObject2 + "temp.txt");
        if (!HttpDownloadUtil.a((QQAppInterface)getAppRuntime(), (String)localObject1, (File)localObject2)) {
          break label568;
        }
        if (QLog.isColorLevel()) {
          QLog.d("nearby_aio_operation_gray_tips", 2, "file download succeed. url=" + (String)localObject1);
        }
        localObject1 = MD5.getFileMD5((File)localObject2);
        if ((!StringUtil.a(paramIntent)) && ((localObject1 == null) || (!paramIntent.equals(((String)localObject1).toLowerCase())))) {
          break;
        }
        paramIntent = NearbyGrayTipsManager.a((File)localObject2);
        if (paramIntent != null)
        {
          localNearbyGrayTipsManager.a(paramIntent);
          localNearbyGrayTipsManager.a(paramIntent, true);
          localNearbyGrayTipsManager.b(paramIntent, true);
          NearbyGrayTipsManager.a(paramIntent);
        }
        ((File)localObject2).delete();
      }
      catch (JSONException paramIntent)
      {
        if (QLog.isColorLevel()) {
          QLog.d("nearby_aio_operation_gray_tips", 2, "JSONException was thrown when parse json!!! string=" + str);
        }
        paramIntent.printStackTrace();
      }
      break;
      label568:
      if (!QLog.isColorLevel()) {
        break;
      }
      QLog.d("nearby_aio_operation_gray_tips", 2, "file download failed. url=" + (String)localObject1);
      break;
      localNearbyGrayTipsManager.a();
      localNearbyGrayTipsManager.a(true);
      return;
      label617:
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 23,content_list is empty ,version: " + paramConfig.version.get());
      }
      localNearbyGrayTipsManager.b();
      return;
      label661:
      Object localObject1 = null;
      continue;
      label667:
      continue;
      label670:
      paramIntent = null;
    }
  }
  
  private void i(ConfigurationService.Config paramConfig)
  {
    QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
    int i = paramConfig.version.get();
    int j = SharedPreUtils.r(localQQAppInterface.getApp());
    if (QLog.isColorLevel()) {
      QLog.d("MixMsgForwardConfig", 2, String.format("received MixMsgForwardConfig remote version: %d, localVersion: %d, cmd: %d", new Object[] { Integer.valueOf(i), Integer.valueOf(j), Integer.valueOf(111) }));
    }
    if (i != j)
    {
      if ((paramConfig.content_list == null) || (paramConfig.content_list.size() <= 0)) {
        break label167;
      }
      str = (String)paramConfig.content_list.get(0);
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 111,content: " + str + ",version: " + paramConfig.version.get());
      }
      SharedPreUtils.t(localQQAppInterface.getApp(), i, str);
    }
    label167:
    while (!QLog.isColorLevel())
    {
      String str;
      return;
    }
    QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 111,content_list is empty ,version:" + paramConfig.version.get());
  }
  
  private void j(Intent paramIntent, ConfigurationService.Config paramConfig)
  {
    int j = 0;
    paramIntent = (QQAppInterface)getAppRuntime();
    int i = paramConfig.version.get();
    if (i == SharedPreUtils.v(((QQAppInterface)getAppRuntime()).getApp(), jdField_a_of_type_JavaLangString)) {}
    for (;;)
    {
      return;
      SharedPreUtils.q(((QQAppInterface)getAppRuntime()).getApp(), i, jdField_a_of_type_JavaLangString);
      if ((paramConfig.content_list == null) || (paramConfig.content_list.size() <= 0)) {
        continue;
      }
      Object localObject1 = paramConfig.content_list.get();
      if ((localObject1 == null) || (((List)localObject1).size() <= 0)) {
        continue;
      }
      HashMap localHashMap = new HashMap();
      i = 0;
      if (i < ((List)localObject1).size())
      {
        Object localObject2 = (String)((List)localObject1).get(i);
        if (QLog.isColorLevel()) {
          QLog.d("Q.qqstory.fourTab", 2, "receiveAllConfigs|type: 115,content: " + (String)localObject2 + ",version: " + paramConfig.version.get());
        }
        if (TextUtils.isEmpty((CharSequence)localObject2)) {}
        for (;;)
        {
          i += 1;
          break;
          localObject2 = ((String)localObject2).split("=");
          if ((localObject2 != null) && (localObject2.length == 2))
          {
            localHashMap.put(localObject2[0], localObject2[1]);
            if (QLog.isColorLevel()) {
              QLog.i("Q.qqstory.fourTab", 2, "NowTabConfigCmd, name=" + localObject2[0] + ", val=" + localObject2[1]);
            }
          }
        }
      }
      paramConfig = (String)localHashMap.get("mqq_nowtab_plan");
      if (QLog.isColorLevel()) {
        QLog.i("nowtabPlan", 2, "nowtabPlan=" + paramConfig);
      }
      if (paramConfig != null) {}
      try
      {
        localObject1 = paramIntent.a().a();
        i = Integer.valueOf("" + ((String)localObject1).charAt(2)).intValue();
        k = Integer.valueOf(paramConfig).intValue();
        if (i != k)
        {
          localObject1 = new Integer[5];
          i = j;
        }
        switch (k)
        {
        case 0: 
          paramIntent.a().a = paramConfig.charAt(0);
          paramConfig = (String)localHashMap.get("mqq_nowtab_index");
          if (QLog.isColorLevel()) {
            QLog.i("Q.qqstory.fourTab:nowtabIndex", 2, "nowtabIndex=" + paramConfig);
          }
          if (paramConfig == null) {}
          break;
        }
      }
      catch (Exception paramConfig)
      {
        for (;;)
        {
          try
          {
            int k;
            for (;;)
            {
              paramIntent.getApp().getSharedPreferences("now_tab_sp", 0).edit().putInt("now_index_key", Integer.valueOf(paramConfig).intValue());
              paramIntent.a().jdField_b_of_type_Int = Integer.valueOf(paramConfig).intValue();
              paramConfig = (String)localHashMap.get("mqq_open_myvideo");
              if (QLog.isColorLevel()) {
                QLog.i("Q.qqstory:IsOpenMyVideo", 2, "IsOpenMyVideo=" + paramConfig);
              }
              try
              {
                if (TextUtils.isEmpty(paramConfig)) {
                  break;
                }
                ((QQStoryManager)paramIntent.getManager(180)).h(Boolean.parseBoolean(paramConfig));
                return;
              }
              catch (Exception paramIntent)
              {
                QLog.w("Q.qqstory:drawerMyVideoItem", 2, "drawerMyVideoItem is not value of Int!");
                return;
              }
            }
            if (i < localObject1.length)
            {
              localObject1[i] = Integer.valueOf(0);
              i += 1;
            }
            else
            {
              localObject1[2] = Integer.valueOf(k);
              if (QLog.isColorLevel()) {
                QLog.i("Q.qqstory.fourTab:nowtabPlan", 2, "case 0 1 nowtabPlan=" + paramConfig);
              }
              paramIntent.a().a((Integer[])localObject1);
              continue;
              paramConfig = paramConfig;
              QLog.w("Q.qqstory.fourTab:nowtabPlan", 2, "" + paramConfig.getMessage(), paramConfig);
              continue;
              localObject1[1] = Integer.valueOf(0);
              localObject1[2] = Integer.valueOf(k);
              paramIntent.a().a((Integer[])localObject1);
              if (QLog.isColorLevel())
              {
                QLog.i("Q.qqstory.fourTab:nowtabPlan", 2, "case 2 nowtabPlan=" + paramConfig);
                continue;
                localObject1[2] = Integer.valueOf(k);
                localObject1[1] = Integer.valueOf(1);
                paramIntent.a().a((Integer[])localObject1);
                if (QLog.isColorLevel()) {
                  QLog.i("Q.qqstory.fourTab:nowtabPlan", 2, "case 3 nowtabPlan=" + paramConfig);
                }
              }
            }
          }
          catch (Exception paramConfig)
          {
            QLog.w("Q.qqstory.fourTab:nowtabIndex", 2, "nowtabIndex is not value of Int!");
          }
        }
      }
    }
  }
  
  private void j(ConfigurationService.Config paramConfig)
  {
    com.tencent.mobileqq.shortvideo.PtvTemplateManager localPtvTemplateManager = com.tencent.mobileqq.shortvideo.PtvTemplateManager.a((QQAppInterface)getAppRuntime());
    int k = paramConfig.version.get();
    int i = SharedPreUtils.k(((QQAppInterface)getAppRuntime()).getApp());
    if (!com.tencent.mobileqq.shortvideo.PtvTemplateManager.c()) {
      i = 0;
    }
    int j;
    if (paramConfig.msg_content_list != null)
    {
      j = paramConfig.msg_content_list.size();
      if (QLog.isColorLevel()) {
        QLog.d("Doodle_Strokes_SPLASH_ConfigServlet", 2, String.format("个性笔触配置回包, serverVersion[%s], localVersion[%s], size[%s]", new Object[] { Integer.valueOf(k), Integer.valueOf(i), Integer.valueOf(j) }));
      }
      if (k != i) {
        break label115;
      }
    }
    label115:
    do
    {
      do
      {
        return;
        j = -1;
        break;
        if (j <= 0) {
          break label214;
        }
        paramConfig = b(paramConfig, i, 139);
        if (TextUtils.isEmpty(paramConfig)) {
          break label197;
        }
        localPtvTemplateManager.a(paramConfig, (QQAppInterface)getAppRuntime());
        SharedPreUtils.i(((QQAppInterface)getAppRuntime()).getApp(), k);
      } while (!QLog.isColorLevel());
      QLog.d("SPLASH_ConfigServletDoodle_Strokes_", 2, "GetDoodleTemplateConfig|type: 个性笔触配置回包内容, content: \n" + paramConfig);
      return;
    } while (!QLog.isColorLevel());
    label197:
    QLog.d("Doodle_Strokes_SPLASH_ConfigServlet", 2, "GetDoodleTemplateConfig|type: 个性笔触配置回包内容为空");
    return;
    label214:
    if (QLog.isColorLevel()) {
      QLog.d("Doodle_Strokes_SPLASH_ConfigServlet", 2, "GetDoodleTemplateConfig|type: 个性笔触配置回包为空");
    }
    localPtvTemplateManager.c();
  }
  
  private void k(Intent paramIntent, ConfigurationService.Config paramConfig)
  {
    paramIntent = (QQAppInterface)getAppRuntime();
    int i = paramConfig.version.get();
    int j = SharedPreUtils.w(((QQAppInterface)getAppRuntime()).getApp(), jdField_a_of_type_JavaLangString);
    if (i == j) {}
    label179:
    label195:
    do
    {
      do
      {
        return;
        SharedPreUtils.r(((QQAppInterface)getAppRuntime()).getApp(), i, jdField_a_of_type_JavaLangString);
        for (;;)
        {
          try
          {
            if (paramConfig.msg_content_list != null)
            {
              i = paramConfig.msg_content_list.size();
              paramIntent = (NowDownloadEngineManager)paramIntent.getManager(266);
              if (i <= 0) {
                break label195;
              }
              paramConfig = b(paramConfig, j, 286);
              paramIntent.a(paramConfig);
              if (TextUtils.isEmpty(paramConfig)) {
                break label179;
              }
              if (!QLog.isColorLevel()) {
                break;
              }
              QLog.d("SPLASH_ConfigServlet", 2, "GetDoodleTemplateConfig|type: handleNowDownloadEngineConfigCmd, content: \n" + paramConfig);
              return;
            }
          }
          catch (Exception paramIntent)
          {
            QLog.e("SPLASH_ConfigServlet", 2, "Exception e = " + paramIntent.toString());
            return;
          }
          i = -1;
        }
      } while (!QLog.isColorLevel());
      QLog.d("SPLASH_ConfigServlet", 2, "GetDoodleTemplateConfig|type: handleNowDownloadEngineConfigCmd null");
      return;
      paramIntent.a("");
    } while (!QLog.isColorLevel());
    QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 286,content_list is empty ,version: " + paramConfig.version.get());
  }
  
  private void k(ConfigurationService.Config paramConfig)
  {
    dov.com.tencent.mobileqq.shortvideo.PtvTemplateManager localPtvTemplateManager = dov.com.tencent.mobileqq.shortvideo.PtvTemplateManager.a((QQAppInterface)getAppRuntime());
    int k = paramConfig.version.get();
    int i = SharedPreUtils.l(((QQAppInterface)getAppRuntime()).getApp());
    if (!dov.com.tencent.mobileqq.shortvideo.PtvTemplateManager.a()) {
      i = 0;
    }
    int j;
    if (paramConfig.msg_content_list != null)
    {
      j = paramConfig.msg_content_list.size();
      if (QLog.isColorLevel()) {
        QLog.d("DOV_Doodle_Strokes_SPLASH_ConfigServlet", 2, String.format("个性笔触配置回包, serverVersion[%s], localVersion[%s], size[%s]", new Object[] { Integer.valueOf(k), Integer.valueOf(i), Integer.valueOf(j) }));
      }
      if (k != i) {
        break label115;
      }
    }
    label115:
    do
    {
      do
      {
        return;
        j = -1;
        break;
        if (j <= 0) {
          break label214;
        }
        paramConfig = b(paramConfig, i, 310);
        if (TextUtils.isEmpty(paramConfig)) {
          break label197;
        }
        localPtvTemplateManager.a(paramConfig, (QQAppInterface)getAppRuntime());
        SharedPreUtils.j(((QQAppInterface)getAppRuntime()).getApp(), k);
      } while (!QLog.isColorLevel());
      QLog.d("SPLASH_ConfigServletDOV_Doodle_Strokes_", 2, "GetDoodleTemplateConfig|type: 个性笔触配置回包内容, content: \n" + paramConfig);
      return;
    } while (!QLog.isColorLevel());
    label197:
    QLog.d("DOV_Doodle_Strokes_SPLASH_ConfigServlet", 2, "GetDoodleTemplateConfig|type: 个性笔触配置回包内容为空");
    return;
    label214:
    if (QLog.isColorLevel()) {
      QLog.d("DOV_Doodle_Strokes_SPLASH_ConfigServlet", 2, "GetDoodleTemplateConfig|type: 个性笔触配置回包为空");
    }
    localPtvTemplateManager.a();
  }
  
  private void l(Intent paramIntent, ConfigurationService.Config paramConfig)
  {
    QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
    if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0)) {}
    for (Object localObject1 = paramConfig.content_list.get();; localObject1 = null)
    {
      if ((localObject1 != null) && (((List)localObject1).size() > 0))
      {
        localHashMap = new HashMap();
        i = 0;
        if (i < ((List)localObject1).size())
        {
          localObject2 = (String)((List)localObject1).get(i);
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 101,content: " + (String)localObject2 + ",version: " + paramConfig.version.get());
          }
          if (TextUtils.isEmpty((CharSequence)localObject2)) {}
          for (;;)
          {
            i += 1;
            break;
            localObject2 = ((String)localObject2).split("=");
            if ((localObject2 != null) && (localObject2.length == 2))
            {
              localHashMap.put(localObject2[0], localObject2[1]);
              if (QLog.isColorLevel()) {
                QLog.i("SPLASH_ConfigServlet", 2, "GENERAL_CONFIGS_CMD, name=" + localObject2[0] + ", val=" + localObject2[1]);
              }
            }
          }
        }
        localObject1 = (String)localHashMap.get("mask_lightalk");
        localObject2 = (LightalkSwitchManager)localQQAppInterface.getManager(85);
        if (!"1".equals(localObject1))
        {
          bool = true;
          ((LightalkSwitchManager)localObject2).a(bool);
          localObject2 = (String)localHashMap.get("ptlogin_flag");
          localObject1 = BaseApplication.getContext().getSharedPreferences("mobileQQ", 4);
          ((SharedPreferences)localObject1).edit().putBoolean("ptlogin_flag" + getAppRuntime().getAccount(), "1".equalsIgnoreCase((String)localObject2)).commit();
          localObject2 = (String)localHashMap.get("msgrevoke_flag");
          if (QLog.isColorLevel()) {
            QLog.i("msgrevoke", 2, "GENERAL_CONFIGS_CMD, msgRevokeFlag=" + (String)localObject2);
          }
          if (localObject2 != null) {
            BaseApplication.getContext().getSharedPreferences("mobileQQ", 0).edit().putBoolean("msgrevoke_flag" + getAppRuntime().getAccount(), "1".equalsIgnoreCase((String)localObject2)).commit();
          }
          localObject2 = (String)localHashMap.get("lmr_block");
          if (QLog.isColorLevel()) {
            QLog.i("new_regprxy_switch", 2, "GENERAL_CONFIGS_CMD, new_regprxy_switch=" + (String)localObject2);
          }
          if (localObject2 != null) {
            BaseApplication.getContext().getSharedPreferences("mobileQQ", 0).edit().putBoolean("new_regprxy_switch", "1".equalsIgnoreCase((String)localObject2)).commit();
          }
          localObject2 = (String)localHashMap.get("qfind_report_gps_bt_stat");
          str = (String)localHashMap.get("qfind_searching");
          localObject3 = ((SharedPreferences)localObject1).edit();
          ((SharedPreferences.Editor)localObject3).putBoolean("qfind_searching" + getAppRuntime().getAccount(), "1".equals(str));
          ((SharedPreferences.Editor)localObject3).putBoolean("qfind_report_gps_bt_stat" + getAppRuntime().getAccount(), "1".equals(localObject2));
          ((SharedPreferences.Editor)localObject3).commit();
          if (QLog.isColorLevel()) {
            QLog.w("QFind", 2, "qfind flags qfindStatFlag=" + (String)localObject2 + ", qfind_searching=" + str);
          }
          localObject2 = (String)localHashMap.get("enable_public_device");
          if (localObject2 != null) {
            BaseApplication.getContext().getSharedPreferences("smartdevice_entry", 4).edit().putBoolean("enable_public_device" + "_" + getAppRuntime().getAccount(), "1".equalsIgnoreCase((String)localObject2)).commit();
          }
          localObject2 = (String)localHashMap.get("search_device_enable_https");
          if (localObject2 != null)
          {
            BaseApplication.getContext().getSharedPreferences("smartdevice_entry", 4).edit().putBoolean("search_device_enable_https" + "_" + getAppRuntime().getAccount(), "1".equalsIgnoreCase((String)localObject2)).commit();
            if (QLog.isColorLevel()) {
              QLog.w("smartdevice", 2, "search_device_enable_https=" + (String)localObject2);
            }
          }
          localObject2 = (String)localHashMap.get("mqq_calltab");
          str = (String)localHashMap.get("mqq_calltab_setting");
          if ((localObject2 != null) || (str != null))
          {
            localObject3 = new Integer[7];
            if (localObject2 != null)
            {
              if (((String)localObject2).indexOf('|') <= 0) {
                break label2231;
              }
              if (!localObject2.split("|")[0].equals("1")) {
                break label2226;
              }
              i = 1;
              localObject3[1] = Integer.valueOf(i);
            }
            if (str != null)
            {
              if (!str.equals("1")) {
                break label2260;
              }
              i = 1;
              localObject3[5] = Integer.valueOf(i);
            }
            localQQAppInterface.a((Integer[])localObject3);
          }
          localObject3 = (String)localHashMap.get("subscribe_discovery");
          if (!TextUtils.isEmpty((CharSequence)localObject3))
          {
            SubscriptRecommendController.d(localQQAppInterface, "1".equals(localObject3));
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet", 2, "subscribe discovery btn config : " + (String)localObject3);
            }
          }
          if ((localObject2 == null) || (str == null))
          {
            localObject3 = new Integer[7];
            if (localObject2 == null)
            {
              localObject3[1] = Integer.valueOf("0111100".charAt(1) - '0');
              localObject3[2] = Integer.valueOf("0111100".charAt(2) - '0');
            }
            if (str == null)
            {
              localObject3[5] = Integer.valueOf("0111100".charAt(5) - '0');
              localObject3[6] = Integer.valueOf("0111100".charAt(6) - '0');
            }
            localQQAppInterface.a((Integer[])localObject3);
          }
          localObject2 = (String)localHashMap.get("share_to_news");
          if (localObject2 != null) {
            ReadInJoyHelper.a((String)localObject2, localQQAppInterface);
          }
          localObject2 = (String)localHashMap.get("synchronize_to_qzone");
          if (localObject2 != null) {
            ReadInJoyHelper.b((String)localObject2, localQQAppInterface);
          }
          localObject2 = (String)localHashMap.get("merge_feeds");
          if (localObject2 != null) {
            ReadInJoyHelper.d((String)localObject2, localQQAppInterface);
          }
          localObject2 = (String)localHashMap.get("kandian_feeds");
          if (localObject2 != null) {
            ReadInJoyHelper.e((String)localObject2, localQQAppInterface);
          }
          i = paramConfig.version.get();
          SharedPreUtils.j(getAppRuntime().getApplication(), i, jdField_a_of_type_JavaLangString);
          if ((paramIntent != null) && (paramIntent.hasExtra("update101Version"))) {
            SettingCloneUtil.writeValueForInt(getAppRuntime().getApplication(), jdField_a_of_type_JavaLangString, null, "qqsetting_calltab_show_key_version", paramIntent.getIntExtra("update101Version", 0));
          }
          ArkAppCenter.b((String)localHashMap.get("arkapp_pa_nshow"));
          NearbySPUtil.a(localQQAppInterface.getAccount(), "supportHotChatDemo", Boolean.valueOf("1".equals(localHashMap.get("hotchat_demo"))));
          paramIntent = (PttConfigController)localQQAppInterface.getManager(88);
          paramIntent.a((String)localHashMap.get("ptt_stream_slice_cfg"));
          paramIntent.b((String)localHashMap.get("ptt_optimize_cfg_v2"));
          paramIntent.c((String)localHashMap.get("ptt_pre_download"));
          paramIntent = (String)localHashMap.get("splashpic_charm_requirement");
          if (paramIntent != null) {
            HotChatManager.a(localQQAppInterface, paramIntent);
          }
          paramIntent = (String)localHashMap.get("kFreezeTipsShow");
          paramConfig = localQQAppInterface.getApp();
          if (Build.VERSION.SDK_INT <= 10) {
            break label2265;
          }
          i = 4;
          paramConfig = paramConfig.getSharedPreferences("qwallet_multi", i);
          if (paramConfig != null)
          {
            paramConfig = paramConfig.edit();
            if ((!TextUtils.isEmpty(paramIntent)) && (!"1".equals(paramIntent))) {
              break label2270;
            }
            bool = true;
            paramConfig.putBoolean("is_tenpay_yellowtip_valid", bool);
            paramIntent = (String)localHashMap.get("publicWhiteList");
            QWalletHelper.updatePublicAccWhiteMap(paramIntent);
            paramConfig.putString("publicAcc_white_list", paramIntent);
            paramConfig.commit();
          }
          QWalletHelper.updateHongBaoSpeedWitch(localQQAppInterface, (String)localHashMap.get("hongbao_speed"));
          paramIntent = (String)localHashMap.get("shortvideo_predownload_strategy");
          if (paramIntent == null) {}
        }
      }
      label2226:
      label2231:
      label2260:
      label2265:
      label2270:
      while (!QLog.isColorLevel()) {
        try
        {
          String str;
          i = Integer.valueOf(paramIntent).intValue();
          localQQAppInterface.a().a.set(i);
          paramIntent = (String)localHashMap.get("camera_compatible_list");
          if (paramIntent == null) {}
        }
        catch (Exception paramIntent)
        {
          try
          {
            CameraCompatibleList.a(paramIntent, true);
            paramIntent = (String)localHashMap.get("qqwifi_provider_mask");
            if (paramIntent != null) {
              ((SharedPreferences)localObject1).edit().putString("qqwifi_provider_mask", paramIntent).commit();
            }
            paramIntent = (String)localHashMap.get("signalling_switch");
            if (QLog.isColorLevel()) {
              QLog.i("signalling_switch", 2, "GENERAL_CONFIGS_CMD, signalling_switch=" + paramIntent);
            }
            if (paramIntent != null)
            {
              paramConfig = localQQAppInterface.a();
              if ("1".equals(paramIntent))
              {
                i = 1;
                paramConfig.b(i);
              }
            }
            else
            {
              paramIntent = (String)localHashMap.get("public_offline_search_enable");
              if (QLog.isColorLevel()) {
                QLog.i("PAOfflineSearchManager", 2, "GENERAL_CONFIGS_CMD, public_offline_search_enable=" + paramIntent);
              }
              if (paramIntent != null)
              {
                paramConfig = PAOfflineSearchManager.a();
                if (!"1".equals(paramIntent)) {
                  break label2340;
                }
                bool = true;
                paramConfig.jdField_b_of_type_Boolean = bool;
              }
              paramIntent = (String)localHashMap.get("public_advance_search_freq");
              if (QLog.isColorLevel()) {
                QLog.i("searchutils", 2, "GENERAL_CONFIGS_CMD, netsearchlevel=" + paramIntent);
              }
              if (paramIntent == null) {}
            }
          }
          catch (Exception paramIntent)
          {
            try
            {
              for (;;)
              {
                HashMap localHashMap;
                Object localObject2;
                Object localObject3;
                com.tencent.mobileqq.search.util.SearchUtils.jdField_b_of_type_Int = Integer.valueOf(paramIntent).intValue();
                paramIntent = (String)localHashMap.get("activity_dau_percent_report");
                if (QLog.isColorLevel()) {
                  QLog.d("Q.activity_dau", 2, "dauSwitch:" + paramIntent);
                }
                DAUStatistic.a(localQQAppInterface.c(), paramIntent);
                ProgressiveUtils.a((String)localHashMap.get("shortvideo_progressive_enable"));
                paramIntent = (String)localHashMap.get("aio_autoinput_time");
                if (paramIntent != null) {
                  i = 900;
                }
                try
                {
                  int j = Integer.parseInt(paramIntent);
                  i = j;
                }
                catch (NumberFormatException paramConfig)
                {
                  for (;;)
                  {
                    QLog.i("inputx", 2, "GENERAL_CONFIGS_CMD, aio_autoinput_time not a int");
                  }
                }
                if (QLog.isColorLevel()) {
                  QLog.i("inputx", 2, "GENERAL_CONFIGS_CMD, aio_autoinput_time=" + paramIntent);
                }
                BaseApplication.getContext().getSharedPreferences("mobileQQ", 0).edit().putInt("aio_autoinput_time", i).commit();
                paramIntent = (String)localHashMap.get("pic_thumb_400");
                if (QLog.isColorLevel()) {
                  QLog.i("inputx", 2, "GENERAL_CONFIGS_CMD, pic_thumb_400=" + paramIntent);
                }
                GeneralConfigUtils.a("pic_thumb_400Enable", paramIntent);
                paramIntent = (String)localHashMap.get("Show_Business_Card");
                if (QLog.isColorLevel()) {
                  QLog.d("BusinessCara_Manager", 2, "Show_Business_Card= " + paramIntent);
                }
                paramConfig = (BusinessCardManager)localQQAppInterface.getManager(111);
                if (paramConfig != null) {
                  paramConfig.a(0, "1".equals(paramIntent));
                }
                return;
                bool = false;
                continue;
                int i = 0;
                continue;
                if (((String)localObject2).equals("1")) {}
                for (i = 1;; i = 0)
                {
                  localObject3[1] = Integer.valueOf(i);
                  break;
                }
                i = 0;
                continue;
                i = 0;
                continue;
                bool = false;
                continue;
                paramIntent = paramIntent;
                if (QLog.isColorLevel())
                {
                  QLog.i("SPLASH_ConfigServlet", 2, paramIntent.getMessage());
                  continue;
                  paramIntent = paramIntent;
                  if (QLog.isColorLevel())
                  {
                    QLog.i("SPLASH_ConfigServlet", 2, "camera_compatible_list ERROR = " + paramIntent.getMessage());
                    continue;
                    i = 0;
                  }
                }
              }
              boolean bool = false;
            }
            catch (Exception paramIntent)
            {
              for (;;)
              {
                paramIntent.printStackTrace();
              }
            }
          }
        }
      }
      label2340:
      QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 101,content_list is empty ,version: " + paramConfig.version.get());
      return;
    }
  }
  
  private void l(ConfigurationService.Config paramConfig)
  {
    int i = paramConfig.version.get();
    SharedPreUtils.k(getAppRuntime().getApplication(), i, jdField_a_of_type_JavaLangString);
    Object localObject2 = null;
    Object localObject1 = localObject2;
    if (paramConfig.content_list != null)
    {
      localObject1 = localObject2;
      if (paramConfig.content_list.size() > 0) {
        localObject1 = paramConfig.content_list.get();
      }
    }
    if ((localObject1 != null) && (((List)localObject1).size() > 0))
    {
      localObject1 = (String)((List)localObject1).get(0);
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 102,content: " + (String)localObject1 + ",version: " + paramConfig.version.get());
      }
      if (!TextUtils.isEmpty((CharSequence)localObject1)) {}
      try
      {
        paramConfig = Xml.newPullParser();
        paramConfig.setInput(new ByteArrayInputStream(((String)localObject1).getBytes()), "UTF-8");
        for (i = 0; i != 1; i = paramConfig.next()) {
          if ((i == 2) && (paramConfig.getName().equalsIgnoreCase("JA_Switch"))) {
            JumpActivity.a(paramConfig.nextText(), true);
          }
        }
        while (!QLog.isColorLevel()) {}
      }
      catch (Exception paramConfig)
      {
        paramConfig = paramConfig;
        paramConfig.printStackTrace();
        return;
      }
      finally {}
    }
    QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 102,content_list is empty ,version: " + paramConfig.version.get());
  }
  
  private void m(Intent paramIntent, ConfigurationService.Config paramConfig)
  {
    com.tencent.mobileqq.shortvideo.PtvTemplateManager localPtvTemplateManager = com.tencent.mobileqq.shortvideo.PtvTemplateManager.a((QQAppInterface)getAppRuntime());
    int j = paramConfig.version.get();
    int i = SharedPreUtils.m(((QQAppInterface)getAppRuntime()).getApp());
    if (!com.tencent.mobileqq.shortvideo.PtvTemplateManager.d()) {
      i = 0;
    }
    if (QLog.isColorLevel()) {
      QLog.d("PtvTemplateManager", 2, "GetBlessSpecialPendantConfig serverVersion=" + j + "|localVersion=" + i);
    }
    if (j != i)
    {
      SharedPreUtils.k(((QQAppInterface)getAppRuntime()).getApp(), j);
      if ((paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() <= 0)) {
        break label269;
      }
      paramIntent = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
      if (paramIntent != null)
      {
        if (paramIntent.compress.get() != 1) {
          break label255;
        }
        paramIntent = OlympicUtil.a(paramIntent.content.get().toByteArray());
        if (paramIntent == null) {
          break label250;
        }
      }
    }
    label250:
    label255:
    while (!QLog.isColorLevel()) {
      for (;;)
      {
        try
        {
          paramIntent = new String(paramIntent, "UTF-8");
          localPtvTemplateManager.a(paramIntent, (QQAppInterface)getAppRuntime());
          if (QLog.isColorLevel()) {
            QLog.d("PtvTemplateManager", 2, "receiveAllConfigs|type: 145,content: " + paramIntent + ",version: " + paramConfig.version.get());
          }
          return;
        }
        catch (Exception paramIntent)
        {
          paramIntent.printStackTrace();
        }
        paramIntent = null;
        continue;
        paramIntent = paramIntent.content.get().toStringUtf8();
      }
    }
    label269:
    QLog.d("PtvTemplateManager", 2, "receiveAllConfigs|type: 145,content_list is empty ,version: " + paramConfig.version.get());
  }
  
  private void m(ConfigurationService.Config paramConfig)
  {
    QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
    if (QLog.isColorLevel()) {
      QLog.d("MobileUnityManager", 2, "CMD_PHONE_UNITY_BANNER_CONFIG");
    }
    PhoneUnityManager localPhoneUnityManager = (PhoneUnityManager)localQQAppInterface.getManager(101);
    i = localPhoneUnityManager.a();
    int m = paramConfig.version.get();
    if (QLog.isColorLevel()) {
      QLog.d("SPLASH_ConfigServlet", 2, "newVersion " + m);
    }
    if (i == m) {
      return;
    }
    localObject1 = null;
    Object localObject2;
    Object localObject6;
    if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
    {
      localObject2 = paramConfig.content_list.get();
      localObject6 = localObject1;
      if (localObject2 != null)
      {
        localObject6 = localObject1;
        if (((List)localObject2).size() > 0)
        {
          localObject1 = (String)((List)localObject2).get(0);
          localObject6 = localObject1;
          if (QLog.isColorLevel())
          {
            QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 34,content: " + (String)localObject1 + ",version: " + paramConfig.version.get());
            localObject6 = localObject1;
          }
        }
      }
    }
    for (;;)
    {
      try
      {
        if (TextUtils.isEmpty(localObject6)) {
          continue;
        }
        localPhoneUnityBannerData2 = new PhoneUnityBannerData();
      }
      catch (Throwable localThrowable2)
      {
        PhoneUnityBannerData localPhoneUnityBannerData2;
        XmlPullParser localXmlPullParser;
        int k;
        Object localObject3;
        PhoneUnityBannerData localPhoneUnityBannerData1 = null;
        i = 0;
        paramConfig = null;
        localObject1 = null;
        continue;
        localPhoneUnityBannerData1 = null;
        int j = 0;
        Object localObject4 = null;
        Object localObject5 = null;
        continue;
      }
      try
      {
        localXmlPullParser = Xml.newPullParser();
        localXmlPullParser.setInput(new ByteArrayInputStream(localObject6.getBytes()), "UTF-8");
        i = 0;
        paramConfig = null;
        localObject1 = null;
        k = 0;
        localPhoneUnityBannerData1 = localPhoneUnityBannerData2;
        j = i;
        localObject2 = paramConfig;
        localObject5 = localObject1;
        if (k == 1) {
          continue;
        }
        if (k != 2) {
          continue;
        }
        try
        {
          localObject2 = localXmlPullParser.getName();
          if (!((String)localObject2).equalsIgnoreCase("banner")) {
            continue;
          }
          k = localXmlPullParser.getAttributeCount();
          j = 0;
          if (j >= k) {
            continue;
          }
          localObject2 = localXmlPullParser.getAttributeName(j);
          if ("text".equals(localObject2))
          {
            localPhoneUnityBannerData2.jdField_b_of_type_JavaLangString = localXmlPullParser.getAttributeValue(j);
            j += 1;
            continue;
            localObject6 = localObject1;
            if (!QLog.isColorLevel()) {
              continue;
            }
            QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 34,content_list is empty ,version: " + paramConfig.version.get());
            localObject6 = localObject1;
            continue;
          }
          if (!"url".equals(localObject2)) {
            continue;
          }
          localPhoneUnityBannerData2.jdField_a_of_type_JavaLangString = localXmlPullParser.getAttributeValue(j);
          continue;
          QLog.e("PhoneContact.Manager", 1, "", localThrowable1);
        }
        catch (Throwable localThrowable1)
        {
          localPhoneUnityBannerData1 = localPhoneUnityBannerData2;
        }
      }
      catch (Throwable localThrowable3)
      {
        i = 0;
        paramConfig = null;
        localObject1 = null;
        localPhoneUnityBannerData1 = localPhoneUnityBannerData2;
        continue;
        continue;
        continue;
      }
      localObject5 = localObject1;
      localObject3 = paramConfig;
      j = i;
      localPhoneUnityManager.a(m, localObject6, localPhoneUnityBannerData1);
      ((PhoneContactManagerImp)localQQAppInterface.getManager(10)).a(j, localObject5, (String)localObject3);
      return;
      if ("dayNum".equals(localObject3)) {
        localPhoneUnityBannerData2.jdField_a_of_type_Int = Integer.valueOf(localXmlPullParser.getAttributeValue(j)).intValue();
      } else if ("dayIntervalNum".equals(localObject3)) {
        localPhoneUnityBannerData2.jdField_b_of_type_Int = Integer.valueOf(localXmlPullParser.getAttributeValue(j)).intValue();
      } else if ("totalNum".equals(localObject3)) {
        localPhoneUnityBannerData2.c = Integer.valueOf(localXmlPullParser.getAttributeValue(j)).intValue();
      } else if ("loginNum".equals(localObject3)) {
        localPhoneUnityBannerData2.e = Integer.valueOf(localXmlPullParser.getAttributeValue(j)).intValue();
      } else if ("banner".equals(localObject3)) {
        localPhoneUnityBannerData2.jdField_a_of_type_Boolean = "1".equals(localXmlPullParser.getAttributeValue(j));
      } else if ("setEntry".equals(localObject3)) {
        localPhoneUnityBannerData2.jdField_b_of_type_Boolean = "1".equals(localXmlPullParser.getAttributeValue(j));
      }
    }
    for (;;)
    {
      try
      {
        k = localXmlPullParser.next();
      }
      catch (Throwable localThrowable4)
      {
        localPhoneUnityBannerData1 = localPhoneUnityBannerData2;
      }
      if (((String)localObject3).equalsIgnoreCase("bindGuideWording"))
      {
        localObject3 = localXmlPullParser.nextText();
        localObject1 = localObject3;
      }
      else if (((String)localObject3).equalsIgnoreCase("bindGuideStyle"))
      {
        j = Integer.valueOf(localXmlPullParser.nextText()).intValue();
        i = j;
      }
      else
      {
        if (!((String)localObject3).equalsIgnoreCase("guideWording")) {
          break label836;
        }
        localObject3 = localXmlPullParser.nextText();
        paramConfig = (ConfigurationService.Config)localObject3;
      }
    }
  }
  
  private void n(Intent paramIntent, ConfigurationService.Config paramConfig)
  {
    QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
    int j = paramConfig.version.get();
    if (j == SharedPreUtils.a(localQQAppInterface.getApp(), "tencent_docs_config_version", jdField_a_of_type_JavaLangString)) {
      return;
    }
    ArrayList localArrayList = new ArrayList();
    Object localObject;
    if (paramConfig.msg_content_list.size() > 0)
    {
      paramConfig = paramConfig.msg_content_list.get().iterator();
      paramIntent = null;
      if (!paramConfig.hasNext()) {
        break label370;
      }
      localObject = (ConfigurationService.Content)paramConfig.next();
      if (((ConfigurationService.Content)localObject).compress.get() == 1)
      {
        localObject = OlympicUtil.a(((ConfigurationService.Content)localObject).content.get().toByteArray());
        if (localObject == null)
        {
          if (!QLog.isColorLevel()) {
            break label666;
          }
          QLog.e("SPLASH_ConfigServlet", 2, "buffer is null");
        }
      }
    }
    label666:
    for (;;)
    {
      if (QLog.isColorLevel()) {
        QLog.i("SPLASH_ConfigServlet", 2, "xmlContent :" + paramIntent);
      }
      if (paramIntent != null) {
        localArrayList.add(paramIntent);
      }
      break;
      try
      {
        paramIntent = new String((byte[])localObject, "UTF-8");
      }
      catch (UnsupportedEncodingException paramIntent)
      {
        if (QLog.isColorLevel()) {
          QLog.e("SPLASH_ConfigServlet", 2, paramIntent, new Object[0]);
        }
        paramIntent = null;
      }
      continue;
      paramIntent = ((ConfigurationService.Content)localObject).content.get().toStringUtf8();
      continue;
      if (paramConfig.content_list.size() > 0)
      {
        if (QLog.isColorLevel()) {
          QLog.i("SPLASH_ConfigServlet", 2, "content_list_size " + paramConfig.content_list.size());
        }
        paramIntent = paramConfig.content_list.get().iterator();
        while (paramIntent.hasNext())
        {
          paramConfig = (String)paramIntent.next();
          if (QLog.isColorLevel()) {
            QLog.i("SPLASH_ConfigServlet", 2, "xmlContent :" + paramConfig);
          }
          if (paramConfig != null) {
            localArrayList.add(paramConfig);
          }
        }
      }
      label370:
      if ((localArrayList != null) && (localArrayList.size() > 0))
      {
        paramIntent = new HashMap();
        int i = 0;
        if (i < localArrayList.size())
        {
          paramConfig = (String)localArrayList.get(i);
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, "handleTencentDocsConfigCmd receiveAllConfigs |type: 294,content: " + paramConfig + ",version: " + j);
          }
          if (TextUtils.isEmpty(paramConfig)) {}
          for (;;)
          {
            i += 1;
            break;
            paramConfig = paramConfig.split("=");
            if ((paramConfig != null) && (paramConfig.length == 2))
            {
              if (!TextUtils.isEmpty(paramConfig[1])) {
                paramConfig[1] = paramConfig[1].trim();
              }
              paramIntent.put(paramConfig[0], paramConfig[1]);
              if (QLog.isColorLevel()) {
                QLog.i("SPLASH_ConfigServlet", 2, "handleTencentDocsConfigCmd, name=" + paramConfig[0] + ", val=" + paramConfig[1]);
              }
            }
          }
        }
        TeamWorkUtils.a(localQQAppInterface, "1".equals((String)paramIntent.get("enable_tencent_docs_assistant")));
        TeamWorkUtils.b(localQQAppInterface, "1".equals((String)paramIntent.get("preload_tool_process")));
      }
      for (;;)
      {
        SharedPreUtils.a(localQQAppInterface.getApp(), "tencent_docs_config_version", jdField_a_of_type_JavaLangString, j);
        return;
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "handleTencentDocsConfigCmd receiveAllConfigs|type: 294,content_list is empty ,version: " + j);
        }
      }
    }
  }
  
  private void n(ConfigurationService.Config paramConfig)
  {
    try
    {
      QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
      if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
      {
        String str = (String)paramConfig.content_list.get(0);
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 32,content: " + str + ",version: " + paramConfig.version.get());
        }
        int i = paramConfig.version.get();
        int j = SharedPreUtils.n(localQQAppInterface.getApp());
        if (i != j)
        {
          if (!PublicAccountConfigUtil.a((QQAppInterface)getAppRuntime(), getAppRuntime().getApplication(), str)) {
            return;
          }
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, "received PUBLIC_ACCOUNT_CONFIG_CMD save version: " + i);
          }
          SharedPreUtils.l(getAppRuntime().getApplication(), i);
          return;
        }
        if (!QLog.isColorLevel()) {
          return;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "received PUBLIC_ACCOUNT_CONFIG_CMD remote version: " + i + " | localVersion: " + j);
        return;
      }
    }
    catch (Exception paramConfig)
    {
      if (QLog.isColorLevel()) {
        QLog.e("SPLASH_ConfigServlet", 2, "received PUBLIC_ACCOUNT_CONFIG_CMD error", paramConfig);
      }
      paramConfig.printStackTrace();
      return;
    }
    if (QLog.isColorLevel()) {
      QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 32,content_list is empty ,version: " + paramConfig.version.get());
    }
  }
  
  private void o(Intent paramIntent, ConfigurationService.Config paramConfig)
  {
    paramIntent = (QIMPtvTemplateManager)QIMManager.a(3);
    int j = paramConfig.version.get();
    int i = SharedPreUtils.F(((QQAppInterface)getAppRuntime()).getApp());
    if (!QIMPtvTemplateManager.a()) {
      i = 0;
    }
    for (;;)
    {
      if (QLog.isColorLevel()) {
        QLog.d("QIMPtvTemplateManager", 2, "serverVersion=" + j + "|localVersion=" + i);
      }
      if (j != i)
      {
        SharedPreUtils.y(((QQAppInterface)getAppRuntime()).getApp(), j);
        String str = a(paramConfig, i, 307);
        if (str == null) {
          break label193;
        }
        ConfigSimplifier.a(str, QIMPtvTemplateManager.b.getAbsolutePath(), "temp_faceu_zip", new ablu(this, paramIntent));
        if (QLog.isColorLevel()) {
          QLog.d("QIMPtvTemplateManager", 2, "receiveAllConfigs|type: 307,content: " + str + ",version: " + paramConfig.version.get());
        }
      }
      label193:
      while (!QLog.isColorLevel()) {
        return;
      }
      QLog.d("QIMPtvTemplateManager", 2, "receiveAllConfigs|type: 307,content_list is empty ,version: " + paramConfig.version.get());
      return;
    }
  }
  
  private void o(ConfigurationService.Config paramConfig)
  {
    try
    {
      QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
      if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
      {
        String str = (String)paramConfig.content_list.get(0);
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 35,content: " + str + ",version: " + paramConfig.version.get());
        }
        int i = paramConfig.version.get();
        int j = SharedPreUtils.G(localQQAppInterface.getApp(), localQQAppInterface.getAccount());
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "received PA_SUBCRIBE_RED_DOT remote version: " + i + " | localVersion: " + j);
        }
        if (i != j)
        {
          if ((PublicAccountConfigUtil.b((QQAppInterface)getAppRuntime(), getAppRuntime().getApplication(), str)) && (QLog.isColorLevel())) {
            QLog.d("SPLASH_ConfigServlet", 2, "received PA_SUBCRIBE_RED_DOT save version: " + i);
          }
          SharedPreUtils.l(getAppRuntime().getApplication(), localQQAppInterface.getAccount(), i);
          return;
        }
        if (!QLog.isColorLevel()) {
          return;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "received PA_SUBCRIBE_RED_DOT IGNORE THIS ACTION  because of SAME VERSION");
        return;
      }
    }
    catch (Exception paramConfig)
    {
      if (QLog.isColorLevel()) {
        QLog.e("SPLASH_ConfigServlet", 2, "received PA_SUBCRIBE_RED_DOT error", paramConfig);
      }
      paramConfig.printStackTrace();
      return;
    }
    if (QLog.isColorLevel()) {
      QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 35,content_list is empty ,version: " + paramConfig.version.get());
    }
  }
  
  private void p(Intent paramIntent, ConfigurationService.Config paramConfig)
  {
    int j = paramConfig.version.get();
    int i = SharedPreUtils.E(((QQAppInterface)getAppRuntime()).getApp());
    if (!QIMPasterConfigManager.a()) {
      i = 0;
    }
    for (;;)
    {
      if (QLog.isColorLevel()) {
        QLog.d("QIMPasterConfigManager", 2, "serverVersion=" + j + "|localVersion=" + i);
      }
      if (j != i)
      {
        SharedPreUtils.x(((QQAppInterface)getAppRuntime()).getApp(), j);
        paramIntent = a(paramConfig, i, 304);
        if (paramIntent == null) {
          break label180;
        }
        ConfigSimplifier.a(paramIntent, QIMPasterConfigManager.a.getAbsolutePath(), "temp_sticker_zip", new ablv(this));
        if (QLog.isColorLevel()) {
          QLog.d("QIMPasterConfigManager", 2, "receiveAllConfigs|type: 304,content: " + paramIntent + ",version: " + paramConfig.version.get());
        }
      }
      label180:
      while (!QLog.isColorLevel()) {
        return;
      }
      QLog.d("QIMPasterConfigManager", 2, "receiveAllConfigs|type: 304,content_list is empty ,version: " + paramConfig.version.get());
      return;
    }
  }
  
  private void p(ConfigurationService.Config paramConfig)
  {
    for (;;)
    {
      int i;
      try
      {
        QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
        if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
        {
          i = 0;
          if (i < paramConfig.content_list.size())
          {
            String str = (String)paramConfig.content_list.get(i);
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 66,content: " + str + ",version: " + paramConfig.version.get());
            }
            int j = paramConfig.version.get();
            int k = SharedPreUtils.H(localQQAppInterface.getApp(), localQQAppInterface.getAccount());
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet", 2, "received SUBSCRIPT_RECOMMEND_CMD remote version: " + j + " | localVersion: " + k);
            }
            if ((j != k) || (paramConfig.content_list.size() > 0))
            {
              if ((PublicAccountConfigUtil.a((QQAppInterface)getAppRuntime(), str)) && (QLog.isColorLevel())) {
                QLog.d("SPLASH_ConfigServlet", 2, "received SUBSCRIPT_RECOMMEND_CMD save version: " + j);
              }
              SharedPreUtils.m(getAppRuntime().getApplication(), localQQAppInterface.getAccount(), j);
            }
            else if (QLog.isColorLevel())
            {
              QLog.d("SPLASH_ConfigServlet", 2, "received SUBSCRIPT_RECOMMEND_CMD IGNORE THIS ACTION  because of SAME VERSION");
            }
          }
        }
      }
      catch (Exception paramConfig)
      {
        if (QLog.isColorLevel()) {
          QLog.e("SPLASH_ConfigServlet", 2, "received subscript recommend config error,cmd : 66");
        }
      }
      while (!QLog.isColorLevel()) {
        return;
      }
      QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 66,content_list is empty ,version: " + paramConfig.version.get());
      return;
      i += 1;
    }
  }
  
  private void q(Intent paramIntent, ConfigurationService.Config paramConfig)
  {
    paramIntent = (QIMMusicConfigManager)QIMManager.a(2);
    int j = paramConfig.version.get();
    int i = SharedPreUtils.D(((QQAppInterface)getAppRuntime()).getApp());
    if (!QIMMusicConfigManager.a()) {
      i = 0;
    }
    for (;;)
    {
      if (QLog.isColorLevel()) {
        QLog.d("QIMMusicConfigManager", 2, "serverVersion=" + j + "|localVersion=" + i);
      }
      if (j != i)
      {
        SharedPreUtils.w(((QQAppInterface)getAppRuntime()).getApp(), j);
        String str = a(paramConfig, i, 305);
        if (str == null) {
          break label193;
        }
        ConfigSimplifier.a(str, QIMMusicConfigManager.a.getAbsolutePath(), "temp_music_zip", new ablw(this, paramIntent));
        if (QLog.isColorLevel()) {
          QLog.d("QIMMusicConfigManager", 2, "receiveAllConfigs|type: 305,content: " + str + ",version: " + paramConfig.version.get());
        }
      }
      label193:
      while (!QLog.isColorLevel()) {
        return;
      }
      QLog.d("QIMMusicConfigManager", 2, "receiveAllConfigs|type: 305,content_list is empty ,version: " + paramConfig.version.get());
      return;
    }
  }
  
  private void q(ConfigurationService.Config paramConfig)
  {
    QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
    if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
    {
      str = (String)paramConfig.content_list.get(0);
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 43,content: " + str + ",version: " + paramConfig.version.get());
      }
      i = paramConfig.version.get();
      j = SharedPreUtils.O(localQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "received READINJOY_LOCAL_CHANNEL_CONFIG_CMD remote version: " + i + " | localVersion: " + j);
      }
      if (i != j)
      {
        SharedPreUtils.q(localQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, i);
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "received READINJOY_LOCAL_CHANNEL_CONFIG_CMD save version: " + i);
        }
        a(i, "LocalChannelCity", str, localQQAppInterface);
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "received READINJOY_LOCAL_CHANNEL_CONFIG_CMD save to database");
        }
      }
    }
    while (!QLog.isColorLevel())
    {
      String str;
      int i;
      int j;
      return;
    }
    QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 43,content_list is empty ,version: " + paramConfig.version.get());
  }
  
  private void r(Intent paramIntent, ConfigurationService.Config paramConfig)
  {
    paramIntent = (DynamicTextConfigManager)QIMManager.a(7);
    int j = paramConfig.version.get();
    int i = SharedPreUtils.a(((QQAppInterface)getAppRuntime()).getApp());
    if (!DynamicTextConfigManager.b()) {
      i = 0;
    }
    for (;;)
    {
      if (QLog.isColorLevel()) {
        QLog.d("DText", 2, "serverVersion=" + j + "|localVersion=" + i);
      }
      if (j != i)
      {
        SharedPreUtils.a(((QQAppInterface)getAppRuntime()).getApp(), j);
        String str = a(paramConfig, i, 309);
        if (str == null) {
          break label177;
        }
        paramIntent.a(str);
        if (QLog.isColorLevel()) {
          QLog.d("DText", 2, "receiveAllConfigs|type: 309,content: " + str + ",version: " + paramConfig.version.get());
        }
      }
      label177:
      while (!QLog.isColorLevel()) {
        return;
      }
      QLog.d("DText", 2, "receiveAllConfigs|type: 309,content_list is empty ,version: " + paramConfig.version.get());
      return;
    }
  }
  
  private void r(ConfigurationService.Config paramConfig)
  {
    try
    {
      int i = SharedPreUtils.t(((QQAppInterface)getAppRuntime()).getApp());
      int j = paramConfig.version.get();
      if (i != j)
      {
        ThreadManager.post(new abmc(this, paramConfig), 8, null, false);
        return;
      }
      if (QLog.isColorLevel())
      {
        QLog.d("SPLASH_ConfigServlet", 2, "received HOTCHAT_SCENE_CONFIGS_CMD same version, " + j);
        return;
      }
    }
    catch (Exception paramConfig)
    {
      paramConfig.printStackTrace();
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "received HOTCHAT_SCENE_CONFIGS_CMD, EXCEPTION" + paramConfig.toString());
      }
    }
  }
  
  private void s(ConfigurationService.Config paramConfig)
  {
    QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
    for (;;)
    {
      try
      {
        int i = PatchSharedPreUtil.a(BaseApplicationImpl.sApplication);
        if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
        {
          int j = paramConfig.version.get();
          QLog.d("PatchLogTag", 1, "handlePatchConfigCmd server version: " + j + " | localVersion: " + i + ", content_list size: " + paramConfig.content_list.size());
          if (j != i)
          {
            i = 0;
            if (i < paramConfig.content_list.size())
            {
              String str = (String)paramConfig.content_list.get(i);
              QLog.d("PatchLogTag", 1, "handlePatchConfigCmd index=" + i + ", content=" + str);
              PatchConfigManager.a(BaseApplicationImpl.sApplication, str);
              i += 1;
              continue;
            }
            PatchSharedPreUtil.a(BaseApplicationImpl.sApplication, j);
            PatchReporter.a(BaseApplicationImpl.sApplication, localQQAppInterface.c(), "actPatchConfig", 100, "");
            PatchFileManager.a(localQQAppInterface);
            return;
          }
          QLog.d("PatchLogTag", 1, "handlePatchConfigCmd not update config as same version");
          continue;
        }
        QLog.d("PatchLogTag", 1, "handlePatchConfigCmd content_list is empty");
      }
      catch (Throwable paramConfig)
      {
        QLog.e("PatchLogTag", 1, "handlePatchConfigCmd throwable=" + paramConfig);
        PatchReporter.a(BaseApplicationImpl.sApplication, localQQAppInterface.c(), "actPatchConfig", 102, "");
        return;
      }
    }
  }
  
  private void t(ConfigurationService.Config paramConfig)
  {
    Object localObject = (QQAppInterface)getAppRuntime();
    int j = paramConfig.version.get();
    int k = SharedPreUtils.o(((QQAppInterface)localObject).getApp());
    int i;
    if (paramConfig.msg_content_list != null)
    {
      i = paramConfig.msg_content_list.size();
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 186, localVersion: " + k + ", serverVersion: " + j + ", size: " + i);
      }
      if (j != k) {
        break label107;
      }
    }
    label107:
    do
    {
      do
      {
        do
        {
          return;
          i = -1;
          break;
          if (i <= 0) {
            break label221;
          }
          paramConfig = b(paramConfig, k, 186);
          if (TextUtils.isEmpty(paramConfig)) {
            break label205;
          }
          SharedPreUtils.m(((QQAppInterface)localObject).getApp(), j);
          SharedPreUtils.k(((QQAppInterface)localObject).getApp(), paramConfig);
          localObject = ((ArkAppCenter)((QQAppInterface)localObject).getManager(120)).a();
          ((ArkAiAppCenter)localObject).c();
          ((ArkAiAppCenter)localObject).a(paramConfig);
        } while (!QLog.isColorLevel());
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 186, content=" + paramConfig);
        return;
      } while (!QLog.isColorLevel());
      QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 186, content is empty");
      return;
    } while (!QLog.isColorLevel());
    label205:
    label221:
    QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 186, config_list is empty");
  }
  
  private void u(ConfigurationService.Config paramConfig)
  {
    QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
    int j = paramConfig.version.get();
    int k = SharedPreUtils.p(localQQAppInterface.getApp());
    int i;
    if (paramConfig.msg_content_list != null)
    {
      i = paramConfig.msg_content_list.size();
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 250, localVersion: " + k + ", serverVersion: " + j + ", size: " + i);
      }
      if (j != k) {
        break label107;
      }
    }
    label107:
    do
    {
      do
      {
        do
        {
          return;
          i = -1;
          break;
          if (i <= 0) {
            break label195;
          }
          paramConfig = b(paramConfig, k, 250);
          if (TextUtils.isEmpty(paramConfig)) {
            break label179;
          }
          SharedPreUtils.n(localQQAppInterface.getApp(), j);
          SharedPreUtils.l(localQQAppInterface.getApp(), paramConfig);
        } while (!QLog.isColorLevel());
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 250, content=" + paramConfig);
        return;
      } while (!QLog.isColorLevel());
      QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 250, content is empty");
      return;
    } while (!QLog.isColorLevel());
    label179:
    label195:
    QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 250, config_list is empty");
  }
  
  private void v(ConfigurationService.Config paramConfig)
  {
    QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
    if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
    {
      str1 = (String)paramConfig.content_list.get(0);
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 50,content: " + str1 + ",version: " + paramConfig.version.get());
      }
      i = paramConfig.version.get();
      j = SharedPreUtils.D(localQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "received SEARCH_CONFIG_CMD remote version: " + i + " | localVersion: " + j);
      }
      if (i != j)
      {
        SharedPreUtils.i(localQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, i);
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "received SEARCH_CONFIG_CMD save version: " + i);
        }
        localIterator = paramConfig.content_list.get().iterator();
        while (localIterator.hasNext())
        {
          str2 = (String)localIterator.next();
          SearchConfigManager.a(localQQAppInterface, jdField_a_of_type_JavaLangString, str2);
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 50,config_content_item: " + str1 + ",version: " + paramConfig.version.get());
          }
        }
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "received SEARCH_CONFIG_CMD save to sps");
        }
      }
    }
    while (!QLog.isColorLevel())
    {
      String str1;
      int i;
      int j;
      Iterator localIterator;
      String str2;
      return;
    }
    QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 50,content_list is empty ,version: " + paramConfig.version.get());
  }
  
  private void w(ConfigurationService.Config paramConfig)
  {
    ThreadManager.getSubThreadHandler().post(new abmd(this, paramConfig));
  }
  
  private void x(ConfigurationService.Config paramConfig)
  {
    ThreadManager.post(new ablr(this, paramConfig), 5, null, false);
  }
  
  private void y(ConfigurationService.Config paramConfig)
  {
    QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
    if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
    {
      str = (String)paramConfig.content_list.get(0);
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 61,content: " + str + ",version: " + paramConfig.version.get());
      }
      i = paramConfig.version.get();
      j = SharedPreUtils.u(localQQAppInterface.getApp());
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "received CAMERA_COMPATIBLE_LIST_CONFIG remote version: " + i + " | localVersion: " + j);
      }
      if (i != j)
      {
        SharedPreUtils.p(localQQAppInterface.getApp(), i);
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "received CAMERA_COMPATIBLE_LIST_CONFIG save version: " + i);
        }
        CameraCompatibleList.a(str, true);
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "received CAMERA_COMPATIBLE_LIST_CONFIG save to sps");
        }
      }
    }
    while (!QLog.isColorLevel())
    {
      String str;
      int i;
      int j;
      return;
    }
    QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 61,content_list is empty ,version: " + paramConfig.version.get());
  }
  
  private void z(ConfigurationService.Config paramConfig)
  {
    QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
    if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
    {
      str = (String)paramConfig.content_list.get(0);
      i = paramConfig.version.get();
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 64,content: " + str + ",version: " + paramConfig.version.get());
      }
      if (i != SharedPreUtils.w(localQQAppInterface.getApp()))
      {
        SharedPreUtils.q(localQQAppInterface.getApp(), i);
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "received SHORTVIDEO_PROGRESSIVE_BLACKLIST_CONFIG save version: " + i);
        }
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "received SHORTVIDEO_PROGRESSIVE_BLACKLIST_CONFIG save to sps");
        }
      }
    }
    while (!QLog.isColorLevel())
    {
      String str;
      int i;
      return;
    }
    QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 64,content_list is empty ,version: " + paramConfig.version.get());
  }
  
  void A(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    ScribbleResMgr localScribbleResMgr = ScribbleResMgr.a(paramQQAppInterface);
    int k = paramConfig.version.get();
    int j = SharedPreUtils.B(((QQAppInterface)getAppRuntime()).getApp());
    if (paramConfig.msg_content_list != null) {}
    for (int i = paramConfig.msg_content_list.size();; i = -1)
    {
      if (QLog.isColorLevel()) {
        QLog.d("handleScribbleConfigSPLASH_ConfigServlet", 2, String.format("scribble回包, serverVersion[%s], localVersion[%s], size[%s]", new Object[] { Integer.valueOf(k), Integer.valueOf(j), Integer.valueOf(i) }));
      }
      if (k != j) {
        break;
      }
      return;
    }
    if (i > 0)
    {
      boolean bool1 = false;
      boolean bool2 = false;
      j = 0;
      if (j < i)
      {
        Object localObject1 = (ConfigurationService.Content)paramConfig.msg_content_list.get(j);
        int m;
        byte[] arrayOfByte;
        label198:
        boolean bool3;
        if (localObject1 != null)
        {
          m = ((ConfigurationService.Content)localObject1).task_id.get();
          if (((ConfigurationService.Content)localObject1).compress.get() == 1)
          {
            arrayOfByte = OlympicUtil.a(((ConfigurationService.Content)localObject1).content.get().toByteArray());
            if (arrayOfByte == null)
            {
              QLog.d("handleScribbleConfigSPLASH_ConfigServlet", 2, "解压错误");
              localObject1 = null;
              if (TextUtils.isEmpty((CharSequence)localObject1)) {
                break label422;
              }
              if ((m != 2599) && (m != 3802)) {
                break label357;
              }
              bool3 = localScribbleResMgr.a((String)localObject1, paramQQAppInterface, 2599);
              bool2 = bool1;
              bool1 = bool3;
            }
          }
        }
        label422:
        for (;;)
        {
          for (;;)
          {
            j += 1;
            bool3 = bool2;
            bool2 = bool1;
            bool1 = bool3;
            break;
            try
            {
              localObject1 = new String(arrayOfByte, "UTF-8");
            }
            catch (UnsupportedEncodingException localUnsupportedEncodingException)
            {
              if (QLog.isColorLevel()) {
                localUnsupportedEncodingException.printStackTrace();
              }
              Object localObject2 = null;
            }
            catch (OutOfMemoryError localOutOfMemoryError)
            {
              for (;;)
              {
                if (QLog.isColorLevel()) {
                  localOutOfMemoryError.printStackTrace();
                }
                System.gc();
                try
                {
                  String str1 = new String(arrayOfByte, "UTF-8");
                }
                catch (Throwable localThrowable)
                {
                  str2 = null;
                }
              }
            }
          }
          break label198;
          String str2 = str2.content.get().toStringUtf8();
          break label198;
          label357:
          if ((m == 2598) || (m == 3768))
          {
            bool3 = localScribbleResMgr.a(str2, paramQQAppInterface, 2598);
            bool1 = bool2;
            bool2 = bool3;
          }
          else
          {
            if ((m == 2957) || (m == 3876)) {
              localScribbleResMgr.a(str2, paramQQAppInterface);
            }
            bool3 = bool1;
            bool1 = bool2;
            bool2 = bool3;
          }
        }
      }
      if ((bool2) && (bool1)) {
        SharedPreUtils.u(paramQQAppInterface.getApp().getBaseContext(), k);
      }
    }
    for (;;)
    {
      localScribbleResMgr.a();
      return;
      if (QLog.isColorLevel()) {
        QLog.d("handleScribbleConfigSPLASH_ConfigServlet", 2, "回包为空");
      }
    }
  }
  
  void B(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    Object localObject2 = null;
    Object localObject1 = null;
    int i = SharedPreUtils.aD(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
    int j = paramConfig.version.get();
    if (i != j) {
      if ((paramConfig.msg_content_list != null) && (paramConfig.msg_content_list.size() > 0))
      {
        paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
        if ((paramConfig != null) && (paramConfig.content.has())) {
          if (paramConfig.compress.get() == 1)
          {
            paramConfig = OlympicUtil.a(paramConfig.content.get().toByteArray());
            if (paramConfig == null) {
              break label339;
            }
          }
        }
      }
    }
    for (;;)
    {
      try
      {
        paramConfig = new String(paramConfig, "UTF-8");
        SharedPreUtils.S(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, j);
        ((CUOpenCardGuideMng)paramQQAppInterface.getManager(220)).a(paramConfig);
        if (QLog.isColorLevel()) {
          QLog.i("CU_OPEN_CARD_GUIDE", 2, String.format(Locale.getDefault(), "handleCUOpenCardGuideConfig reqVer: %d rspVer: %d config: %s", new Object[] { Integer.valueOf(i), Integer.valueOf(j), paramConfig }));
        }
        return;
      }
      catch (Exception paramConfig)
      {
        QLog.e("SPLASH_ConfigServlet", 1, "handleCUOpenCardGuideConfig|uncompress failed" + paramConfig);
        paramConfig = null;
        continue;
      }
      paramConfig = paramConfig.content.get().toStringUtf8();
      continue;
      paramConfig = localObject1;
      if (QLog.isColorLevel())
      {
        QLog.i("CU_OPEN_CARD_GUIDE", 2, String.format(Locale.getDefault(), "handleCUOpenCardGuideConfig empty content", new Object[0]));
        paramConfig = localObject1;
        continue;
        paramConfig = localObject1;
        if (QLog.isColorLevel())
        {
          QLog.i("CU_OPEN_CARD_GUIDE", 2, String.format(Locale.getDefault(), "handleCUOpenCardGuideConfig empty config", new Object[0]));
          paramConfig = localObject1;
          continue;
          paramConfig = localObject2;
          if (QLog.isColorLevel())
          {
            QLog.i("CU_OPEN_CARD_GUIDE", 2, String.format(Locale.getDefault(), "handleCUOpenCardGuideConfig same version, no need to update", new Object[0]));
            paramConfig = localObject2;
            continue;
            label339:
            paramConfig = null;
          }
        }
      }
    }
  }
  
  public void D(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    int i = paramConfig.version.get();
    boolean bool;
    if (i != paramQQAppInterface.getPreferences().getInt("tim_upgrade_hongdian_version", 0))
    {
      long l1 = System.currentTimeMillis();
      bool = PackageUtil.a(paramQQAppInterface.getApp(), "com.tencent.tim");
      long l2 = System.currentTimeMillis();
      if (QLog.isColorLevel()) {
        QLog.d("TimUpgradeHondianManager", 2, "is install TIM = " + bool + " time cost = " + (l2 - l1));
      }
      if (bool) {
        break label386;
      }
      paramConfig = a(paramConfig);
      if ((paramConfig == null) || (paramConfig.size() <= 0)) {}
    }
    try
    {
      Object localObject = new JSONObject((String)paramConfig.get(0));
      if (((JSONObject)localObject).has("AboutTIMRedDot"))
      {
        paramConfig = paramQQAppInterface.getApp().getSharedPreferences("tim_upgrade_hongdian_pre_" + paramQQAppInterface.c(), 0).edit();
        localObject = ((JSONObject)localObject).getJSONObject("AboutTIMRedDot");
        if (((JSONObject)localObject).has("On")) {
          if (((JSONObject)localObject).getInt("On") != 1) {
            break label374;
          }
        }
      }
      label374:
      for (bool = true;; bool = false)
      {
        paramConfig.putBoolean("tim_upgrade_hongdian_switch", bool);
        if (((JSONObject)localObject).has("AboutTitle")) {
          paramConfig.putString("tim_upgrade_hongdian_title", ((JSONObject)localObject).getString("AboutTitle"));
        }
        if (((JSONObject)localObject).has("AboutSubtitle")) {
          paramConfig.putString("tim_upgrade_hongdian_sub_title", ((JSONObject)localObject).getString("AboutSubtitle"));
        }
        if (((JSONObject)localObject).has("AndroidAboutURL"))
        {
          localObject = ((JSONObject)localObject).getString("AndroidAboutURL");
          paramConfig.putString("tim_upgrade_hongdian_url", (String)localObject);
          ((UpgradeTIMManager)paramQQAppInterface.getManager(255)).a((String)localObject);
        }
        paramConfig.commit();
        paramQQAppInterface = paramQQAppInterface.getPreferences().edit();
        paramQQAppInterface.putInt("tim_upgrade_hongdian_version", i);
        paramQQAppInterface.apply();
        return;
      }
      ((TimUpgradeHongdianManager)paramQQAppInterface.getManager(243)).a();
    }
    catch (JSONException paramQQAppInterface)
    {
      paramQQAppInterface.printStackTrace();
      return;
    }
    label386:
  }
  
  public void E(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    int i = paramConfig.version.get();
    if (i != paramQQAppInterface.getPreferences().getInt("tim_login_jump", 0))
    {
      paramConfig = a(paramConfig);
      if ((paramConfig == null) || (paramConfig.size() <= 0)) {}
    }
    try
    {
      JSONObject localJSONObject = new JSONObject((String)paramConfig.get(0));
      if (localJSONObject.has("LoginedTipForTIM"))
      {
        paramConfig = paramQQAppInterface.getApp().getSharedPreferences("tim_login_shared_pre_" + paramQQAppInterface.c(), 0).edit();
        localJSONObject = localJSONObject.getJSONObject("LoginedTipForTIM");
        if (localJSONObject.has("On")) {
          if (localJSONObject.getInt("On") != 1) {
            break label463;
          }
        }
      }
      label463:
      for (boolean bool = true;; bool = false)
      {
        paramConfig.putBoolean("tim_login_s", bool);
        if (localJSONObject.has("ShowTipTimeIntervalAfterLogined")) {
          paramConfig.putInt("tim_login_tal", localJSONObject.getInt("ShowTipTimeIntervalAfterLogined"));
        }
        if (localJSONObject.has("ShowTipDay")) {
          paramConfig.putString("tim_login_sd", localJSONObject.getJSONArray("ShowTipDay").toString());
        }
        if (localJSONObject.has("ShowTipTime")) {
          paramConfig.putString("tim_login_st", localJSONObject.getJSONArray("ShowTipTime").toString());
        }
        if (localJSONObject.has("AndroidLimit")) {
          paramConfig.putInt("tim_login_l", localJSONObject.getInt("AndroidLimit"));
        }
        if (localJSONObject.has("ShowTipTotalCount")) {
          paramConfig.putInt("tim_login_tc", localJSONObject.getInt("ShowTipTotalCount"));
        }
        if (localJSONObject.has("ShowTipHourInterval")) {
          paramConfig.putInt("tim_login_sti", localJSONObject.getInt("ShowTipHourInterval"));
        }
        if (localJSONObject.has("Title")) {
          paramConfig.putString("tim_login_t", localJSONObject.getString("Title"));
        }
        if (localJSONObject.has("Message")) {
          paramConfig.putString("tim_login_c", localJSONObject.getString("Message"));
        }
        if (localJSONObject.has("Buttons")) {
          paramConfig.putString("tim_login_btns", localJSONObject.getJSONArray("Buttons").toString());
        }
        paramConfig.commit();
        paramQQAppInterface = paramQQAppInterface.getPreferences().edit();
        paramQQAppInterface.putInt("tim_login_jump", i);
        paramQQAppInterface.apply();
        return;
      }
      return;
    }
    catch (JSONException paramQQAppInterface)
    {
      paramQQAppInterface.printStackTrace();
    }
  }
  
  public void F(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    int i = paramConfig.version.get();
    if (i != paramQQAppInterface.getPreferences().getInt("tim_pc_banner", 0))
    {
      paramConfig = a(paramConfig);
      if ((paramConfig == null) || (paramConfig.size() <= 0)) {}
    }
    try
    {
      JSONObject localJSONObject = new JSONObject((String)paramConfig.get(0));
      if (localJSONObject.has("PCTIMLoginBanner"))
      {
        paramConfig = paramQQAppInterface.getApp().getSharedPreferences("tim_pc_banner_shared_pre_" + paramQQAppInterface.c(), 0).edit();
        localJSONObject = localJSONObject.getJSONObject("PCTIMLoginBanner");
        if (localJSONObject.has("On")) {
          if (localJSONObject.getInt("On") != 1) {
            break label338;
          }
        }
      }
      label338:
      for (boolean bool = true;; bool = false)
      {
        paramConfig.putBoolean("tim_pc_banner_switch", bool);
        if (localJSONObject.has("bannerURL")) {
          paramConfig.putString("tim_pc_banner_image_url", localJSONObject.getString("bannerURL"));
        }
        if (localJSONObject.has("bannerVersion")) {
          paramConfig.putInt("tim_pc_banner_image_ver", localJSONObject.getInt("bannerVersion"));
        }
        if (localJSONObject.has("androidURL")) {
          paramConfig.putString("tim_pc_banner_click_url", localJSONObject.getString("androidURL"));
        }
        if (localJSONObject.has("linkText")) {
          paramConfig.putString("tim_pc_banner_link_text", localJSONObject.getString("linkText"));
        }
        if (localJSONObject.has("androidLinkURL")) {
          paramConfig.putString("tim_pc_banner_link_url", localJSONObject.getString("androidLinkURL"));
        }
        paramConfig.commit();
        paramQQAppInterface = paramQQAppInterface.getPreferences().edit();
        paramQQAppInterface.putInt("tim_pc_banner", i);
        paramQQAppInterface.apply();
        return;
      }
      return;
    }
    catch (JSONException paramQQAppInterface)
    {
      paramQQAppInterface.printStackTrace();
    }
  }
  
  public void G(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if (QLog.isColorLevel()) {
      QLog.d("SPLASH_ConfigServlet", 2, "TIM_CONVERT_TEAMWORK_CONFIG handleTimConvertTeamWorkConfig");
    }
    int i = paramConfig.version.get();
    if (i != paramQQAppInterface.getPreferences().getInt("tim_convert_teamwork", 0))
    {
      paramConfig = a(paramConfig);
      if ((paramConfig == null) || (paramConfig.size() <= 0)) {}
    }
    try
    {
      JSONObject localJSONObject = new JSONObject((String)paramConfig.get(0));
      if (localJSONObject.has("TIMDocs"))
      {
        paramConfig = paramQQAppInterface.getApp().getSharedPreferences("tim_convert_teamwork_pre_" + paramQQAppInterface.c(), 4).edit();
        localJSONObject = localJSONObject.getJSONObject("TIMDocs");
        if (localJSONObject.has("autoImportToSharedDocSwitch"))
        {
          if (localJSONObject.getInt("autoImportToSharedDocSwitch") != 1) {
            break label889;
          }
          bool = true;
          paramConfig.putBoolean("tim_convert_teamwork_switch", bool);
        }
        if (localJSONObject.has("openWithSharedDocInTimSwitch"))
        {
          if (localJSONObject.getInt("openWithSharedDocInTimSwitch") != 1) {
            break label895;
          }
          bool = true;
          label199:
          paramConfig.putBoolean("tim_convert_teamwork_open_with_share_doc", bool);
        }
        if (localJSONObject.has("openFileInTimSwitch"))
        {
          if (localJSONObject.getInt("openFileInTimSwitch") != 1) {
            break label901;
          }
          bool = true;
          label237:
          paramConfig.putBoolean("tim_convert_teamwork_open_file_in_tim", bool);
        }
        if (localJSONObject.has("aioSwitch"))
        {
          if (localJSONObject.getInt("aioSwitch") != 1) {
            break label907;
          }
          bool = true;
          label275:
          paramConfig.putBoolean("tim_convert_teamwork_show_aio_menu", bool);
        }
        if (localJSONObject.has("fileViewerMenuSwitch"))
        {
          if (localJSONObject.getInt("fileViewerMenuSwitch") != 1) {
            break label913;
          }
          bool = true;
          label313:
          paramConfig.putBoolean("tim_convert_teamwork_show_file_viewer_menu", bool);
        }
        if (localJSONObject.has("openFileInTimEntry")) {
          paramConfig.putInt("tim_convert_teamwork_tim_open_file_entry", localJSONObject.getInt("openFileInTimEntry"));
        }
        if (localJSONObject.has("androidURL")) {
          paramConfig.putString("tim_convert_teamwork_download_url", localJSONObject.getString("androidURL"));
        }
        if (localJSONObject.has("maxFileSizeToImportSharedDoc")) {
          paramConfig.putInt("tim_convert_teamwork_file_size", localJSONObject.getInt("maxFileSizeToImportSharedDoc"));
        }
        if (localJSONObject.has("insertGrayTipAfterOpenWithSharedDocInTim"))
        {
          if (localJSONObject.getInt("insertGrayTipAfterOpenWithSharedDocInTim") != 1) {
            break label919;
          }
          bool = true;
          label438:
          paramConfig.putBoolean("tim_convert_teamwork_show_convert_tip", bool);
        }
        if (localJSONObject.has("timVersion")) {
          paramConfig.putInt("tim_convert_teamwork_tim_version", localJSONObject.getInt("timVersion"));
        }
        if (localJSONObject.has("saveTipLine0")) {
          paramConfig.putString("tim_convert_teamwork_save_tip_0", localJSONObject.getString("saveTipLine0"));
        }
        if (localJSONObject.has("saveTipLine1")) {
          paramConfig.putString("tim_convert_teamwork_save_tip_1", localJSONObject.getString("saveTipLine1"));
        }
        if (localJSONObject.has("saveAndCloseTipLine0")) {
          paramConfig.putString("tim_convert_teamwork_save_and_close_tip_0", localJSONObject.getString("saveAndCloseTipLine0"));
        }
        if (localJSONObject.has("saveAndCloseTipLine1")) {
          paramConfig.putString("tim_convert_teamwork_save_and_close_tip_1", localJSONObject.getString("saveAndCloseTipLine1"));
        }
        if (localJSONObject.has("saveTipCount")) {
          paramConfig.putInt("tim_convert_teamwork_save_tip_count", localJSONObject.getInt("saveTipCount"));
        }
        if (localJSONObject.has("contentEditedTipLine0")) {
          paramConfig.putString("tim_convert_teamwork_content_edit_tip_0", localJSONObject.getString("contentEditedTipLine0"));
        }
        if (localJSONObject.has("contentEditedTipLine1")) {
          paramConfig.putString("tim_convert_teamwork_content_edit_tip_1", localJSONObject.getString("contentEditedTipLine1"));
        }
        if (localJSONObject.has("contentEditedTipCount")) {
          paramConfig.putInt("tim_convert_teamwork_content_edit_tip_count", localJSONObject.getInt("contentEditedTipCount"));
        }
        if (localJSONObject.has("docListEntryInFileSwitch"))
        {
          if (localJSONObject.getInt("docListEntryInFileSwitch") != 1) {
            break label925;
          }
          bool = true;
          label737:
          paramConfig.putBoolean("tim_myfile_teamwork_entry_list", bool);
        }
        if (localJSONObject.has("hideDocAuthoritySettingEntry"))
        {
          if (localJSONObject.getInt("hideDocAuthoritySettingEntry") != 1) {
            break label931;
          }
          bool = true;
          label775:
          paramConfig.putBoolean("tim_teamwork_hide_authorize_setting", bool);
        }
        if (localJSONObject.has("docListUrl")) {
          paramConfig.putString("tim_myfile_teamwork_list_url", localJSONObject.getString("docListUrl"));
        }
        if (localJSONObject.has("docListEntryInFileSwitch")) {
          if (localJSONObject.getInt("docListEntryInFileSwitch") != 1) {
            break label937;
          }
        }
      }
      label901:
      label907:
      label913:
      label919:
      label925:
      label931:
      label937:
      for (boolean bool = true;; bool = false)
      {
        paramConfig.putBoolean("tim_myfile_teamwork_entry_list", bool);
        paramConfig.commit();
        paramQQAppInterface = paramQQAppInterface.getPreferences().edit();
        paramQQAppInterface.putInt("tim_convert_teamwork", i);
        paramQQAppInterface.apply();
        return;
        label889:
        bool = false;
        break;
        label895:
        bool = false;
        break label199;
        bool = false;
        break label237;
        bool = false;
        break label275;
        bool = false;
        break label313;
        bool = false;
        break label438;
        bool = false;
        break label737;
        bool = false;
        break label775;
      }
      return;
    }
    catch (JSONException paramQQAppInterface)
    {
      paramQQAppInterface.printStackTrace();
    }
  }
  
  public void H(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    int i = paramConfig.version.get();
    if (i != paramQQAppInterface.getPreferences().getInt("troop_link_config_version", 0))
    {
      paramConfig = a(paramConfig);
      if ((paramConfig != null) && (paramConfig.size() > 0))
      {
        paramConfig = (String)paramConfig.get(0);
        if (TroopLinkManager.a().a(paramConfig)) {
          paramQQAppInterface.getPreferences().edit().putInt("troop_link_config_version", i).commit();
        }
      }
    }
  }
  
  public void I(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    int i = paramConfig.version.get();
    paramQQAppInterface = paramQQAppInterface.getPreferences();
    if (paramQQAppInterface == null) {}
    label17:
    do
    {
      break label17;
      do
      {
        return;
      } while (paramQQAppInterface.getInt("key_game_troop_bind_config_version", 0) == i);
      paramConfig = a(paramConfig);
      if ((paramConfig == null) || (paramConfig.size() <= 0)) {
        break;
      }
      paramConfig = (String)paramConfig.get(0);
    } while (paramConfig == null);
    for (;;)
    {
      try
      {
        paramConfig = new JSONObject(paramConfig);
        if ((!paramConfig.has("showBindGameEntry")) || (paramConfig.getInt("showBindGameEntry") != 1)) {
          break label266;
        }
        bool = true;
        paramQQAppInterface.edit().putBoolean("key_game_troop_bind_config_switch", bool).apply();
        paramQQAppInterface.edit().putInt("key_game_troop_bind_config_version", i).apply();
        if (!QLog.isColorLevel()) {
          break label17;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "game troop config set:" + bool);
        return;
      }
      catch (Exception paramQQAppInterface) {}
      if (!QLog.isColorLevel()) {
        break;
      }
      QLog.e("SPLASH_ConfigServlet", 2, "game troop config parse error:" + paramQQAppInterface.toString());
      return;
      paramQQAppInterface.edit().putBoolean("key_game_troop_bind_config_switch", false).apply();
      paramQQAppInterface.edit().putInt("key_game_troop_bind_config_version", i).apply();
      if (!QLog.isColorLevel()) {
        break;
      }
      QLog.d("SPLASH_ConfigServlet", 2, "game troop config empty content get");
      return;
      label266:
      boolean bool = false;
    }
  }
  
  public void J(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    int i = paramConfig.version.get();
    int j = paramQQAppInterface.getPreferences().getInt("tim_aio_tips_bar_version", 0);
    if ((paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.isEmpty()))
    {
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, new Object[] { "handleTimAIOTipsBar| config empty, delete config, version=", Integer.valueOf(i) });
      }
      paramQQAppInterface.getPreferences().edit().remove("tim_aio_tips_bar_version").apply();
      ((AppGuideTipsManager)paramQQAppInterface.getManager(217)).d();
    }
    Object localObject;
    do
    {
      do
      {
        return;
      } while (i == j);
      paramQQAppInterface.getPreferences().edit().putInt("tim_aio_tips_bar_version", i).apply();
      localObject = a(paramConfig);
    } while ((localObject == null) || (((List)localObject).size() <= 0));
    paramConfig = new AppGuideTipsConfig();
    try
    {
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, new Object[] { "handleTimAIOTipsBar| Get Config ", Integer.valueOf(254), ": ", ((List)localObject).get(0) });
      }
      localObject = new JSONObject((String)((List)localObject).get(0));
      if (((JSONObject)localObject).has("SendMessageAIOTopTip"))
      {
        localObject = ((JSONObject)localObject).getJSONObject("SendMessageAIOTopTip");
        paramConfig.switchKey = ((JSONObject)localObject).getString("switch");
        paramConfig.maxCount = Integer.valueOf(((JSONObject)localObject).getString("total")).intValue();
        paramConfig.duration = Long.valueOf(((JSONObject)localObject).getString("duration")).longValue();
        paramConfig.tipsUrl = ((JSONObject)localObject).getString("androidURL");
        paramConfig.tipsMsg = ((JSONObject)localObject).getString("title");
        paramConfig.msgTypeStr = ((JSONObject)localObject).getString("androidtypes");
        paramConfig.aioTypeStr = ((JSONObject)localObject).getString("androidAIOTypes");
      }
    }
    catch (JSONException localJSONException)
    {
      for (;;)
      {
        localJSONException.printStackTrace();
      }
    }
    paramQQAppInterface = (AppGuideTipsManager)paramQQAppInterface.getManager(217);
    paramQQAppInterface.a(paramConfig);
    paramQQAppInterface.c();
  }
  
  public void K(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    int i = paramConfig.version.get();
    if (i != QmcfDevicesStrategy.a(paramQQAppInterface.getApp()))
    {
      paramConfig = a(paramConfig);
      if ((paramConfig != null) && (paramConfig.size() > 0)) {
        QmcfDevicesStrategy.a((String)paramConfig.get(0), i, paramQQAppInterface.getApp());
      }
    }
  }
  
  public void L(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    int i = paramConfig.version.get();
    LightReplyMenuManager localLightReplyMenuManager;
    if (i != paramQQAppInterface.getPreferences().getInt("pic_light_reply_version_new", 0))
    {
      paramConfig = a(paramConfig);
      localLightReplyMenuManager = LightReplyMenuManager.a();
      if ((paramConfig == null) || (paramConfig.size() <= 0)) {
        break label107;
      }
      if (localLightReplyMenuManager.a((String)paramConfig.get(0), true)) {
        paramQQAppInterface.getPreferences().edit().putInt("pic_light_reply_version_new", i).commit();
      }
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "config has value");
      }
    }
    label107:
    do
    {
      return;
      localLightReplyMenuManager.a("", true);
      paramQQAppInterface.getPreferences().edit().putInt("pic_light_reply_version_new", i).commit();
    } while (!QLog.isColorLevel());
    QLog.d("SPLASH_ConfigServlet", 2, "config has no value");
  }
  
  public void M(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    boolean bool4 = true;
    boolean bool5 = false;
    int i = paramConfig.version.get();
    Object localObject2;
    SharedPreferences.Editor localEditor;
    Object localObject1;
    boolean bool1;
    if (i != paramQQAppInterface.getPreferences().getInt("data_migration_tim_version", 0))
    {
      paramConfig = a(paramConfig);
      localObject2 = paramQQAppInterface.getApp().getSharedPreferences("data_migration_tim", 0);
      localEditor = ((SharedPreferences)localObject2).edit();
      if ((paramConfig == null) || (paramConfig.size() <= 0)) {}
    }
    else
    {
      try
      {
        paramConfig = new JSONObject((String)paramConfig.get(0));
        if (!paramConfig.has("DataMigration")) {
          break label334;
        }
        localObject1 = paramConfig.getJSONObject("DataMigration");
        paramConfig = "";
        str1 = "";
        if (!((JSONObject)localObject1).has("switch")) {
          break label567;
        }
        if (((JSONObject)localObject1).getInt("switch") != 1) {
          break label369;
        }
        bool1 = true;
      }
      catch (JSONException paramConfig)
      {
        for (;;)
        {
          String str1;
          label173:
          paramConfig.printStackTrace();
        }
      }
      if (!((JSONObject)localObject1).has("uninstall")) {
        break label561;
      }
      if (((JSONObject)localObject1).getInt("uninstall") == 1)
      {
        bool1 = true;
        break label580;
        if (((JSONObject)localObject1).has("title")) {
          paramConfig = ((JSONObject)localObject1).getString("title");
        }
        if (((JSONObject)localObject1).has("content")) {
          str1 = ((JSONObject)localObject1).getString("content");
        }
        bool1 = bool5;
        if (((JSONObject)localObject1).has("uninstallNotify"))
        {
          if (((JSONObject)localObject1).getInt("uninstallNotify") != 1) {
            break label381;
          }
          bool1 = bool4;
          break label587;
        }
      }
    }
    label561:
    label567:
    label580:
    label587:
    for (;;)
    {
      if (((JSONObject)localObject1).has("uninstallTitle")) {}
      for (String str2 = ((JSONObject)localObject1).getString("uninstallTitle");; str2 = "")
      {
        if (((JSONObject)localObject1).has("uninstallContent")) {}
        for (localObject1 = ((JSONObject)localObject1).getString("uninstallContent");; localObject1 = "")
        {
          localObject2 = a((SharedPreferences)localObject2, paramQQAppInterface.getCurrentAccountUin(), bool2);
          if (TextUtils.isEmpty((CharSequence)localObject2))
          {
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet", 2, "handleDataMigrationForTIM| remove all uins");
            }
            localEditor.clear();
          }
          for (;;)
          {
            label334:
            localEditor.apply();
            paramQQAppInterface = paramQQAppInterface.getPreferences().edit();
            paramQQAppInterface.putInt("data_migration_tim_version", i);
            paramQQAppInterface.apply();
            return;
            label369:
            bool1 = false;
            break;
            bool1 = false;
            break label580;
            label381:
            bool1 = false;
            break label587;
            localEditor.putString("data_migration_tim_uins", (String)localObject2);
            localEditor.putBoolean("data_migration_tim_uninstall_flag", bool3);
            localEditor.putString("data_migration_tim_title", paramConfig);
            localEditor.putString("data_migration_tim_content", str1);
            localEditor.putBoolean("data_migration_tim_uninstall_notify", bool1);
            localEditor.putString("data_migration_tim_uninstall_title", str2);
            localEditor.putString("data_migration_tim_uninstall_content", (String)localObject1);
            continue;
            paramConfig = a((SharedPreferences)localObject2, paramQQAppInterface.getCurrentAccountUin(), false);
            if (TextUtils.isEmpty(paramConfig))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "handleDataMigrationForTIM| remove all uins");
              }
              localEditor.clear();
            }
            else
            {
              localEditor.putString("data_migration_tim_uins", paramConfig);
            }
          }
        }
      }
      boolean bool3 = false;
      break label173;
      boolean bool2 = false;
      break;
      bool2 = bool1;
      break;
      bool3 = bool1;
      break label173;
    }
  }
  
  public void N(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    int i = paramConfig.version.get();
    Object localObject;
    if (i != paramQQAppInterface.getPreferences().getInt("call_tim_config_version", 0))
    {
      localObject = a(paramConfig);
      paramConfig = paramQQAppInterface.getApp().getSharedPreferences("call_tim_config_pre" + paramQQAppInterface.c(), 0).edit();
      if ((localObject == null) || (((List)localObject).size() <= 0)) {
        break label262;
      }
    }
    for (;;)
    {
      try
      {
        localObject = new JSONObject((String)((List)localObject).get(0));
        if (((JSONObject)localObject).has("TIMFreeCloud"))
        {
          localObject = ((JSONObject)localObject).getJSONObject("TIMFreeCloud");
          if (((JSONObject)localObject).has("On")) {
            paramConfig.putBoolean("call_tim_config_switch", "1".equals(((JSONObject)localObject).getString("On")));
          }
          if (((JSONObject)localObject).has("Title")) {
            paramConfig.putString("call_tim_config_title", ((JSONObject)localObject).getString("Title"));
          }
          if (((JSONObject)localObject).has("androidURL")) {
            paramConfig.putString("call_tim_config_url", ((JSONObject)localObject).getString("androidURL"));
          }
        }
      }
      catch (JSONException localJSONException)
      {
        localJSONException.printStackTrace();
        continue;
      }
      paramConfig.commit();
      paramQQAppInterface = paramQQAppInterface.getPreferences().edit();
      paramQQAppInterface.putInt("call_tim_config_version", i);
      paramQQAppInterface.apply();
      return;
      label262:
      paramConfig.putBoolean("call_tim_config_switch", false);
    }
  }
  
  public void O(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    int i = paramConfig.version.get();
    int j = paramQQAppInterface.getPreferences().getInt("homework_troop_config_version", 0);
    if (QLog.isColorLevel()) {
      QLog.i("SPLASH_ConfigServlet", 2, "handleHomeworkTroopConfig: ,version: " + paramConfig.version.get() + "| localVersion: " + j);
    }
    if (i != j)
    {
      paramConfig = a(paramConfig);
      localEditor = paramQQAppInterface.getApp().getSharedPreferences("homework_troop_config" + paramQQAppInterface.c(), 0).edit();
      if ((paramConfig != null) && (paramConfig.size() > 0))
      {
        str = (String)paramConfig.get(0);
        try
        {
          paramConfig = new JSONObject(str);
          if (paramConfig.has("HWTroopAIOTip"))
          {
            localObject = paramConfig.getJSONObject("HWTroopAIOTip");
            if (((JSONObject)localObject).has("show")) {
              localEditor.putInt("homework_troop_aio_tip_show", ((JSONObject)localObject).getInt("show"));
            }
          }
          if (paramConfig.has("keywordConfigs"))
          {
            localObject = paramConfig.getJSONArray("keywordConfigs").toString();
            localEditor.putString("troop_school_keyword_config", (String)localObject);
            ((SchoolTroopKeywordManager)paramQQAppInterface.getManager(261)).a((String)localObject);
          }
          ((TroopAppMgr)paramQQAppInterface.getManager(108)).a(paramConfig);
        }
        catch (JSONException paramConfig)
        {
          for (;;)
          {
            if (QLog.isColorLevel())
            {
              paramConfig = str;
              if (str == null) {
                paramConfig = "";
              }
              QLog.e("SPLASH_ConfigServlet", 2, new Object[] { "handleHomeworkTroopConfig json fail. content: ", paramConfig });
            }
            localEditor.clear();
          }
        }
        localEditor.commit();
        paramQQAppInterface.getPreferences().edit().putInt("homework_troop_config_version", i).commit();
      }
    }
    while (!QLog.isColorLevel()) {
      for (;;)
      {
        SharedPreferences.Editor localEditor;
        String str;
        Object localObject;
        return;
        localEditor.clear();
      }
    }
    QLog.i("SPLASH_ConfigServlet", 2, "handleHomeworkTroopConfig:localVersion == version = " + i);
  }
  
  void P(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if ((paramConfig.type.get() != 267) || (paramQQAppInterface == null)) {}
    int i;
    int j;
    do
    {
      return;
      i = SharedPreUtils.a(paramQQAppInterface.getApp(), "sport_config", jdField_a_of_type_JavaLangString);
      j = paramConfig.version.get();
    } while (i == j);
    ((SportManager)paramQQAppInterface.getManager(259)).a(paramConfig);
    SharedPreUtils.a(paramQQAppInterface.getApp(), "sport_config", jdField_a_of_type_JavaLangString, j);
  }
  
  public void Q(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if ((paramConfig.type.get() != 281) || (paramQQAppInterface == null)) {}
    do
    {
      String str;
      do
      {
        return;
        str = a(paramConfig, SharedPreUtils.a(paramQQAppInterface.getApp(), "troop_gift_anim_limit", "0"), 281);
      } while (TextUtils.isEmpty(str));
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "handleTroopGiftLimitConfig content: " + str);
      }
      int i = paramConfig.version.get();
      SharedPreUtils.a(paramQQAppInterface.getApp(), "troop_gift_anim_limit", "0", i);
      try
      {
        i = new JSONObject(str).getInt("limitGiftAnimCount");
        com.tencent.mobileqq.troop.utils.AIOAnimationControlManager.jdField_b_of_type_Int = i;
        paramQQAppInterface = PreferenceManager.getDefaultSharedPreferences(paramQQAppInterface.getApp()).edit();
        paramQQAppInterface.putInt("AIOAnimationControlManager_limit_gif_count_MAX", i);
        paramQQAppInterface.commit();
        return;
      }
      catch (JSONException paramQQAppInterface) {}
    } while (!QLog.isColorLevel());
    QLog.w("SPLASH_ConfigServlet", 2, "handleTroopGiftLimitConfig error" + paramQQAppInterface.getMessage());
  }
  
  public void R(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if ((paramConfig.type.get() != 284) || (paramQQAppInterface == null)) {}
    int i;
    int j;
    do
    {
      return;
      i = SharedPreUtils.a(paramQQAppInterface.getApp(), "task_entry_config_version", jdField_a_of_type_JavaLangString);
      j = paramConfig.version.get();
      if (QLog.isColorLevel()) {
        QLog.w("zivonchen", 2, "handleTaskEntryConfig reqVersion = " + i);
      }
    } while (i == j);
    SharedPreferences.Editor localEditor = paramQQAppInterface.getApp().getSharedPreferences("task_entry_config" + jdField_a_of_type_JavaLangString, 0).edit();
    paramConfig = a(paramConfig);
    String str1;
    if ((paramConfig != null) && (paramConfig.size() > 0))
    {
      str1 = (String)paramConfig.get(0);
      if (QLog.isColorLevel()) {
        QLog.w("zivonchen", 2, "handleTaskEntryConfig configJson = " + str1);
      }
    }
    for (;;)
    {
      try
      {
        Object localObject = new JSONObject(str1);
        paramConfig = ((JSONObject)localObject).optString("icon_url");
        String str2 = ((JSONObject)localObject).optString("night_icon_url");
        String str3 = ((JSONObject)localObject).optString("jump_url");
        localObject = ((JSONObject)localObject).optString("word");
        if ((!TextUtils.isEmpty(paramConfig)) && (!TextUtils.isEmpty(str3)))
        {
          localEditor.putBoolean("open", true);
          localEditor.putString("icon_url", paramConfig);
          localEditor.putString("night_icon_url", str2);
          localEditor.putString("jump_url", str3);
          localEditor.putString("word", (String)localObject);
          SharedPreUtils.a(paramQQAppInterface.getApp(), "task_entry_config_version", jdField_a_of_type_JavaLangString, j);
          localEditor.commit();
          return;
        }
        localEditor.putBoolean("open", false);
        localEditor.remove("icon_url");
        localEditor.remove("night_icon_url");
        localEditor.remove("jump_url");
        localEditor.remove("word");
        continue;
      }
      catch (JSONException paramConfig)
      {
        localEditor.clear();
        if (!QLog.isColorLevel()) {
          continue;
        }
        paramConfig = str1;
        if (str1 == null) {
          paramConfig = "";
        }
        QLog.e("zivonchen", 2, new Object[] { "handleTaskEntryConfig json fail. content: ", paramConfig });
        continue;
      }
      localEditor.clear();
    }
  }
  
  public void S(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    int i = paramConfig.version.get();
    if (i != SVParamManager.a().a(paramQQAppInterface.getApp()))
    {
      paramConfig = a(paramConfig);
      if ((paramConfig != null) && (paramConfig.size() > 0))
      {
        paramConfig = (String)paramConfig.get(0);
        SVParamManager.a().a(paramConfig, i, paramQQAppInterface.getApp());
      }
    }
  }
  
  public void T(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    int i = paramConfig.version.get();
    int j = SharedPreUtils.a(paramQQAppInterface.getApp(), "buluo_enter_config_version", jdField_a_of_type_JavaLangString);
    if (QLog.isColorLevel()) {
      QLog.i("SPLASH_ConfigServlet", 2, "handleBuluoEnterConfig: ,version: " + paramConfig.version.get() + "| localVersion: " + j);
    }
    if (i != j)
    {
      localObject1 = a(paramConfig);
      if ((localObject1 != null) && (((List)localObject1).size() > 0)) {
        localObject1 = (String)((List)localObject1).get(0);
      }
    }
    while (!QLog.isColorLevel())
    {
      do
      {
        try
        {
          paramConfig = new JSONObject((String)localObject1);
          if (paramConfig.has("jump_url"))
          {
            paramConfig = paramConfig.getJSONObject("jump_url");
            if (paramConfig.has("android"))
            {
              Object localObject2 = new JSONObject(paramConfig.getString("android"));
              if ((((JSONObject)localObject2).has("url")) && (((JSONObject)localObject2).has("scheme")))
              {
                paramConfig = ((JSONObject)localObject2).getString("scheme");
                localObject2 = ((JSONObject)localObject2).getString("url");
                paramConfig = paramConfig + Base64Util.encodeToString(((String)localObject2).getBytes(), 0);
                SharedPreUtils.c(paramQQAppInterface.getApp(), paramQQAppInterface.getCurrentAccountUin(), paramConfig);
                if (QLog.isColorLevel()) {
                  QLog.e("SPLASH_ConfigServlet", 2, new Object[] { "handleBuluoEnterConfig. buluoEntryUrl: ", paramConfig });
                }
              }
            }
          }
          SharedPreUtils.a(paramQQAppInterface.getApp(), "buluo_enter_config_version", jdField_a_of_type_JavaLangString, i);
          return;
        }
        catch (JSONException paramConfig)
        {
          for (;;)
          {
            Object localObject1;
            if (QLog.isColorLevel())
            {
              paramConfig = (ConfigurationService.Config)localObject1;
              if (localObject1 == null) {
                paramConfig = "";
              }
              QLog.e("SPLASH_ConfigServlet", 2, new Object[] { "handleBuluoEnterConfig json fail. content: ", paramConfig });
            }
          }
        }
      } while (!QLog.isColorLevel());
      QLog.d("SPLASH_ConfigServlet", 2, "handleBuluoEnterConfig json fail. configContent is empty ,version: " + paramConfig.version.get());
      return;
    }
    QLog.i("SPLASH_ConfigServlet", 2, "handleBuluoEnterConfig:localVersion == version = " + i);
  }
  
  AVRedPacketConfig a(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    Object localObject2 = null;
    Object localObject1 = null;
    int i = ((AVRedPacketConfigManager)paramQQAppInterface.getManager(253)).a();
    int j = paramConfig.version.get();
    QLog.d("SPLASH_ConfigServlet", 1, "handleAVRedPacketConfig, version:" + j + ",localVersion:" + i);
    paramQQAppInterface = localObject2;
    if (i != j)
    {
      if ((paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() <= 0)) {
        break label319;
      }
      paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
      paramQQAppInterface = localObject2;
      if (paramConfig != null)
      {
        if (paramConfig.compress.get() != 1) {
          break label305;
        }
        paramQQAppInterface = OlympicUtil.a(paramConfig.content.get().toByteArray());
        if (paramQQAppInterface == null) {
          break label285;
        }
      }
    }
    for (;;)
    {
      try
      {
        paramQQAppInterface = new String(paramQQAppInterface, "UTF-8");
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "handleAVRedPacketConfig,xmlContent:" + paramQQAppInterface);
        }
        paramConfig = localObject1;
        if (paramQQAppInterface != null) {
          paramConfig = AVRedPacketConfig.parse(paramQQAppInterface);
        }
        paramQQAppInterface = paramConfig;
        if (paramConfig != null)
        {
          paramConfig.version = j;
          paramQQAppInterface = paramConfig;
        }
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "handleAVRedPacketConfig, redPacketConfig = " + paramQQAppInterface);
        }
        return paramQQAppInterface;
      }
      catch (Throwable paramQQAppInterface)
      {
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "Throwable:" + paramQQAppInterface.getMessage());
        }
        paramQQAppInterface = null;
        continue;
      }
      label285:
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "inflateConfigString error!");
      }
      paramQQAppInterface = null;
      continue;
      label305:
      paramQQAppInterface = paramConfig.content.get().toStringUtf8();
      continue;
      label319:
      AVRedPacketConfig.deleteLocalConfig(jdField_a_of_type_JavaLangString);
      paramQQAppInterface = localObject2;
      if (QLog.isColorLevel())
      {
        QLog.d("SPLASH_ConfigServlet", 2, "handleAVRedPacketConfig, msg_content_list is null");
        paramQQAppInterface = localObject2;
      }
    }
  }
  
  void a(Intent paramIntent, ConfigurationService.Config paramConfig)
  {
    if (QLog.isColorLevel()) {
      QLog.d("SPLASH_ConfigServlet", 2, "handleResp_GetArScanStarFaceConfig |  type= " + paramConfig.type.get());
    }
    ARGlobalConfigManager localARGlobalConfigManager = (ARGlobalConfigManager)((QQAppInterface)getAppRuntime()).getManager(219);
    int i;
    byte[] arrayOfByte;
    if (paramConfig.type.get() == 206)
    {
      i = paramConfig.version.get();
      if (paramIntent.getIntExtra("ar_scan_star_face_config_version", 0) == i) {
        break label353;
      }
      if ((paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() <= 0)) {
        break label325;
      }
      paramIntent = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
      if (paramIntent == null) {
        break label307;
      }
      if (paramIntent.compress.get() != 1) {
        break label293;
      }
      arrayOfByte = OlympicUtil.a(paramIntent.content.get().toByteArray());
      if (arrayOfByte == null) {
        break label371;
      }
    }
    for (;;)
    {
      try
      {
        paramIntent = new String(arrayOfByte, "UTF-8");
        if (paramIntent != null)
        {
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, "handleResp_GetArScanStarFaceConfig, config_content is " + paramIntent);
          }
          i = paramConfig.version.get();
          if (localARGlobalConfigManager.b(paramIntent)) {
            localARGlobalConfigManager.b(i);
          }
        }
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "handleResp_GetArScanStarFaceConfig, config type 206");
        }
        return;
      }
      catch (UnsupportedEncodingException paramIntent)
      {
        if (QLog.isColorLevel()) {
          paramIntent.printStackTrace();
        }
        paramIntent = null;
        continue;
      }
      catch (OutOfMemoryError paramIntent)
      {
        if (QLog.isColorLevel()) {
          paramIntent.printStackTrace();
        }
        System.gc();
        try
        {
          paramIntent = new String(arrayOfByte, "UTF-8");
        }
        catch (Throwable paramIntent)
        {
          paramIntent = null;
        }
        continue;
      }
      label293:
      paramIntent = paramIntent.content.get().toStringUtf8();
      continue;
      label307:
      if (QLog.isColorLevel())
      {
        QLog.d("SPLASH_ConfigServlet", 2, "handleResp_GetArScanStarFaceConfig, content is null");
        continue;
        label325:
        if (localARGlobalConfigManager != null) {
          localARGlobalConfigManager.c();
        }
        if (QLog.isColorLevel())
        {
          QLog.d("SPLASH_ConfigServlet", 2, "handleResp_GetArScanStarFaceConfig we delete ARConfig info here");
          continue;
          label353:
          if (QLog.isColorLevel())
          {
            QLog.d("SPLASH_ConfigServlet", 2, "handleResp_GetArScanStarFaceConfig, version same");
            continue;
            label371:
            paramIntent = null;
          }
        }
      }
    }
  }
  
  public void a(Intent paramIntent, boolean paramBoolean, ConfigurationService.Config paramConfig, int paramInt)
  {
    if (QLog.isColorLevel()) {
      QLog.d("Olympic.configServlet", 2, new Object[] { "handleResp_GetOlympicActConfig, success=", Boolean.valueOf(paramBoolean) });
    }
    int m = 0;
    int i = 0;
    int j = 2;
    int k;
    OlympicActConfig localOlympicActConfig;
    if ((paramBoolean) && (paramConfig != null) && (paramConfig.type.get() == 86))
    {
      if (QLog.isColorLevel()) {
        QLog.d("Olympic.configServlet", 2, new Object[] { "handleResp_GetOlympicActConfig, result=", Integer.valueOf(paramInt) });
      }
      if (paramInt == 0)
      {
        k = paramConfig.version.get();
        paramInt = paramIntent.getIntExtra("config_version", 0);
        if (QLog.isColorLevel()) {
          QLog.d("Olympic.configServlet", 2, new Object[] { "handleResp_GetOlympicActConfig, reqVersion=", Integer.valueOf(paramInt), ", receiveVersion=", Integer.valueOf(k) });
        }
        if (k != paramInt) {
          if ((paramConfig.msg_content_list != null) && (paramConfig.msg_content_list.size() > 0))
          {
            paramIntent = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
            if (paramIntent != null)
            {
              j = paramIntent.task_id.get();
              if (paramIntent.compress.get() == 1)
              {
                paramConfig = OlympicUtil.a(paramIntent.content.get().toByteArray());
                if (paramConfig == null)
                {
                  paramInt = 4;
                  paramIntent = null;
                  if (QLog.isColorLevel()) {
                    QLog.d("Olympic.configServlet", 2, new Object[] { "handleResp_GetOlympicActConfig, xmlContent=", paramIntent });
                  }
                  localOlympicActConfig = OlympicActConfig.parse(getAppRuntime(), paramIntent);
                  if (QLog.isColorLevel())
                  {
                    if (localOlympicActConfig != null) {
                      break label522;
                    }
                    paramConfig = "null";
                    label293:
                    QLog.d("Olympic.configServlet", 2, new Object[] { "handleResp_GetOlympicActConfig, newConfig=", paramConfig });
                  }
                  if (localOlympicActConfig == null) {
                    break label555;
                  }
                  i = 0;
                  localOlympicActConfig.version = k;
                  paramIntent = (OlympicManager)((QQAppInterface)getAppRuntime()).getManager(166);
                  if (paramIntent == null) {
                    break label528;
                  }
                  paramIntent.a(localOlympicActConfig);
                  paramInt = i;
                  label360:
                  i = j;
                  label364:
                  j = k;
                  k = i;
                  i = paramInt;
                  paramInt = k;
                }
              }
            }
          }
        }
      }
    }
    for (;;)
    {
      for (;;)
      {
        OlympicServlet.a(getAppRuntime(), 86, j, paramInt, 1, i, -1);
        paramIntent = (OlympicManager)((QQAppInterface)getAppRuntime()).getManager(166);
        if (paramIntent != null)
        {
          paramIntent.g();
          paramIntent.f();
        }
        return;
        try
        {
          paramIntent = new String(paramConfig, "UTF-8");
          paramInt = 2;
        }
        catch (UnsupportedEncodingException paramIntent)
        {
          if (QLog.isColorLevel()) {
            paramIntent.printStackTrace();
          }
          paramIntent = null;
          paramInt = 2;
        }
        catch (OutOfMemoryError paramIntent)
        {
          for (;;)
          {
            if (QLog.isColorLevel()) {
              paramIntent.printStackTrace();
            }
            System.gc();
            try
            {
              paramIntent = new String(paramConfig, "UTF-8");
              paramInt = 2;
            }
            catch (Throwable paramIntent)
            {
              paramIntent = null;
              paramInt = 2;
            }
          }
        }
      }
      break;
      paramIntent = paramIntent.content.get().toStringUtf8();
      paramInt = 2;
      break;
      label522:
      paramConfig = localOlympicActConfig;
      break label293;
      label528:
      paramInt = i;
      if (!QLog.isColorLevel()) {
        break label360;
      }
      QLog.d("Olympic.configServlet", 2, "handleResp_GetOlympicActConfig, manager is null!");
      paramInt = i;
      break label360;
      label555:
      i = paramInt;
      if (paramIntent != null) {
        i = 5;
      }
      paramInt = i;
      if (!QLog.isColorLevel()) {
        break label360;
      }
      QLog.d("Olympic.configServlet", 2, "handleResp_GetOlympicActConfig, parse failed, newConfig is null!");
      paramInt = i;
      break label360;
      if (QLog.isColorLevel()) {
        QLog.d("Olympic.configServlet", 2, "handleResp_GetOlympicActConfig, content is null");
      }
      i = 0;
      paramInt = j;
      break label364;
      if (QLog.isColorLevel()) {
        QLog.d("Olympic.configServlet", 2, "handleResp_GetOlympicActConfig, msg_content_list is null");
      }
      paramIntent = (QQAppInterface)getAppRuntime();
      paramConfig = (OlympicManager)paramIntent.getManager(166);
      if (paramConfig != null) {
        paramConfig.e();
      }
      OlympicActConfig.deleteFile(paramIntent, BaseApplicationImpl.getContext());
      paramInt = j;
      i = m;
      break label364;
      paramInt = j;
      i = m;
      if (!QLog.isColorLevel()) {
        break label364;
      }
      QLog.d("Olympic.configServlet", 2, "handleResp_GetOlympicActConfig, has same version");
      paramInt = j;
      i = m;
      break label364;
      paramInt = 0;
      k = 1;
      j = i;
      i = k;
      continue;
      paramInt = 0;
      k = 1;
      j = i;
      i = k;
    }
  }
  
  public void a(QQAppInterface paramQQAppInterface, int paramInt, ConfigurationService.Config paramConfig)
  {
    int j = paramConfig.version.get();
    int i = SharedPreUtils.aU(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount());
    int k = SharedPreUtils.aV(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount());
    int m = AppSetting.jdField_a_of_type_Int;
    if (QLog.isColorLevel()) {
      QLog.d("NativeMonitorConfig", 1, String.format("received nativeMonitorConfig remote version: %d, localVersion: %d ,originalAppId:%d, currentAppId:%d", new Object[] { Integer.valueOf(j), Integer.valueOf(i), Integer.valueOf(k), Integer.valueOf(m) }));
    }
    if (k != m)
    {
      SharedPreUtils.ai(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount(), m);
      i = 0;
    }
    String str;
    if (j != i)
    {
      str = b(paramConfig, i, paramInt);
      if (!TextUtils.isEmpty(str)) {
        if (QLog.isColorLevel()) {
          QLog.d("NativeMonitorConfig", 2, "receiveAllConfigs|type: " + paramInt + ",content: " + str + ",version: " + j);
        }
      }
    }
    for (;;)
    {
      try
      {
        paramConfig = new JSONObject(str);
        paramConfig = (NativeMonitorConfig)JSONUtils.a(paramConfig, NativeMonitorConfig.class);
        if (paramConfig == null)
        {
          if (QLog.isColorLevel()) {
            QLog.d("NativeMonitorConfig", 2, "Resolve Config failure");
          }
          NativeMonitorConfigHelper.a();
          return;
        }
      }
      catch (JSONException paramConfig)
      {
        if (QLog.isDevelopLevel()) {
          paramConfig.printStackTrace();
        }
        paramConfig = null;
        continue;
        if (QLog.isColorLevel()) {
          QLog.d("NativeMonitorConfig", 2, "start to update config:" + paramConfig.toString());
        }
        if (paramConfig.getTimeLimited() <= 0L)
        {
          paramConfig.setTimeLimitedDefault();
          if (QLog.isColorLevel()) {
            QLog.d("NativeMonitorConfig", 2, "time limited is too small, setToDefault");
          }
        }
        if (paramConfig.getMemoryLimited() <= 0L)
        {
          paramConfig.setMemoryLimitedDefault();
          if (QLog.isColorLevel()) {
            QLog.d("NativeMonitorConfig", 2, "memory limited is too small, setToDefault");
          }
        }
        if (paramConfig.getCountLimted() <= 0L)
        {
          if (QLog.isColorLevel()) {
            QLog.d("NativeMonitorConfig", 2, "count limited is too small, setToDefault");
          }
          paramConfig.setCountLimitedDefault();
        }
        NativeMonitorConfigHelper.a(paramConfig);
        SharedPreUtils.b(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount(), j, str);
        continue;
      }
      NativeMonitorConfigHelper.a(new NativeMonitorConfig());
      SharedPreUtils.b(paramQQAppInterface.getApp(), paramQQAppInterface.getAccount(), j, "");
      if (QLog.isColorLevel())
      {
        QLog.d("NativeMonitorConfig", 1, "config is null, use default config");
        continue;
        if (QLog.isColorLevel()) {
          QLog.d("NativeMonitorConfig", 2, "config version not updated, nothing to do");
        }
      }
    }
  }
  
  void a(QQAppInterface paramQQAppInterface, Intent paramIntent, ConfigurationService.Config paramConfig)
  {
    if (QLog.isColorLevel()) {
      QLog.d("SPLASH_ConfigServlet", 2, "handleResp_GetArScanFacePreDownConfig |  type= " + paramConfig.type.get());
    }
    if (paramConfig.type.get() != 205) {}
    do
    {
      do
      {
        do
        {
          return;
          int i = paramConfig.version.get();
          if (paramIntent.getIntExtra("key_download_cfg_version", 0) != i) {
            break;
          }
        } while (!QLog.isColorLevel());
        QLog.d("SPLASH_ConfigServlet", 2, "handleResp_GetArScanFacePreDownConfig, version same");
        return;
        if ((paramConfig.msg_content_list != null) && (paramConfig.msg_content_list.size() > 0)) {
          break;
        }
      } while (!QLog.isColorLevel());
      QLog.d("SPLASH_ConfigServlet", 2, "handleResp_GetArScanFacePreDownConfig we delete ARConfig info here");
      return;
      paramIntent = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
      if (paramIntent != null) {
        break;
      }
    } while (!QLog.isColorLevel());
    QLog.d("SPLASH_ConfigServlet", 2, "handleResp_GetArScanFacePreDownConfig, content is null");
    return;
    byte[] arrayOfByte;
    if (paramIntent.compress.get() == 1)
    {
      arrayOfByte = OlympicUtil.a(paramIntent.content.get().toByteArray());
      if (arrayOfByte == null) {
        break label351;
      }
    }
    for (;;)
    {
      try
      {
        paramIntent = new String(arrayOfByte, "UTF-8");
        if (paramIntent == null) {
          break label329;
        }
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "handleResp_GetArScanFacePreDownConfig, config_content is " + paramIntent);
        }
        FaceScanDownloadManager.a(paramQQAppInterface, paramIntent, paramConfig.version.get());
        if (!QLog.isColorLevel()) {
          break;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "handleResp_GetArScanFacePreDownConfig, config type 205");
        return;
      }
      catch (UnsupportedEncodingException paramIntent)
      {
        if (QLog.isColorLevel()) {
          paramIntent.printStackTrace();
        }
        paramIntent = null;
        continue;
      }
      catch (OutOfMemoryError paramIntent)
      {
        if (QLog.isColorLevel()) {
          paramIntent.printStackTrace();
        }
        System.gc();
        try
        {
          paramIntent = new String(arrayOfByte, "UTF-8");
        }
        catch (Throwable paramIntent)
        {
          paramIntent = null;
        }
        continue;
      }
      paramIntent = paramIntent.content.get().toStringUtf8();
      continue;
      label329:
      FaceScanDownloadManager.b(paramQQAppInterface);
      if (QLog.isColorLevel())
      {
        QLog.d("SPLASH_ConfigServlet", 2, "handleResp_GetArScanFacePreDownConfig we delete ARConfig info here");
        continue;
        label351:
        paramIntent = null;
      }
    }
  }
  
  /* Error */
  protected void a(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    // Byte code:
    //   0: iconst_0
    //   1: istore 5
    //   3: aload_2
    //   4: getfield 73	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:version	Lcom/tencent/mobileqq/pb/PBInt32Field;
    //   7: invokevirtual 79	com/tencent/mobileqq/pb/PBInt32Field:get	()I
    //   10: istore 4
    //   12: aload_1
    //   13: invokevirtual 2308	com/tencent/mobileqq/app/QQAppInterface:getPreferences	()Landroid/content/SharedPreferences;
    //   16: astore 6
    //   18: aload_2
    //   19: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   22: ifnull +162 -> 184
    //   25: aload_2
    //   26: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   29: invokevirtual 117	com/tencent/mobileqq/pb/PBRepeatMessageField:size	()I
    //   32: ifle +152 -> 184
    //   35: aload_2
    //   36: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   39: iconst_0
    //   40: invokevirtual 147	com/tencent/mobileqq/pb/PBRepeatMessageField:get	(I)Lcom/tencent/mobileqq/pb/MessageMicro;
    //   43: checkcast 149	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content
    //   46: astore_1
    //   47: aload_1
    //   48: ifnull +136 -> 184
    //   51: aload_1
    //   52: getfield 913	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:compress	Lcom/tencent/mobileqq/pb/PBUInt32Field;
    //   55: invokevirtual 156	com/tencent/mobileqq/pb/PBUInt32Field:get	()I
    //   58: iconst_1
    //   59: if_icmpne +205 -> 264
    //   62: aload_1
    //   63: getfield 917	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:content	Lcom/tencent/mobileqq/pb/PBBytesField;
    //   66: invokevirtual 922	com/tencent/mobileqq/pb/PBBytesField:get	()Lcom/tencent/mobileqq/pb/ByteStringMicro;
    //   69: invokevirtual 928	com/tencent/mobileqq/pb/ByteStringMicro:toByteArray	()[B
    //   72: invokestatic 933	com/tencent/mobileqq/olympic/utils/OlympicUtil:a	([B)[B
    //   75: astore_2
    //   76: aload_2
    //   77: ifnull +182 -> 259
    //   80: new 240	java/lang/String
    //   83: dup
    //   84: aload_2
    //   85: ldc_w 935
    //   88: invokespecial 938	java/lang/String:<init>	([BLjava/lang/String;)V
    //   91: astore_1
    //   92: aload_1
    //   93: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   96: ifne +88 -> 184
    //   99: new 242	org/json/JSONObject
    //   102: dup
    //   103: aload_1
    //   104: invokespecial 245	org/json/JSONObject:<init>	(Ljava/lang/String;)V
    //   107: ldc_w 6229
    //   110: invokevirtual 255	org/json/JSONObject:getInt	(Ljava/lang/String;)I
    //   113: istore_3
    //   114: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   117: ifeq +35 -> 152
    //   120: new 4009	java/lang/StringBuffer
    //   123: dup
    //   124: invokespecial 4010	java/lang/StringBuffer:<init>	()V
    //   127: astore_1
    //   128: aload_1
    //   129: ldc_w 6231
    //   132: invokevirtual 4017	java/lang/StringBuffer:append	(Ljava/lang/String;)Ljava/lang/StringBuffer;
    //   135: pop
    //   136: aload_1
    //   137: iload_3
    //   138: invokevirtual 6234	java/lang/StringBuffer:append	(I)Ljava/lang/StringBuffer;
    //   141: pop
    //   142: ldc 63
    //   144: iconst_2
    //   145: aload_1
    //   146: invokevirtual 4018	java/lang/StringBuffer:toString	()Ljava/lang/String;
    //   149: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   152: aload 6
    //   154: invokeinterface 645 1 0
    //   159: ldc_w 2323
    //   162: iload 4
    //   164: invokeinterface 954 3 0
    //   169: ldc_w 6229
    //   172: iload_3
    //   173: invokeinterface 954 3 0
    //   178: invokeinterface 656 1 0
    //   183: pop
    //   184: return
    //   185: astore_1
    //   186: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   189: ifeq +13 -> 202
    //   192: ldc 63
    //   194: iconst_2
    //   195: ldc_w 6236
    //   198: aload_1
    //   199: invokestatic 4878	com/tencent/qphone/base/util/QLog:w	(Ljava/lang/String;ILjava/lang/String;Ljava/lang/Throwable;)V
    //   202: aconst_null
    //   203: astore_1
    //   204: goto -112 -> 92
    //   207: astore_1
    //   208: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   211: ifeq +13 -> 224
    //   214: ldc 63
    //   216: iconst_2
    //   217: ldc_w 6236
    //   220: aload_1
    //   221: invokestatic 4878	com/tencent/qphone/base/util/QLog:w	(Ljava/lang/String;ILjava/lang/String;Ljava/lang/Throwable;)V
    //   224: invokestatic 967	java/lang/System:gc	()V
    //   227: new 240	java/lang/String
    //   230: dup
    //   231: aload_2
    //   232: ldc_w 935
    //   235: invokespecial 938	java/lang/String:<init>	([BLjava/lang/String;)V
    //   238: astore_1
    //   239: goto -147 -> 92
    //   242: astore_1
    //   243: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   246: ifeq +13 -> 259
    //   249: ldc 63
    //   251: iconst_2
    //   252: ldc_w 6236
    //   255: aload_1
    //   256: invokestatic 4878	com/tencent/qphone/base/util/QLog:w	(Ljava/lang/String;ILjava/lang/String;Ljava/lang/Throwable;)V
    //   259: aconst_null
    //   260: astore_1
    //   261: goto -169 -> 92
    //   264: aload_1
    //   265: getfield 917	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:content	Lcom/tencent/mobileqq/pb/PBBytesField;
    //   268: invokevirtual 922	com/tencent/mobileqq/pb/PBBytesField:get	()Lcom/tencent/mobileqq/pb/ByteStringMicro;
    //   271: invokevirtual 972	com/tencent/mobileqq/pb/ByteStringMicro:toStringUtf8	()Ljava/lang/String;
    //   274: astore_1
    //   275: goto -183 -> 92
    //   278: astore_1
    //   279: iconst_0
    //   280: istore_3
    //   281: aload_1
    //   282: invokevirtual 268	org/json/JSONException:printStackTrace	()V
    //   285: aload 6
    //   287: invokeinterface 645 1 0
    //   292: ldc_w 2323
    //   295: iconst_0
    //   296: invokeinterface 954 3 0
    //   301: ldc_w 6229
    //   304: iload_3
    //   305: invokeinterface 954 3 0
    //   310: invokeinterface 656 1 0
    //   315: pop
    //   316: return
    //   317: astore_1
    //   318: iconst_0
    //   319: istore_3
    //   320: aload 6
    //   322: invokeinterface 645 1 0
    //   327: ldc_w 2323
    //   330: iload 4
    //   332: invokeinterface 954 3 0
    //   337: ldc_w 6229
    //   340: iload_3
    //   341: invokeinterface 954 3 0
    //   346: invokeinterface 656 1 0
    //   351: pop
    //   352: aload_1
    //   353: athrow
    //   354: astore_1
    //   355: goto -35 -> 320
    //   358: astore_1
    //   359: iload 5
    //   361: istore 4
    //   363: goto -43 -> 320
    //   366: astore_1
    //   367: goto -86 -> 281
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	370	0	this	ConfigServlet
    //   0	370	1	paramQQAppInterface	QQAppInterface
    //   0	370	2	paramConfig	ConfigurationService.Config
    //   113	228	3	i	int
    //   10	352	4	j	int
    //   1	359	5	k	int
    //   16	305	6	localSharedPreferences	SharedPreferences
    // Exception table:
    //   from	to	target	type
    //   80	92	185	java/lang/Exception
    //   80	92	207	java/lang/OutOfMemoryError
    //   227	239	242	java/lang/Throwable
    //   99	114	278	org/json/JSONException
    //   99	114	317	finally
    //   114	152	354	finally
    //   281	285	358	finally
    //   114	152	366	org/json/JSONException
  }
  
  protected void a(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig, String paramString, ConfigServlet.IHandleConfigCallback paramIHandleConfigCallback)
  {
    int j = paramConfig.version.get();
    int i = paramIHandleConfigCallback.a();
    if (QLog.isColorLevel()) {
      QLog.d("TroopRankConfig", 2, paramString + ", serverVersion=" + j + "|localVersion=" + i);
    }
    if ((j != i) && (paramConfig.msg_content_list.size() > 0))
    {
      ArrayList localArrayList = new ArrayList();
      int k = paramConfig.msg_content_list.size();
      i = 0;
      if (i < k)
      {
        paramQQAppInterface = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
        byte[] arrayOfByte;
        if (paramQQAppInterface != null)
        {
          if (paramQQAppInterface.compress.get() != 1) {
            break label271;
          }
          arrayOfByte = OlympicUtil.a(paramQQAppInterface.content.get().toByteArray());
          if (arrayOfByte == null) {
            break label266;
          }
        }
        for (;;)
        {
          try
          {
            paramQQAppInterface = new String(arrayOfByte, "UTF-8");
            if (!TextUtils.isEmpty(paramQQAppInterface)) {
              localArrayList.add(paramQQAppInterface);
            }
            i += 1;
          }
          catch (Exception paramQQAppInterface)
          {
            if (QLog.isColorLevel()) {
              QLog.w("SPLASH_ConfigServlet", 2, paramString, paramQQAppInterface);
            }
            paramQQAppInterface = null;
            continue;
          }
          catch (OutOfMemoryError paramQQAppInterface)
          {
            if (QLog.isColorLevel()) {
              QLog.w("SPLASH_ConfigServlet", 2, paramString, paramQQAppInterface);
            }
            System.gc();
            try
            {
              paramQQAppInterface = new String(arrayOfByte, "UTF-8");
            }
            catch (Throwable paramQQAppInterface)
            {
              if (QLog.isColorLevel()) {
                QLog.w("SPLASH_ConfigServlet", 2, paramString, paramQQAppInterface);
              }
            }
          }
          label266:
          paramQQAppInterface = null;
          continue;
          label271:
          paramQQAppInterface = paramQQAppInterface.content.get().toStringUtf8();
        }
      }
      if (localArrayList.size() <= 0) {
        break label314;
      }
      paramIHandleConfigCallback.a(j);
      paramIHandleConfigCallback.a(localArrayList);
    }
    label314:
    while (!QLog.isColorLevel()) {
      return;
    }
    QLog.d("SPLASH_ConfigServlet", 2, paramString + ", config_content is empty");
  }
  
  public void a(ConfigurationService.Config paramConfig)
  {
    for (;;)
    {
      int i;
      try
      {
        QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
        if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
        {
          i = 0;
          if (i < paramConfig.content_list.size())
          {
            String str = ((String)paramConfig.content_list.get(i)).trim();
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 79,content: " + str + ",version: " + paramConfig.version.get());
            }
            int j = paramConfig.version.get();
            if ((j != SharedPreUtils.Y(localQQAppInterface.getApp(), localQQAppInterface.getCurrentAccountUin())) || (paramConfig.content_list.size() > 0))
            {
              str = str.split("=")[1];
              if (!TextUtils.isEmpty(str)) {
                ReadInJoyHelper.c(str, localQQAppInterface);
              }
              SharedPreUtils.u(localQQAppInterface.getApp(), j, localQQAppInterface.getCurrentAccountUin());
            }
            else if (QLog.isColorLevel())
            {
              QLog.d("SPLASH_ConfigServlet", 2, "received READINJOY_MERGE_CONFIG_CMD IGNORE THIS ACTION  because of SAME VERSION");
            }
          }
        }
      }
      catch (Exception paramConfig)
      {
        if (QLog.isColorLevel()) {
          QLog.e("SPLASH_ConfigServlet", 2, "received readinjoy merge config error,cmd : 79" + paramConfig.toString());
        }
      }
      while (!QLog.isColorLevel()) {
        return;
      }
      QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 79,content_list is empty ,version: " + paramConfig.version.get());
      return;
      i += 1;
    }
  }
  
  public void b(Intent paramIntent, boolean paramBoolean, ConfigurationService.Config paramConfig, int paramInt)
  {
    if (QLog.isColorLevel()) {
      QLog.d("Q.camera.configServlet", 2, "[handleRespQCameraPhoneConfig] ENTER success=" + paramBoolean + " result=" + paramInt);
    }
    int j = 0;
    int i = 2;
    String str = paramIntent.getStringExtra("uin");
    int k;
    if ((paramBoolean) && (paramConfig != null) && (paramConfig.type.get() == 109)) {
      if (paramInt == 0)
      {
        k = paramConfig.version.get();
        int m = paramIntent.getIntExtra("qcamera_conf_version", 0);
        QLog.i("Q.camera.configServlet", 1, "[handleRespQCameraPhoneConfig] reqVersion=" + m + " receiveVersion=" + k);
        paramInt = i;
        i = j;
        if (k != m)
        {
          CameraUtils.a(BaseApplicationImpl.getContext(), k);
          if (QLog.isColorLevel()) {
            QLog.d("Q.camera.configServlet", 2, "[handleRespQCameraPhoneConfig] save version: " + k + " and check config version: " + CameraUtils.a(BaseApplicationImpl.getContext()));
          }
          if ((paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() <= 0)) {
            break label582;
          }
          paramIntent = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
          i = paramIntent.task_id.get();
          if (paramIntent.compress.get() != 1) {
            break label517;
          }
          paramIntent = CameraUtils.a(paramIntent.content.get().toByteArray());
          if (paramIntent == null)
          {
            paramInt = 4;
            CameraUtils.a(BaseApplicationImpl.getContext(), true);
            QLog.w("Q.camera.configServlet", 1, "[handleRespQCameraPhoneConfig] uncompress failed");
          }
        }
        else
        {
          j = paramInt;
          paramInt = k;
          k = i;
          i = m;
        }
      }
    }
    for (;;)
    {
      for (;;)
      {
        for (;;)
        {
          QLog.i("Q.camera.configServlet", 1, "[handleRespQCameraPhoneConfig] rptResult=" + j);
          paramIntent = new HashMap();
          paramIntent.put("rpt_type", String.valueOf(109));
          paramIntent.put("rpt_task_id", String.valueOf(k));
          paramIntent.put("rpt_req_version", String.valueOf(i));
          paramIntent.put("rpt_version", String.valueOf(paramInt));
          paramIntent.put("rpt_report_type", String.valueOf(1));
          paramIntent.put("rpt_result", String.valueOf(j));
          StatisticCollector.a(BaseApplication.getContext()).a(str, "qcamera_phone_config_pull_event", paramBoolean, 0L, 0L, paramIntent, String.valueOf(j));
          return;
          paramInt = 0;
          paramIntent = new String(paramIntent);
          if (QLog.isColorLevel()) {
            QLog.d("Q.camera.configServlet", 4, new Object[] { "[handleRespQCameraPhoneConfig] zip xmlContent=", paramIntent });
          }
          try
          {
            CameraUtils.a(BaseApplicationImpl.getContext(), paramIntent, k);
          }
          catch (Exception paramIntent)
          {
            paramIntent.printStackTrace();
            paramInt = 3;
          }
        }
        break;
        label517:
        paramIntent = paramIntent.content.get().toStringUtf8();
        if (QLog.isColorLevel()) {
          QLog.d("Q.camera.configServlet", 4, new Object[] { "[handleRespQCameraPhoneConfig] raw xmlContent=", paramIntent });
        }
        try
        {
          CameraUtils.a(BaseApplicationImpl.getContext(), paramIntent, k);
          paramInt = 0;
        }
        catch (Exception paramIntent)
        {
          paramIntent.printStackTrace();
          paramInt = 3;
        }
      }
      break;
      label582:
      paramInt = 5;
      QLog.w("Q.camera.configServlet", 1, "[handleRespQCameraPhoneConfig] no data, current disableCameraSDK=" + CameraUtils.a(BaseApplicationImpl.getContext()));
      i = j;
      break;
      paramInt = 0;
      j = 1;
      k = 0;
      i = 0;
      continue;
      paramInt = 0;
      j = 1;
      k = 0;
      i = 0;
    }
  }
  
  protected void b(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if (paramConfig != null) {}
    for (;;)
    {
      try
      {
        if (paramConfig.type.get() != 143) {
          break label366;
        }
        if ((paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() <= 0)) {
          break label431;
        }
        Object localObject1 = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
        if (localObject1 == null) {
          break label349;
        }
        if (((ConfigurationService.Content)localObject1).compress.get() == 1)
        {
          byte[] arrayOfByte = OlympicUtil.a(((ConfigurationService.Content)localObject1).content.get().toByteArray());
          if (arrayOfByte == null) {
            break label425;
          }
          try
          {
            localObject1 = new String(arrayOfByte, "UTF-8");
            if (localObject1 == null) {
              break label431;
            }
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServletQ.nearby.tag_nearby_glamour_level_config", 2, "receiveAllConfigs|type: 143,content: " + (String)localObject1 + ",version: " + paramConfig.version.get());
            }
            int i = paramConfig.version.get();
            if ((i == SharedPreUtils.a(paramQQAppInterface.getApp(), "nearby_glamour_level_config_version", jdField_a_of_type_JavaLangString)) || (TextUtils.isEmpty((CharSequence)localObject1))) {
              continue;
            }
            NearbyFlowerUtil.a((String)localObject1);
            NearbyFlowerUtil.b((String)localObject1);
            SharedPreUtils.h(paramQQAppInterface.getApp(), (String)localObject1);
            SharedPreUtils.a(paramQQAppInterface.getApp(), "nearby_glamour_level_config_version", jdField_a_of_type_JavaLangString, i);
            return;
          }
          catch (UnsupportedEncodingException localUnsupportedEncodingException)
          {
            if (!QLog.isColorLevel()) {
              break label432;
            }
            localUnsupportedEncodingException.printStackTrace();
          }
          catch (OutOfMemoryError localOutOfMemoryError)
          {
            if (QLog.isColorLevel()) {
              localOutOfMemoryError.printStackTrace();
            }
            System.gc();
            try
            {
              String str = new String(arrayOfByte, "UTF-8");
            }
            catch (Throwable localThrowable)
            {
              localObject2 = null;
            }
            continue;
          }
        }
        else
        {
          localObject2 = ((ConfigurationService.Content)localObject2).content.get().toStringUtf8();
          continue;
        }
        if (!QLog.isColorLevel()) {
          break label431;
        }
        QLog.d("SPLASH_ConfigServletQ.nearby.tag_nearby_glamour_level_config", 2, "received CHNAGE_MACHINE_CONFIG IGNORE THIS ACTION  because of SAME VERSION ");
        return;
      }
      catch (Exception paramQQAppInterface)
      {
        if (!QLog.isColorLevel()) {
          break label431;
        }
      }
      QLog.e("SPLASH_ConfigServletQ.nearby.tag_nearby_glamour_level_config", 2, "received change machine config error,cmd : 143" + paramQQAppInterface.toString());
      return;
      label349:
      if (QLog.isColorLevel())
      {
        QLog.d("SPLASH_ConfigServletQ.nearby.tag_nearby_glamour_level_config", 2, "handleNearbyGlamourLevelConfig, content is null");
        return;
        label366:
        if (QLog.isColorLevel())
        {
          localObject2 = new StringBuilder().append("receiveAllConfigs|type: 143,content_list is empty ,version: ");
          if (paramConfig != null) {}
          for (paramQQAppInterface = Integer.valueOf(paramConfig.version.get());; paramQQAppInterface = "")
          {
            QLog.d("SPLASH_ConfigServletQ.nearby.tag_nearby_glamour_level_config", 2, paramQQAppInterface);
            return;
          }
          localObject2 = null;
          continue;
        }
      }
      label425:
      label431:
      return;
      label432:
      Object localObject2 = null;
    }
  }
  
  public void b(ConfigurationService.Config paramConfig)
  {
    for (;;)
    {
      int j;
      try
      {
        QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
        if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
        {
          int i = 0;
          j = paramConfig.content_list.size();
          if (i < j)
          {
            int k;
            Document localDocument;
            Object localObject3;
            String str;
            try
            {
              Object localObject1 = ((String)paramConfig.content_list.get(i)).trim();
              k = paramConfig.version.get();
              j = SharedPreUtils.Z(localQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 92,content: " + (String)localObject1 + ",version: " + paramConfig.version.get() + "local version = " + j);
              }
              if ((k == j) && (paramConfig.content_list.size() <= 0)) {
                continue;
              }
              localDocument = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(((String)localObject1).getBytes("utf-8")));
              localObject1 = localDocument.getElementsByTagName("configs").item(0).getFirstChild();
              if (localObject1 == null) {
                continue;
              }
              if (((Node)localObject1).getFirstChild() != null)
              {
                localObject3 = ((Node)localObject1).getNodeName();
                str = ((Node)localObject1).getFirstChild().getNodeValue();
                if (TextUtils.equals((CharSequence)localObject3, "smartcrop_pic")) {
                  ReadInJoyHelper.c(localQQAppInterface, str);
                }
              }
              else
              {
                localObject1 = ((Node)localObject1).getNextSibling();
                continue;
              }
              if (!TextUtils.equals((CharSequence)localObject3, "feeds_group")) {
                continue;
              }
              ReadInJoyHelper.a(localQQAppInterface, str);
              continue;
              i += 1;
            }
            catch (Exception localException1)
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "exception occurs", localException1);
              }
            }
            continue;
            if (TextUtils.equals((CharSequence)localObject3, "remind_only_wifi"))
            {
              ReadInJoyHelper.b(localQQAppInterface, str);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "kandian_individual_time_push"))
            {
              if (!TextUtils.equals(str, "1")) {
                break label3803;
              }
              bool1 = true;
              ReadInJoyHelper.a(localQQAppInterface, bool1);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "push_switch"))
            {
              ReadInJoyHelper.d(localQQAppInterface, TextUtils.equals(str, "1"));
              continue;
            }
            bool1 = TextUtils.equals((CharSequence)localObject3, "sticky_times");
            int m;
            if (bool1)
            {
              try
              {
                j = Integer.valueOf(str).intValue();
                m = Integer.valueOf(localDocument.getElementsByTagName("effective_time").item(0).getFirstChild().getNodeValue()).intValue();
                if ((j >= 0) && (m < 86400)) {
                  continue;
                }
                throw new IllegalArgumentException("stickyTime or effectiveTime has error ! " + j + "," + m);
              }
              catch (Exception localException2)
              {
                localException2.printStackTrace();
                QLog.d("SPLASH_ConfigServlet", 2, "covert stickyTime and effectiveTime has error : " + localException2);
              }
              continue;
              ((KandianMergeManager)localQQAppInterface.getManager(161)).a(j, m);
              continue;
            }
            Object localObject2;
            Object localObject4;
            if (TextUtils.equals((CharSequence)localObject3, "socializeWebUrl"))
            {
              localObject2 = localException1.getFirstChild();
              if (localObject2 != null)
              {
                if (((Node)localObject2).getNodeType() == 1)
                {
                  localObject3 = ((Node)localObject2).getNodeName();
                  localObject4 = ((Node)localObject2).getFirstChild().getNodeValue();
                  if (ReadInJoyHelper.a((String)localObject3)) {
                    ReadInJoyHelper.a(localQQAppInterface, (String)localObject3, (String)localObject4);
                  }
                }
                else
                {
                  localObject2 = ((Node)localObject2).getNextSibling();
                }
              }
              else {
                continue;
              }
              QLog.d("SPLASH_ConfigServlet", 1, "find unrecognized key:" + (String)localObject3 + " with value:" + (String)localObject4);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "free_time_refresh_push"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "updateFreeTimeRefreshPush " + TextUtils.equals((CharSequence)localObject2, "1"));
              }
              ReadInJoyHelper.h(localQQAppInterface, TextUtils.equals((CharSequence)localObject2, "1"));
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "tab_click_gap_in_seconds"))
            {
              SPEventReportSwitch.a(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "tab_click_count_limit"))
            {
              SPEventReportSwitch.b(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "tab_click_push_algo_id"))
            {
              SPEventReportSwitch.c(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "tab_click_forbid_report_time_in_seconds"))
            {
              SPEventReportSwitch.d(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "fore_ground_gap_in_seconds"))
            {
              SPEventReportSwitch.e(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "screen_switch_in_seconds"))
            {
              SPEventReportSwitch.f(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "user_idle_repor"))
            {
              SPEventReportSwitch.g(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "readinjoy_smrm_switch"))
            {
              SMRM.a(localQQAppInterface, TextUtils.equals((CharSequence)localObject2, "1"));
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "kandian_report_tt"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "kandian_report_tt = " + TextUtils.equals((CharSequence)localObject2, "1"));
              }
              if (TextUtils.equals((CharSequence)localObject2, "1"))
              {
                ReadInJoyHelper.i(localQQAppInterface, true);
                continue;
              }
              ReadInJoyHelper.i(localQQAppInterface, false);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "actKandianReportManyApps"))
            {
              ReadInJoyReportManyApps.a(localException1);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "maintab_reddot_times"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "maintab_reddot_times = " + (String)localObject2);
              }
              ReadInJoyHelper.g(localQQAppInterface, Integer.valueOf((String)localObject2).intValue());
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "maintab_reddot_feeds"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "maintab_reddot_feeds = " + (String)localObject2);
              }
              ReadInJoyHelper.h(localQQAppInterface, Integer.valueOf((String)localObject2).intValue());
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "feedsbackWebUrl"))
            {
              ReadInJoyHelper.b(localQQAppInterface, (String)localObject3, (String)localObject2);
              if (!QLog.isColorLevel()) {
                continue;
              }
              QLog.d("SPLASH_ConfigServlet", 2, "feedsbackWebUrl " + TextUtils.equals((CharSequence)localObject2, "1"));
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "feedsbackSwitch"))
            {
              ReadInJoyHelper.b(localQQAppInterface, (String)localObject3, (String)localObject2);
              if (!QLog.isColorLevel()) {
                continue;
              }
              QLog.d("SPLASH_ConfigServlet", 2, "feedsbackSwitch " + TextUtils.equals((CharSequence)localObject2, "1"));
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "feedsbackName"))
            {
              ReadInJoyHelper.b(localQQAppInterface, (String)localObject3, (String)localObject2);
              if (!QLog.isColorLevel()) {
                continue;
              }
              QLog.d("SPLASH_ConfigServlet", 2, "feedsbackName " + TextUtils.equals((CharSequence)localObject2, "1"));
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "biufeedsSwitch"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "biufeedsSwitch = " + (String)localObject2);
              }
              ReadInJoyHelper.j(localQQAppInterface, Integer.valueOf((String)localObject2).intValue());
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "biufeedsName"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "biufeedsName = " + (String)localObject2);
              }
              ReadInJoyHelper.g(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "biufeedsWebUrl"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "biufeedsWebUrl = " + (String)localObject2);
              }
              ReadInJoyHelper.h(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "badgeNumber"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "badgeNumber = " + (String)localObject2);
              }
              ReadInJoyHelper.v(localQQAppInterface, Integer.valueOf((String)localObject2).intValue());
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "biu_word_count"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "biu_word_count = " + (String)localObject2);
              }
              ReadInJoyHelper.i(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "new_channel_style"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "new_channel_style = " + (String)localObject2);
              }
              ReadInJoyHelper.k(localQQAppInterface, Integer.valueOf((String)localObject2).intValue());
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "local_record_time"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "local_record_time = " + (String)localObject2);
              }
              ReadInJoyHelper.b(localQQAppInterface, Long.valueOf((String)localObject2).longValue());
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "local_record_feeds"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "local_record_feeds = " + (String)localObject2);
              }
              ReadInJoyHelper.w(localQQAppInterface, Integer.valueOf((String)localObject2).intValue());
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "kandianWebPreLoadData"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "kandianWebPreLoadData = " + (String)localObject2);
              }
              if (TextUtils.equals((CharSequence)localObject2, "1"))
              {
                ReadInJoyHelper.m(localQQAppInterface, true);
                continue;
              }
              ReadInJoyHelper.m(localQQAppInterface, false);
              continue;
            }
            if ((TextUtils.equals((CharSequence)localObject3, "ExitAIO_Android_Uin")) && (localObject2 != null))
            {
              localObject2 = ((String)localObject2).split(":");
              if (localObject2.length < 2) {
                continue;
              }
              ReadInJoyHelper.b(Integer.valueOf(localObject2[0]).intValue(), Integer.valueOf(localObject2[1]).intValue());
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "kandian_tab_switch"))
            {
              localObject3 = ReadInJoyHelper.a("local_kd_tab_has_set");
              bool1 = false;
              if ((localObject3 instanceof Boolean)) {
                bool1 = ((Boolean)localObject3).booleanValue();
              }
              if ((TextUtils.isEmpty((CharSequence)localObject2)) || (!((String)localObject2).equals("1"))) {
                break label3809;
              }
              bool2 = true;
              ReadInJoyHelper.a(localQQAppInterface, "remote_kd_tab_switch", Boolean.valueOf(bool2));
              if (!bool1)
              {
                ReadInJoyHelper.a(localQQAppInterface, "local_kd_tab_switch", Boolean.valueOf(bool2));
                QLog.d("SPLASH_ConfigServlet", 1, new Object[] { "receiveKDTabRemoteSP, userHasSetKDTab = ", Boolean.valueOf(bool1), ", updateLocalTabSwitch tabSwitch = ", Boolean.valueOf(bool2) });
                continue;
              }
              QLog.d("SPLASH_ConfigServlet", 1, new Object[] { "receiveKDTabRemoteSP, userHasSetKDTab = ", Boolean.valueOf(bool1), ", no need to updateTabSwitch." });
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "kandian_tab_type"))
            {
              ReadInJoyHelper.a(localQQAppInterface, "remote_kd_tab_type", localObject2);
              localObject3 = ReadInJoyHelper.a("local_kd_tab_has_set");
              if (!(localObject3 instanceof Boolean)) {
                break label3797;
              }
              bool1 = ((Boolean)localObject3).booleanValue();
              if (!bool1)
              {
                ReadInJoyHelper.a(localQQAppInterface, "local_kd_tab_type", localObject2);
                QLog.d("SPLASH_ConfigServlet", 1, new Object[] { "receiveKDTabTypeRemoteSP, userHasSetKDTab = ", Boolean.valueOf(bool1), ", updateLocalTabSwitch tabType = ", localObject2 });
                continue;
              }
              QLog.d("SPLASH_ConfigServlet", 1, new Object[] { "receiveKDTabTypeRemoteSP, userHasSetKDTab = ", Boolean.valueOf(bool1), ", no need to updateTabType." });
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "DiaobaodeKandian"))
            {
              ReadInJoyHelper.y(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "topic_card_jump"))
            {
              ReadInJoyHelper.a(localQQAppInterface, "kd_topic_recommend_card_jump_switch", Boolean.valueOf(((String)localObject2).equals("1")));
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "topic_card_jump_url"))
            {
              ReadInJoyHelper.a(localQQAppInterface, "kd_topic_recommend_card_jump_url", localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "comment_word_count"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "comment_word_count = " + (String)localObject2);
              }
              ReadInJoyHelper.j(localQQAppInterface, (String)localObject2);
              continue;
            }
            if ((TextUtils.equals((CharSequence)localObject3, "KW")) && (!TextUtils.isEmpty((CharSequence)localObject2)))
            {
              localObject3 = new HashMap();
              localObject2 = ((String)localObject2).split(",");
              m = localObject2.length;
              j = 0;
              if (j < m)
              {
                localObject4 = localObject2[j].split(":");
                if (localObject4.length != 2) {
                  break label3815;
                }
                ((HashMap)localObject3).put(localObject4[1], localObject4[0]);
                break label3815;
              }
              ReadInJoyUtils.a("kandian_aio_sp_word", localObject3, true);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "comment_gif_switch"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "comment_gif_switch = " + (String)localObject2);
              }
              ReadInJoyHelper.k(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "ugc_gif_switch"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "ugc_gif_switch = " + (String)localObject2);
              }
              ReadInJoyHelper.l(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "biu_at_switch"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "biu_at_switch = " + (String)localObject2);
              }
              ReadInJoyHelper.o(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "UGC_at_switch"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "UGC_at_switch = " + (String)localObject2);
              }
              ReadInJoyHelper.n(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "comment_at_switch"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "comment_at_switch = " + (String)localObject2);
              }
              ReadInJoyHelper.u(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "biu_profile_switch"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "biu_profile_switch = " + (String)localObject2);
              }
              ReadInJoyHelper.p(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "IconMerge_BiuMsg"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "IconMerge_BiuMsg = " + (String)localObject2);
              }
              ReadInJoyHelper.a(TextUtils.equals((CharSequence)localObject2, "1"));
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "IconMerge_InteractiveMsg"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "IconMerge_InteractiveMsg = " + (String)localObject2);
              }
              ReadInJoyHelper.b(TextUtils.equals((CharSequence)localObject2, "1"));
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "IconMerge_SubscribeMsg"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "IconMerge_InteractiveMsg = " + (String)localObject2);
              }
              ReadInJoyHelper.a((String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "nw_support"))
            {
              ReadInJoyHelper.n(localQQAppInterface, TextUtils.equals((CharSequence)localObject2, "1"));
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "nw_preload"))
            {
              ReadInJoyHelper.o(localQQAppInterface, TextUtils.equals((CharSequence)localObject2, "1"));
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "arkapp_enable_switch"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, new Object[] { "arkapp_enable_switch, value: ", localObject2 });
              }
              ReadInJoyHelper.e(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "exposure_strengthen"))
            {
              ReadInJoyHelper.p(localQQAppInterface, "1".equals(localObject2));
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "native_timeout"))
            {
              ReadInJoyHelper.z(localQQAppInterface, (String)localObject2);
              QLog.d("SPLASH_ConfigServlet", 2, "update native engine timeout config : " + (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "diandian_release_switch"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "dian dian right button config: " + (String)localObject2);
              }
              ReadInJoyHelper.q(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "WXShareFromKandian_Switch"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "get wx share from readinjoy :" + (String)localObject2);
              }
              ReadInJoyHelper.r(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "proteus_enable"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "get proteus switch from config: " + (String)localObject2);
              }
              ReadInJoyHelper.c("1".equals(localObject2));
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "proteus_bid"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "get proteus offline bid from config: " + (String)localObject2);
              }
              ReadInJoyHelper.b((String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "zhitu"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "comment_zhitu_switch:" + (String)localObject2);
              }
              ReadInJoyHelper.m(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "comment_biu_switch"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "comment biu switch :" + (String)localObject2);
              }
              ReadInJoyHelper.s(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "native_comment_biu"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "native comment biu switch:" + (String)localObject2);
              }
              ReadInJoyHelper.t(localQQAppInterface, (String)localObject2);
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "readinjoy_short_video_width_height_ratio"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "readinjoy_short_video_width_height_ratio :" + (String)localObject2);
              }
              ReadInJoyHelper.c(localQQAppInterface, Float.valueOf((String)localObject2).floatValue());
              continue;
            }
            if (TextUtils.equals((CharSequence)localObject3, "readinjoy_short_video_max_duration_limit"))
            {
              if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "readinjoy_short_video_max_duration_limit :" + (String)localObject2);
              }
              ReadInJoyHelper.u(localQQAppInterface, Integer.valueOf((String)localObject2).intValue());
              continue;
            }
            if (!TextUtils.equals((CharSequence)localObject3, "multi_video_ad_config")) {
              continue;
            }
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet", 2, "multi_video_ad_config :" + (String)localObject2);
            }
            ReadInJoyHelper.w(localQQAppInterface, (String)localObject2);
            continue;
            SharedPreUtils.v(localQQAppInterface.getApp(), k, jdField_a_of_type_JavaLangString);
            continue;
            if (!QLog.isColorLevel()) {
              continue;
            }
            QLog.d("SPLASH_ConfigServlet", 2, "received READINJOY_COMMON_CONFIG IGNORE THIS ACTION  because of SAME VERSION");
            continue;
          }
        }
        else if (QLog.isColorLevel())
        {
          QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 92,content_list is empty ,version: " + paramConfig.version.get());
        }
        return;
      }
      catch (Exception paramConfig)
      {
        if (!QLog.isColorLevel()) {
          continue;
        }
        QLog.e("SPLASH_ConfigServlet", 2, "received readinjoy cropandgroup config error,cmd : 92" + paramConfig.toString());
        return;
      }
      label3797:
      boolean bool1 = false;
      continue;
      label3803:
      bool1 = false;
      continue;
      label3809:
      boolean bool2 = false;
      continue;
      label3815:
      j += 1;
    }
  }
  
  protected void c(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    for (;;)
    {
      int i;
      try
      {
        FunctionModuleConfigManager localFunctionModuleConfigManager = (FunctionModuleConfigManager)paramQQAppInterface.getManager(221);
        if ((paramConfig != null) && (paramConfig.type.get() == 190)) {
          if ((paramConfig.msg_content_list != null) && (paramConfig.msg_content_list.size() > 0))
          {
            i = 0;
            if (i < paramConfig.msg_content_list.size())
            {
              Object localObject1 = (ConfigurationService.Content)paramConfig.msg_content_list.get(i);
              if (localObject1 == null) {
                break label382;
              }
              if (((ConfigurationService.Content)localObject1).compress.get() == 1)
              {
                byte[] arrayOfByte = OlympicUtil.a(((ConfigurationService.Content)localObject1).content.get().toByteArray());
                if (arrayOfByte == null) {
                  break label460;
                }
                try
                {
                  localObject1 = new String(arrayOfByte, "UTF-8");
                  if (localObject1 == null) {
                    break label466;
                  }
                  if (QLog.isColorLevel()) {
                    QLog.d("SPLASH_ConfigServletQ.uniteSearch.tag_search_function_module", 2, "receiveAllConfigs|type: 190,content: " + (String)localObject1 + ",version: " + paramConfig.version.get());
                  }
                  int j = paramConfig.version.get();
                  if ((j == SharedPreUtils.a(paramQQAppInterface.getApp(), "search_function_config_version", jdField_a_of_type_JavaLangString)) || (TextUtils.isEmpty((CharSequence)localObject1))) {
                    continue;
                  }
                  localFunctionModuleConfigManager.b(new JSONObject((String)localObject1).optString("kFTSFunctionListUrlKey"));
                  SharedPreUtils.a(paramQQAppInterface.getApp(), "search_function_config_version", jdField_a_of_type_JavaLangString, j);
                }
                catch (UnsupportedEncodingException localUnsupportedEncodingException)
                {
                  if (!QLog.isColorLevel()) {
                    break label473;
                  }
                  localUnsupportedEncodingException.printStackTrace();
                  break label473;
                }
                catch (OutOfMemoryError localOutOfMemoryError)
                {
                  if (QLog.isColorLevel()) {
                    localOutOfMemoryError.printStackTrace();
                  }
                  System.gc();
                  try
                  {
                    String str = new String(arrayOfByte, "UTF-8");
                  }
                  catch (Throwable localThrowable)
                  {
                    localObject2 = null;
                  }
                  continue;
                }
              }
              else
              {
                localObject2 = ((ConfigurationService.Content)localObject2).content.get().toStringUtf8();
                continue;
              }
              if (!QLog.isColorLevel()) {
                break label466;
              }
              QLog.d("SPLASH_ConfigServletQ.uniteSearch.tag_search_function_module", 2, "received SEARCH_FUNCTION_MODULE_CONFIG IGNORE THIS ACTION  because of SAME VERSION ");
            }
          }
        }
      }
      catch (Exception paramQQAppInterface)
      {
        if (QLog.isColorLevel()) {
          QLog.e("SPLASH_ConfigServletQ.uniteSearch.tag_search_function_module", 2, "received search function module error,cmd : 190" + paramQQAppInterface.toString());
        }
      }
      label382:
      do
      {
        return;
        if (!QLog.isColorLevel()) {
          break;
        }
        QLog.d("SPLASH_ConfigServletQ.uniteSearch.tag_search_function_module", 2, "handleFunctionModuleConfig, content is null");
        break;
      } while (!QLog.isColorLevel());
      Object localObject2 = new StringBuilder().append("receiveAllConfigs|type: 190,msg_content_list is empty ,version: ");
      if (paramConfig != null) {}
      for (paramQQAppInterface = Integer.valueOf(paramConfig.version.get());; paramQQAppInterface = "")
      {
        QLog.d("SPLASH_ConfigServletQ.uniteSearch.tag_search_function_module", 2, paramQQAppInterface);
        return;
      }
      label460:
      localObject2 = null;
      continue;
      label466:
      i += 1;
      continue;
      label473:
      localObject2 = null;
    }
  }
  
  public void c(ConfigurationService.Config paramConfig)
  {
    for (;;)
    {
      int i;
      try
      {
        QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
        if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
        {
          i = 0;
          if (i < paramConfig.content_list.size())
          {
            String str = (String)paramConfig.content_list.get(i);
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 72,content: " + str + ",version: " + paramConfig.version.get());
            }
            int j = paramConfig.version.get();
            if ((j != SharedPreUtils.W(localQQAppInterface.getApp(), localQQAppInterface.c())) || (paramConfig.content_list.size() > 0))
            {
              if (ReadInJoyHelper.a(localQQAppInterface, str))
              {
                if (QLog.isColorLevel()) {
                  QLog.d("SPLASH_ConfigServlet", 2, "received 72 ark config");
                }
                SharedPreUtils.y(getAppRuntime().getApplication(), localQQAppInterface.c(), j);
                break label304;
              }
              if ((!PublicAccountConfigUtil.b((QQAppInterface)getAppRuntime(), str)) || (!QLog.isColorLevel())) {
                continue;
              }
              QLog.d("SPLASH_ConfigServlet", 2, "received READINJOY_FOLDER_CONFIG_CMD save version: " + j);
              continue;
            }
          }
          else
          {
            return;
          }
        }
      }
      catch (Exception paramConfig)
      {
        if (QLog.isColorLevel()) {
          QLog.e("SPLASH_ConfigServlet", 2, "received readinjoy folder config error,cmd : 72");
        }
      }
      while (QLog.isColorLevel())
      {
        QLog.d("SPLASH_ConfigServlet", 2, "received READINJOY_FOLDER_CONFIG_CMD IGNORE THIS ACTION  because of SAME VERSION");
        break;
        if (QLog.isColorLevel())
        {
          QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 72,content_list is empty ,version: " + paramConfig.version.get());
          return;
        }
      }
      label304:
      i += 1;
    }
  }
  
  public void d(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if (QLog.isColorLevel()) {
      QLog.d("HotFriend_SPLASH_ConfigServlet", 2, "handleRespGetHotDaysConfig|type= " + paramConfig.type.get());
    }
    if (paramConfig != null) {}
    for (;;)
    {
      Object localObject2;
      try
      {
        if (paramConfig.type.get() != 146) {
          break label283;
        }
        if ((paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() <= 0)) {
          break label345;
        }
        Object localObject1 = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
        if (localObject1 != null)
        {
          if (((ConfigurationService.Content)localObject1).compress.get() == 1)
          {
            byte[] arrayOfByte = OlympicUtil.a(((ConfigurationService.Content)localObject1).content.get().toByteArray());
            if (arrayOfByte == null) {
              break label340;
            }
            try
            {
              localObject1 = new String(arrayOfByte, "UTF-8");
              if (localObject1 == null) {
                break label345;
              }
              if (QLog.isColorLevel()) {
                QLog.d("HotFriend_SPLASH_ConfigServlet", 2, "handleRespGetHotDaysConfig, config_content is " + (String)localObject1);
              }
              HotReactiveHelper.a(paramQQAppInterface, (String)localObject1, paramConfig.version.get());
              return;
            }
            catch (UnsupportedEncodingException localUnsupportedEncodingException)
            {
              if (!QLog.isColorLevel()) {
                break label346;
              }
              localUnsupportedEncodingException.printStackTrace();
            }
            catch (OutOfMemoryError localOutOfMemoryError)
            {
              if (QLog.isColorLevel()) {
                localOutOfMemoryError.printStackTrace();
              }
              System.gc();
              try
              {
                String str = new String(arrayOfByte, "UTF-8");
              }
              catch (Throwable localThrowable)
              {
                localObject2 = null;
              }
              continue;
            }
          }
          localObject2 = ((ConfigurationService.Content)localObject2).content.get().toStringUtf8();
          continue;
        }
        if (!QLog.isColorLevel()) {
          break label345;
        }
        QLog.d("HotFriend_SPLASH_ConfigServlet", 2, "handleRespGetHotDaysConfig, content is null");
        return;
      }
      catch (Exception paramQQAppInterface)
      {
        if (!QLog.isColorLevel()) {
          break label345;
        }
      }
      QLog.e("HotFriend_SPLASH_ConfigServlet", 2, paramQQAppInterface.toString());
      return;
      label283:
      if (QLog.isColorLevel())
      {
        localObject2 = new StringBuilder().append("content_list is empty ,version: ");
        if (paramConfig != null) {}
        for (paramQQAppInterface = Integer.valueOf(paramConfig.version.get());; paramQQAppInterface = "")
        {
          QLog.d("HotFriend_SPLASH_ConfigServlet", 2, paramQQAppInterface);
          return;
        }
        label340:
        localObject2 = null;
      }
      else
      {
        label345:
        return;
        label346:
        localObject2 = null;
      }
    }
  }
  
  public void d(ConfigurationService.Config paramConfig)
  {
    for (;;)
    {
      int i;
      try
      {
        QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
        if ((paramConfig.content_list != null) && (paramConfig.content_list.size() > 0))
        {
          i = 0;
          if (i < paramConfig.content_list.size())
          {
            Object localObject1 = ((String)paramConfig.content_list.get(i)).trim();
            if (QLog.isColorLevel()) {
              QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 73,content: " + (String)localObject1 + ",version: " + paramConfig.version.get());
            }
            int j = paramConfig.version.get();
            if ((j != SharedPreUtils.y(localQQAppInterface.getApp())) || (paramConfig.content_list.size() > 0))
            {
              Object localObject2 = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(((String)localObject1).getBytes("utf-8")));
              localObject1 = (Element)((Document)localObject2).getElementsByTagName("kandian_setting").item(0);
              localObject2 = (Element)((Document)localObject2).getElementsByTagName("url").item(0);
              localObject1 = ((Element)localObject1).getFirstChild().getNodeValue();
              localObject2 = ((Element)localObject2).getFirstChild().getNodeValue();
              if ((!TextUtils.isEmpty((CharSequence)localObject1)) && (!TextUtils.isEmpty((CharSequence)localObject2))) {
                SharedPreUtils.c(localQQAppInterface.getApp(), (String)localObject2, "1".equals(localObject1));
              }
              SharedPreUtils.r(localQQAppInterface.getApp(), j);
            }
            else if (QLog.isColorLevel())
            {
              QLog.d("SPLASH_ConfigServlet", 2, "received READINJOY_FOLDER_SETTING_CMD IGNORE THIS ACTION  because of SAME VERSION");
            }
          }
        }
      }
      catch (Exception paramConfig)
      {
        if (QLog.isColorLevel()) {
          QLog.e("SPLASH_ConfigServlet", 2, "received readinjoy folder setting config error,cmd : 73");
        }
      }
      while (!QLog.isColorLevel()) {
        return;
      }
      QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 73,content_list is empty ,version: " + paramConfig.version.get());
      return;
      i += 1;
    }
  }
  
  protected void e(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if (QLog.isColorLevel()) {
      QLog.d("zivonchen", 2, "handleShortvideoSyncStoryConfig type = " + paramConfig.type.get());
    }
    int i = SharedPreUtils.A(paramQQAppInterface.getApp());
    int j = paramConfig.version.get();
    if (i == j)
    {
      if (QLog.isColorLevel()) {
        QLog.d("zivonchen", 2, "handleShortvideoSyncStoryConfig version code not changed .");
      }
      return;
    }
    if ((paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() < 1) || (paramConfig.msg_content_list.get(0) == null))
    {
      if (QLog.isColorLevel()) {
        QLog.d("zivonchen", 2, "handleShortvideoSyncStoryConfig data is null!!!");
      }
      SharedPreUtils.i(paramQQAppInterface.getApp(), null);
      SharedPreUtils.t(paramQQAppInterface.getApp(), j);
      return;
    }
    paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
    byte[] arrayOfByte;
    if (paramConfig.compress.get() == 1)
    {
      arrayOfByte = OlympicUtil.a(paramConfig.content.get().toByteArray());
      if (arrayOfByte == null) {}
    }
    for (;;)
    {
      try
      {
        paramConfig = new String(arrayOfByte, "UTF-8");
        if (!TextUtils.isEmpty(paramConfig))
        {
          SharedPreUtils.i(paramQQAppInterface.getApp(), paramConfig);
          SharedPreUtils.t(paramQQAppInterface.getApp(), j);
        }
        if (!QLog.isColorLevel()) {
          break;
        }
        QLog.d("zivonchen", 2, "handleShortvideoSyncStoryConfig() configContent = " + paramConfig);
        return;
      }
      catch (Exception paramConfig)
      {
        if (QLog.isColorLevel()) {
          QLog.w("zivonchen", 2, QLog.getStackTraceString(paramConfig));
        }
        paramConfig = null;
        continue;
      }
      catch (OutOfMemoryError paramConfig)
      {
        if (QLog.isColorLevel()) {
          QLog.w("zivonchen", 2, QLog.getStackTraceString(paramConfig));
        }
        System.gc();
        try
        {
          paramConfig = new String(arrayOfByte, "UTF-8");
        }
        catch (Throwable paramConfig)
        {
          if (QLog.isColorLevel()) {
            QLog.w("zivonchen", 2, QLog.getStackTraceString(paramConfig));
          }
        }
      }
      paramConfig = null;
      continue;
      paramConfig = paramConfig.content.get().toStringUtf8();
    }
  }
  
  void f(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if (paramConfig.type.get() != 147) {}
    for (;;)
    {
      return;
      int i = SharedPreUtils.a(paramQQAppInterface.getApp(), "shop_tab", jdField_a_of_type_JavaLangString);
      int j = paramConfig.version.get();
      if ((i != j) && (paramConfig.content_list != null) && (paramConfig.content_list.size() > 0)) {
        try
        {
          paramConfig = new JSONObject((String)paramConfig.content_list.get(0));
          boolean bool = paramConfig.getBoolean("android");
          SharedPreUtils.a(paramQQAppInterface.getApp(), "shop_tab", jdField_a_of_type_JavaLangString, j);
          paramQQAppInterface = (EcShopAssistantManager)paramQQAppInterface.getManager(87);
          paramQQAppInterface.b(bool);
          paramQQAppInterface.c = paramConfig.optBoolean("preload_web_process", false);
          paramQQAppInterface.a = paramConfig.optLong("stay_time", 5000L);
          paramQQAppInterface.d = paramConfig.optInt("day_limit", 3);
          EcShopAssistantManager.a().edit().putBoolean("preload_web", paramQQAppInterface.c).putLong("stayTime", paramQQAppInterface.a).putInt("dayLimit", paramQQAppInterface.d).commit();
          if (QLog.isColorLevel())
          {
            QLog.i("Ecshop", 2, "current config set tab show:" + bool + ",preload:" + paramQQAppInterface.c + ",stayTime:" + paramQQAppInterface.a + ",dayLimit:" + paramQQAppInterface.d);
            return;
          }
        }
        catch (Exception paramQQAppInterface) {}
      }
    }
  }
  
  protected void g(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if (QLog.isColorLevel()) {
      QLog.d("SPLASH_ConfigServlet", 2, "handleQuickShotShareToStoryConfig type = " + paramConfig.type.get());
    }
    int i = SharedPreUtils.am(paramQQAppInterface.getApp(), paramQQAppInterface.c());
    int j = paramConfig.version.get();
    if (i == j)
    {
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "handleQuickShotShareToStoryConfig version code not changed .");
      }
      return;
    }
    SharedPreUtils.D(paramQQAppInterface.getApp(), paramQQAppInterface.c(), j);
    if ((paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() < 1) || (paramConfig.msg_content_list.get(0) == null))
    {
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "handleQuickShotShareToStoryConfig data is null!!!");
      }
      SharedPreUtils.g(paramQQAppInterface.getApp(), paramQQAppInterface.c(), null);
      return;
    }
    paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
    byte[] arrayOfByte;
    if (paramConfig.compress.get() == 1)
    {
      arrayOfByte = OlympicUtil.a(paramConfig.content.get().toByteArray());
      if (arrayOfByte == null) {}
    }
    for (;;)
    {
      try
      {
        paramConfig = new String(arrayOfByte, "UTF-8");
        if (TextUtils.isEmpty(paramConfig)) {
          break label367;
        }
        SharedPreUtils.g(paramQQAppInterface.getApp(), paramQQAppInterface.c(), paramConfig);
        ((QQStoryManager)paramQQAppInterface.getManager(180)).a(paramConfig);
        if (!QLog.isColorLevel()) {
          break;
        }
        QLog.d("SPLASH_ConfigServlet", 2, "handleQuickShotShareToStoryConfig() configContent = " + paramConfig);
        return;
      }
      catch (Exception paramConfig)
      {
        if (QLog.isColorLevel()) {
          QLog.w("SPLASH_ConfigServlet", 2, QLog.getStackTraceString(paramConfig));
        }
        paramConfig = null;
        continue;
      }
      catch (OutOfMemoryError paramConfig)
      {
        if (QLog.isColorLevel()) {
          QLog.w("SPLASH_ConfigServlet", 2, QLog.getStackTraceString(paramConfig));
        }
        System.gc();
        try
        {
          paramConfig = new String(arrayOfByte, "UTF-8");
        }
        catch (Throwable paramConfig)
        {
          if (QLog.isColorLevel()) {
            QLog.w("SPLASH_ConfigServlet", 2, QLog.getStackTraceString(paramConfig));
          }
        }
      }
      paramConfig = null;
      continue;
      paramConfig = paramConfig.content.get().toStringUtf8();
      continue;
      label367:
      SharedPreUtils.g(paramQQAppInterface.getApp(), paramQQAppInterface.c(), null);
    }
  }
  
  void h(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if (paramConfig.type.get() != 159) {}
    int i;
    int j;
    do
    {
      do
      {
        return;
        i = SharedPreUtils.ao(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
        j = paramConfig.version.get();
      } while ((i == j) || (paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() <= 0));
      i = 0;
    } while (i >= paramConfig.msg_content_list.size());
    Object localObject1 = (ConfigurationService.Content)paramConfig.msg_content_list.get(i);
    if (localObject1 != null)
    {
      if (((ConfigurationService.Content)localObject1).compress.get() != 1) {
        break label670;
      }
      localObject1 = OlympicUtil.a(((ConfigurationService.Content)localObject1).content.get().toByteArray());
      if (localObject1 == null) {
        break label755;
      }
    }
    for (;;)
    {
      try
      {
        localObject1 = new String((byte[])localObject1, "UTF-8");
        if (localObject1 != null) {}
        try
        {
          localObject1 = new JSONObject((String)localObject1);
          if (i == 0)
          {
            if (((JSONObject)localObject1).optInt("arkmsgai_disable") == 0) {
              break label686;
            }
            bool1 = true;
            SharedPreUtils.z(paramQQAppInterface.getApp(), j, jdField_a_of_type_JavaLangString);
            SharedPreUtils.d(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, bool1);
            ArkAiAppCenter.b(paramQQAppInterface, bool1);
            if (((JSONObject)localObject1).optInt("arkmsgai_msgflow_disable") == 0) {
              break label692;
            }
            bool2 = true;
            SharedPreUtils.e(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, bool2);
            ArkAiAppCenter.d = bool2;
            if (((JSONObject)localObject1).optInt("arkmsgai_input_disable") == 0) {
              break label698;
            }
            bool3 = true;
            SharedPreUtils.f(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, bool3);
            ArkAiAppCenter.e = bool3;
            if (((JSONObject)localObject1).optInt("ark_at_babyq_disable", 1) == 0) {
              break label704;
            }
            bool4 = true;
            SharedPreUtils.g(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, bool4);
            ArkAiAppCenter.f = bool4;
            if (((JSONObject)localObject1).optInt("ark_app_manage_panel_disable", 1) == 0) {
              break label710;
            }
            bool5 = true;
            SharedPreUtils.h(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, bool5);
            ArkAiAppCenter.g = bool5;
            int k = ((JSONObject)localObject1).optInt("ark_service_type", 0);
            SharedPreUtils.F(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, k);
            ArkAiAppCenter.jdField_a_of_type_Int = k;
            if (((JSONObject)localObject1).optInt("ark_download_by_yyb_disable", 1) == 0) {
              break label716;
            }
            bool6 = true;
            SharedPreUtils.i(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, bool6);
            ArkAiAppCenter.n = bool6;
            if (QLog.isColorLevel()) {
              QLog.i("ArkApp.AI_SPLASH_ConfigServlet", 2, "handleArkMsgAIDisableConfig disable=" + bool1 + ", msgFlowDisable=" + bool2 + ", inputDisable=" + bool3 + ", isArkAtBabyqDisable=" + bool4 + ", isAppManagePanelDisable=" + bool5 + ", arkServiceType=" + k + ", download_by_yyb_disable" + bool6);
            }
          }
          SharedPreferences.Editor localEditor = BaseApplicationImpl.getApplication().getSharedPreferences("rqd_catcher_pref", 4).edit();
          if (((JSONObject)localObject1).has("disable_rqd_catcher"))
          {
            bool1 = ((JSONObject)localObject1).optBoolean("disable_rqd_catcher");
            localEditor.putBoolean("disable_rqd_catcher", bool1).commit();
            if (QLog.isColorLevel()) {
              QLog.d("rqd_catcher_pref", 2, "disableRqdCatcher=" + bool1);
            }
          }
          if (((JSONObject)localObject1).has("enable_rqd_debug_log"))
          {
            bool1 = ((JSONObject)localObject1).optBoolean("enable_rqd_debug_log");
            localEditor.putBoolean("enable_rqd_debug_log", bool1).commit();
            if (QLog.isColorLevel()) {
              QLog.d("rqd_catcher_pref", 2, "enableRqdDebugLog=" + bool1);
            }
          }
        }
        catch (Exception localException2)
        {
          boolean bool1;
          boolean bool2;
          boolean bool3;
          boolean bool4;
          boolean bool5;
          boolean bool6;
          String str;
          QLog.d("ArkApp.AI_SPLASH_ConfigServlet", 1, "handleArkMsgAIDisableConfig parse config_content exception=" + localException2);
          continue;
        }
        i += 1;
      }
      catch (Exception localException1)
      {
        QLog.d("ArkApp.AI_SPLASH_ConfigServlet", 2, "handleArkMsgAIDisableConfig|uncompress failed");
        str = null;
        continue;
      }
      label670:
      str = str.content.get().toStringUtf8();
      continue;
      label686:
      bool1 = false;
      continue;
      label692:
      bool2 = false;
      continue;
      label698:
      bool3 = false;
      continue;
      label704:
      bool4 = false;
      continue;
      label710:
      bool5 = false;
      continue;
      label716:
      bool6 = false;
      continue;
      label755:
      Object localObject2 = null;
    }
  }
  
  void i(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if (paramConfig.type.get() != 170) {
      return;
    }
    int i = SharedPreUtils.aq(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
    int j = paramConfig.version.get();
    if (i == j)
    {
      QLog.i("ArkApp.DictConfig", 1, String.format("handleArkAIDictConfig, req-version equals to rsp-version, ver=%d", new Object[] { Integer.valueOf(i) }));
      return;
    }
    if ((paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() == 0))
    {
      QLog.i("ArkApp.DictConfig", 1, String.format("handleArkAIDictConfig, msg content list is empty", new Object[0]));
      return;
    }
    paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
    if (paramConfig == null)
    {
      QLog.i("ArkApp.DictConfig", 1, String.format("handleArkAIDictConfig, content is null", new Object[0]));
      return;
    }
    byte[] arrayOfByte;
    if (paramConfig.compress.get() == 1)
    {
      arrayOfByte = OlympicUtil.a(paramConfig.content.get().toByteArray());
      if (arrayOfByte == null) {
        break label327;
      }
    }
    for (;;)
    {
      try
      {
        paramConfig = new String(arrayOfByte, "UTF-8");
        if (paramConfig == null) {
          break;
        }
        try
        {
          new JSONObject(paramConfig);
          SharedPreUtils.i(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, paramConfig);
          SharedPreUtils.G(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, j);
          ((ArkAppCenter)paramQQAppInterface.getManager(120)).a().a();
          QLog.i("ArkApp.DictConfig", 1, String.format("handleArkAIDictConfig, update dict config success, version=%d", new Object[] { Integer.valueOf(j) }));
          return;
        }
        catch (Exception paramQQAppInterface)
        {
          QLog.i("ArkApp.DictConfig", 1, String.format("handleArkAIDictConfig, parse json failed, msg=%s", new Object[] { paramQQAppInterface.getMessage() }));
          return;
        }
      }
      catch (Exception paramConfig)
      {
        QLog.i("ArkApp.DictConfig", 1, String.format("handleArkAIDictConfig, uncompress failed, buf-len=%d", new Object[] { Integer.valueOf(arrayOfByte.length) }));
        paramConfig = null;
        continue;
      }
      paramConfig = paramConfig.content.get().toStringUtf8();
      continue;
      label327:
      paramConfig = null;
    }
  }
  
  void j(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    int i = SharedPreUtils.aw(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
    int j = paramConfig.version.get();
    if ((i != j) && (paramConfig.msg_content_list != null) && (paramConfig.msg_content_list.size() > 0))
    {
      paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
      if (paramConfig != null)
      {
        if (paramConfig.compress.get() != 1) {
          break label219;
        }
        paramConfig = OlympicUtil.a(paramConfig.content.get().toByteArray());
        if (paramConfig == null) {
          break label239;
        }
      }
    }
    for (;;)
    {
      try
      {
        paramConfig = new String(paramConfig, "UTF-8");
        if (paramConfig == null) {}
      }
      catch (Exception paramConfig)
      {
        try
        {
          paramConfig = new JSONObject(paramConfig);
          boolean bool1 = paramConfig.getBoolean("wifiAutoPreDown");
          boolean bool2 = paramConfig.getBoolean("noSafeDown");
          SharedPreUtils.m(paramQQAppInterface.getApp(), "wifiAutoPreDown", "" + bool1);
          SharedPreUtils.m(paramQQAppInterface.getApp(), "noSafeDown", "" + bool2);
          SharedPreUtils.M(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, j);
          return;
        }
        catch (Exception paramQQAppInterface)
        {
          paramQQAppInterface.printStackTrace();
          return;
        }
        paramConfig = paramConfig;
        QLog.d("SPLASH_ConfigServlet", 2, "handleQQPreDownYYBConfig|uncompress failed");
        paramConfig = null;
        continue;
      }
      label219:
      paramConfig = paramConfig.content.get().toStringUtf8();
      continue;
      label239:
      paramConfig = null;
    }
  }
  
  void k(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    int i = SharedPreUtils.au(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
    int j = paramConfig.version.get();
    if ((i != j) && (paramConfig.msg_content_list != null) && (paramConfig.msg_content_list.size() > 0))
    {
      paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
      if (paramConfig != null)
      {
        if (paramConfig.compress.get() != 1) {
          break label206;
        }
        paramConfig = OlympicUtil.a(paramConfig.content.get().toByteArray());
        if (paramConfig == null) {
          break label226;
        }
      }
    }
    for (;;)
    {
      try
      {
        paramConfig = new String(paramConfig, "UTF-8");
        if (paramConfig == null) {}
      }
      catch (Exception paramConfig)
      {
        try
        {
          Object localObject = new JSONObject(paramConfig);
          paramConfig = ((JSONObject)localObject).getString("url");
          String str = ((JSONObject)localObject).getString("wantWord");
          localObject = ((JSONObject)localObject).getString("thxWord");
          SharedPreUtils.l(paramQQAppInterface.getApp(), "url", paramConfig);
          SharedPreUtils.l(paramQQAppInterface.getApp(), "thxWord", (String)localObject);
          SharedPreUtils.l(paramQQAppInterface.getApp(), "wantWord", str);
          SharedPreUtils.L(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, j);
          return;
        }
        catch (Exception paramQQAppInterface)
        {
          paramQQAppInterface.printStackTrace();
          return;
        }
        paramConfig = paramConfig;
        QLog.d("SPLASH_ConfigServlet", 2, "handleBuluoConfig|uncompress failed");
        paramConfig = null;
        continue;
      }
      label206:
      paramConfig = paramConfig.content.get().toStringUtf8();
      continue;
      label226:
      paramConfig = null;
    }
  }
  
  void l(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if (paramConfig.type.get() != 165) {}
    int j;
    do
    {
      int i;
      do
      {
        return;
        i = SharedPreUtils.ax(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
        j = paramConfig.version.get();
      } while ((i == j) || (paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() <= 0));
      paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
    } while (paramConfig == null);
    if (paramConfig.compress.get() == 1)
    {
      paramConfig = OlympicUtil.a(paramConfig.content.get().toByteArray());
      if (paramConfig == null) {
        break label194;
      }
    }
    for (;;)
    {
      try
      {
        paramConfig = new String(paramConfig, "UTF-8");
        if (paramConfig == null) {
          break;
        }
        try
        {
          boolean bool = new JSONObject(paramConfig).getBoolean("isShowBuluoNumRedDot");
          SharedPreUtils.N(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, j);
          SharedPreUtils.k(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, bool);
          return;
        }
        catch (Exception paramQQAppInterface)
        {
          paramQQAppInterface.printStackTrace();
          return;
        }
      }
      catch (Exception paramConfig)
      {
        QLog.d("SPLASH_ConfigServlet", 2, "handleBuluoConfig|uncompress failed");
        paramConfig = null;
        continue;
      }
      paramConfig = paramConfig.content.get().toStringUtf8();
      continue;
      label194:
      paramConfig = null;
    }
  }
  
  void m(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    int j = HotPicManager.a(paramQQAppInterface);
    int i = paramConfig.version.get();
    if (QLog.isColorLevel()) {
      QLog.i("SPLASH_ConfigServlet", 2, "handleHotPicConfig l :" + j + " s : " + i);
    }
    if ((j != i) && (paramConfig.msg_content_list != null) && (paramConfig.msg_content_list.size() > 0))
    {
      paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
      if (paramConfig != null)
      {
        if (paramConfig.compress.get() != 1) {
          break label296;
        }
        paramConfig = OlympicUtil.a(paramConfig.content.get().toByteArray());
        if (paramConfig == null) {
          break label339;
        }
      }
    }
    for (;;)
    {
      try
      {
        paramConfig = new String(paramConfig, "UTF-8");
        if (paramConfig != null) {
          QLog.i("HotPicManager", 1, "handleHotPicConfig content" + paramConfig);
        }
      }
      catch (Exception paramConfig)
      {
        try
        {
          paramConfig = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(paramConfig.getBytes("utf-8")));
          NodeList localNodeList = paramConfig.getElementsByTagName("hotpic_config");
          if ((localNodeList != null) && (localNodeList.getLength() > 0))
          {
            j = Integer.parseInt(paramConfig.getElementsByTagName("entry").item(0).getFirstChild().getNodeValue());
            HotPicManager.a(paramQQAppInterface, i);
            HotPicManager.a(paramQQAppInterface).b(j);
          }
          return;
        }
        catch (Exception paramQQAppInterface)
        {
          QLog.e("HotPicManager", 1, "handleHotPicConfig failed" + paramQQAppInterface);
          return;
        }
        paramConfig = paramConfig;
        QLog.e("HotPicManager", 1, "handleHotPicConfig|uncompress failed" + paramConfig);
        paramConfig = null;
        continue;
      }
      label296:
      paramConfig = paramConfig.content.get().toStringUtf8();
      continue;
      label339:
      paramConfig = null;
    }
  }
  
  void n(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if (QLog.isColorLevel()) {
      QLog.d("SPLASH_ConfigServlet", 2, "received PUBLIC_ACCOUNT_QQ_MAIL_CONFIG response");
    }
    for (;;)
    {
      int i;
      try
      {
        if ((paramConfig.msg_content_list != null) && (paramConfig.msg_content_list.size() > 0))
        {
          int j = paramConfig.version.get();
          int k = PublicAccountConfigUtil.c(paramQQAppInterface);
          if (j != k)
          {
            i = 0;
            if (i < paramConfig.msg_content_list.size())
            {
              Object localObject = (ConfigurationService.Content)paramConfig.msg_content_list.get(i);
              if (localObject != null)
              {
                if (((ConfigurationService.Content)localObject).compress.get() == 1)
                {
                  localObject = OlympicUtil.a(((ConfigurationService.Content)localObject).content.get().toByteArray());
                  if (localObject == null) {
                    break label310;
                  }
                  try
                  {
                    localObject = new String((byte[])localObject, "UTF-8");
                    if (QLog.isColorLevel()) {
                      QLog.d("SPLASH_ConfigServlet", 2, "receiveAllConfigs|type: 184, version:" + paramConfig.version.get() + ", content:" + (String)localObject);
                    }
                    PublicAccountConfigUtil.a(paramQQAppInterface, (String)localObject, j);
                  }
                  catch (Exception localException)
                  {
                    localException.printStackTrace();
                    break label310;
                  }
                }
                else
                {
                  str = localException.content.get().toStringUtf8();
                  continue;
                }
              }
              else if (QLog.isColorLevel()) {
                QLog.d("SPLASH_ConfigServlet", 2, "received PUBLIC_ACCOUNT_QQ_MAIL_CONFIG remote version: " + j + " | localVersion: " + k);
              }
            }
          }
        }
      }
      catch (Exception paramQQAppInterface)
      {
        if (QLog.isColorLevel()) {
          QLog.e("SPLASH_ConfigServlet", 2, "received PUBLIC_ACCOUNT_QQ_MAIL_CONFIG error", paramQQAppInterface);
        }
        paramQQAppInterface.printStackTrace();
      }
      while (!QLog.isColorLevel()) {
        return;
      }
      QLog.d("SPLASH_ConfigServlet", 2, "received PUBLIC_ACCOUNT_QQ_MAIL_CONFIG content_list is empty");
      return;
      i += 1;
      continue;
      label310:
      String str = null;
    }
  }
  
  /* Error */
  void o(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    // Byte code:
    //   0: aload_2
    //   1: getfield 90	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:type	Lcom/tencent/mobileqq/pb/PBInt32Field;
    //   4: invokevirtual 79	com/tencent/mobileqq/pb/PBInt32Field:get	()I
    //   7: sipush 189
    //   10: if_icmpeq +4 -> 14
    //   13: return
    //   14: aload_1
    //   15: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   18: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   21: invokestatic 2255	com/tencent/mobileqq/utils/SharedPreUtils:aE	(Landroid/content/Context;Ljava/lang/String;)I
    //   24: istore_3
    //   25: aload_2
    //   26: getfield 73	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:version	Lcom/tencent/mobileqq/pb/PBInt32Field;
    //   29: invokevirtual 79	com/tencent/mobileqq/pb/PBInt32Field:get	()I
    //   32: istore 6
    //   34: iload 6
    //   36: iload_3
    //   37: if_icmpeq -24 -> 13
    //   40: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   43: ifeq +30 -> 73
    //   46: ldc 63
    //   48: iconst_2
    //   49: new 122	java/lang/StringBuilder
    //   52: dup
    //   53: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   56: ldc_w 7019
    //   59: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   62: iload 6
    //   64: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   67: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   70: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   73: aload_2
    //   74: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   77: ifnull +486 -> 563
    //   80: aload_2
    //   81: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   84: invokevirtual 117	com/tencent/mobileqq/pb/PBRepeatMessageField:size	()I
    //   87: ifle +476 -> 563
    //   90: aload_2
    //   91: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   94: invokevirtual 117	com/tencent/mobileqq/pb/PBRepeatMessageField:size	()I
    //   97: istore 7
    //   99: iconst_m1
    //   100: istore_3
    //   101: iconst_0
    //   102: istore 4
    //   104: iload 4
    //   106: iload 7
    //   108: if_icmpge +455 -> 563
    //   111: aload_2
    //   112: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   115: iload 4
    //   117: invokevirtual 147	com/tencent/mobileqq/pb/PBRepeatMessageField:get	(I)Lcom/tencent/mobileqq/pb/MessageMicro;
    //   120: checkcast 149	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content
    //   123: astore 9
    //   125: aload 9
    //   127: ifnull +433 -> 560
    //   130: aload 9
    //   132: getfield 153	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:task_id	Lcom/tencent/mobileqq/pb/PBUInt32Field;
    //   135: invokevirtual 156	com/tencent/mobileqq/pb/PBUInt32Field:get	()I
    //   138: istore 5
    //   140: aload 9
    //   142: getfield 913	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:compress	Lcom/tencent/mobileqq/pb/PBUInt32Field;
    //   145: invokevirtual 156	com/tencent/mobileqq/pb/PBUInt32Field:get	()I
    //   148: iconst_1
    //   149: if_icmpne +148 -> 297
    //   152: aload 9
    //   154: getfield 917	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:content	Lcom/tencent/mobileqq/pb/PBBytesField;
    //   157: invokevirtual 922	com/tencent/mobileqq/pb/PBBytesField:get	()Lcom/tencent/mobileqq/pb/ByteStringMicro;
    //   160: invokevirtual 928	com/tencent/mobileqq/pb/ByteStringMicro:toByteArray	()[B
    //   163: invokestatic 933	com/tencent/mobileqq/olympic/utils/OlympicUtil:a	([B)[B
    //   166: astore 9
    //   168: aload 9
    //   170: ifnull +406 -> 576
    //   173: new 240	java/lang/String
    //   176: dup
    //   177: aload 9
    //   179: ldc_w 935
    //   182: invokespecial 938	java/lang/String:<init>	([BLjava/lang/String;)V
    //   185: astore 9
    //   187: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   190: ifeq +41 -> 231
    //   193: ldc 63
    //   195: iconst_2
    //   196: new 122	java/lang/StringBuilder
    //   199: dup
    //   200: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   203: ldc_w 7021
    //   206: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   209: iload 5
    //   211: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   214: ldc_w 7023
    //   217: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   220: aload 9
    //   222: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   225: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   228: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   231: iload 5
    //   233: iload_3
    //   234: if_icmpge +79 -> 313
    //   237: ldc 63
    //   239: iconst_1
    //   240: new 122	java/lang/StringBuilder
    //   243: dup
    //   244: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   247: ldc_w 7025
    //   250: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   253: iload 5
    //   255: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   258: ldc_w 7027
    //   261: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   264: iload_3
    //   265: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   268: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   271: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   274: iload 4
    //   276: iconst_1
    //   277: iadd
    //   278: istore 4
    //   280: goto -176 -> 104
    //   283: astore 9
    //   285: ldc 63
    //   287: iconst_1
    //   288: ldc_w 7029
    //   291: invokestatic 615	com/tencent/qphone/base/util/QLog:e	(Ljava/lang/String;ILjava/lang/String;)V
    //   294: goto -20 -> 274
    //   297: aload 9
    //   299: getfield 917	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:content	Lcom/tencent/mobileqq/pb/PBBytesField;
    //   302: invokevirtual 922	com/tencent/mobileqq/pb/PBBytesField:get	()Lcom/tencent/mobileqq/pb/ByteStringMicro;
    //   305: invokevirtual 972	com/tencent/mobileqq/pb/ByteStringMicro:toStringUtf8	()Ljava/lang/String;
    //   308: astore 9
    //   310: goto -123 -> 187
    //   313: new 242	org/json/JSONObject
    //   316: dup
    //   317: new 240	java/lang/String
    //   320: dup
    //   321: aload 9
    //   323: ldc_w 433
    //   326: invokevirtual 437	java/lang/String:getBytes	(Ljava/lang/String;)[B
    //   329: invokespecial 4476	java/lang/String:<init>	([B)V
    //   332: invokespecial 245	org/json/JSONObject:<init>	(Ljava/lang/String;)V
    //   335: astore 9
    //   337: aload_1
    //   338: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   341: ldc_w 7031
    //   344: iconst_0
    //   345: invokevirtual 639	com/tencent/qphone/base/util/BaseApplication:getSharedPreferences	(Ljava/lang/String;I)Landroid/content/SharedPreferences;
    //   348: invokeinterface 645 1 0
    //   353: astore 10
    //   355: aload 9
    //   357: ldc_w 7033
    //   360: invokevirtual 251	org/json/JSONObject:has	(Ljava/lang/String;)Z
    //   363: ifeq +66 -> 429
    //   366: aload 9
    //   368: ldc_w 7033
    //   371: invokevirtual 737	org/json/JSONObject:optInt	(Ljava/lang/String;)I
    //   374: putstatic 7036	com/tencent/mobileqq/emoticon/EmojiStickerManager:f	I
    //   377: getstatic 7036	com/tencent/mobileqq/emoticon/EmojiStickerManager:f	I
    //   380: ifgt +9 -> 389
    //   383: getstatic 7037	com/tencent/mobileqq/emoticon/EmojiStickerManager:c	I
    //   386: putstatic 7036	com/tencent/mobileqq/emoticon/EmojiStickerManager:f	I
    //   389: aload 10
    //   391: new 122	java/lang/StringBuilder
    //   394: dup
    //   395: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   398: ldc_w 7039
    //   401: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   404: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   407: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   410: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   413: getstatic 7036	com/tencent/mobileqq/emoticon/EmojiStickerManager:f	I
    //   416: invokeinterface 954 3 0
    //   421: pop
    //   422: aload 10
    //   424: invokeinterface 2558 1 0
    //   429: aload 9
    //   431: ldc_w 7041
    //   434: invokevirtual 251	org/json/JSONObject:has	(Ljava/lang/String;)Z
    //   437: ifeq +67 -> 504
    //   440: aload 9
    //   442: ldc_w 7041
    //   445: invokevirtual 737	org/json/JSONObject:optInt	(Ljava/lang/String;)I
    //   448: putstatic 7042	com/tencent/mobileqq/emoticon/EmojiStickerManager:e	I
    //   451: getstatic 7042	com/tencent/mobileqq/emoticon/EmojiStickerManager:e	I
    //   454: ifgt +9 -> 463
    //   457: getstatic 7037	com/tencent/mobileqq/emoticon/EmojiStickerManager:c	I
    //   460: putstatic 7042	com/tencent/mobileqq/emoticon/EmojiStickerManager:e	I
    //   463: aload 10
    //   465: new 122	java/lang/StringBuilder
    //   468: dup
    //   469: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   472: ldc_w 7044
    //   475: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   478: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   481: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   484: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   487: getstatic 7042	com/tencent/mobileqq/emoticon/EmojiStickerManager:e	I
    //   490: invokeinterface 954 3 0
    //   495: pop
    //   496: aload 10
    //   498: invokeinterface 656 1 0
    //   503: pop
    //   504: aload 9
    //   506: ldc_w 7046
    //   509: invokevirtual 251	org/json/JSONObject:has	(Ljava/lang/String;)Z
    //   512: ifeq +23 -> 535
    //   515: aload 9
    //   517: ldc_w 7046
    //   520: invokevirtual 737	org/json/JSONObject:optInt	(Ljava/lang/String;)I
    //   523: iconst_1
    //   524: if_icmpne +17 -> 541
    //   527: iconst_1
    //   528: istore 8
    //   530: iload 8
    //   532: invokestatic 7049	com/tencent/biz/flatbuffers/FlatBuffersParser:a	(Z)V
    //   535: iload 5
    //   537: istore_3
    //   538: goto -264 -> 274
    //   541: iconst_0
    //   542: istore 8
    //   544: goto -14 -> 530
    //   547: astore 9
    //   549: ldc 63
    //   551: iconst_1
    //   552: ldc_w 7051
    //   555: aload 9
    //   557: invokestatic 805	com/tencent/qphone/base/util/QLog:e	(Ljava/lang/String;ILjava/lang/String;Ljava/lang/Throwable;)V
    //   560: goto -286 -> 274
    //   563: aload_1
    //   564: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   567: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   570: iload 6
    //   572: invokestatic 7053	com/tencent/mobileqq/utils/SharedPreUtils:T	(Landroid/content/Context;Ljava/lang/String;I)V
    //   575: return
    //   576: aconst_null
    //   577: astore 9
    //   579: goto -392 -> 187
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	582	0	this	ConfigServlet
    //   0	582	1	paramQQAppInterface	QQAppInterface
    //   0	582	2	paramConfig	ConfigurationService.Config
    //   24	514	3	i	int
    //   102	177	4	j	int
    //   138	398	5	k	int
    //   32	539	6	m	int
    //   97	12	7	n	int
    //   528	15	8	bool	boolean
    //   123	98	9	localObject1	Object
    //   283	15	9	localException1	Exception
    //   308	208	9	localObject2	Object
    //   547	9	9	localException2	Exception
    //   577	1	9	localObject3	Object
    //   353	144	10	localEditor	SharedPreferences.Editor
    // Exception table:
    //   from	to	target	type
    //   173	187	283	java/lang/Exception
    //   187	231	547	java/lang/Exception
    //   237	274	547	java/lang/Exception
    //   313	389	547	java/lang/Exception
    //   389	429	547	java/lang/Exception
    //   429	463	547	java/lang/Exception
    //   463	504	547	java/lang/Exception
    //   504	527	547	java/lang/Exception
    //   530	535	547	java/lang/Exception
  }
  
  public void onReceive(Intent paramIntent, FromServiceMsg paramFromServiceMsg)
  {
    QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
    int[] arrayOfInt = paramIntent.getIntArrayExtra("k_cmd_type");
    boolean bool = paramFromServiceMsg.isSuccess();
    if ((arrayOfInt == null) || (arrayOfInt.length == 0)) {}
    do
    {
      return;
      if (QLog.isColorLevel())
      {
        int i = 0;
        while (i < arrayOfInt.length)
        {
          QLog.i("SPLASH_ConfigServlet", 2, "onReceive|shouldReceive cmd: " + arrayOfInt[i] + ",length: " + arrayOfInt.length);
          i += 1;
        }
      }
      localObject = paramFromServiceMsg.getWupBuffer();
      if ((localObject != null) && (localObject.length >= 4)) {
        break;
      }
    } while (!QLog.isColorLevel());
    QLog.d("SPLASH_ConfigServlet", 2, "wup buf is null!!!");
    return;
    paramFromServiceMsg.putWupBuffer(a((byte[])localObject));
    Object localObject = new ConfigurationService.RespGetConfig();
    try
    {
      ((ConfigurationService.RespGetConfig)localObject).mergeFrom(paramFromServiceMsg.getWupBuffer());
      try
      {
        a((ConfigurationService.RespGetConfig)localObject, localQQAppInterface, paramIntent, arrayOfInt, bool);
        return;
      }
      catch (Exception paramIntent) {}
      return;
    }
    catch (InvalidProtocolBufferMicroException paramIntent)
    {
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "error: " + paramIntent.toString());
      }
      paramIntent.printStackTrace();
    }
  }
  
  public void onSend(Intent paramIntent, Packet paramPacket)
  {
    QQAppInterface localQQAppInterface = (QQAppInterface)getAppRuntime();
    int[] arrayOfInt = paramIntent.getIntArrayExtra("k_cmd_type");
    if ((arrayOfInt == null) || (arrayOfInt.length == 0)) {
      return;
    }
    if (QLog.isColorLevel())
    {
      int i = 0;
      while (i < arrayOfInt.length)
      {
        QLog.i("SPLASH_ConfigServlet", 2, "onSend. cmd: " + arrayOfInt[i] + ",length: " + arrayOfInt.length);
        i += 1;
      }
    }
    a(localQQAppInterface, paramIntent, arrayOfInt, paramPacket);
  }
  
  void p(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if (paramConfig.type.get() != 207) {}
    int i;
    int j;
    do
    {
      return;
      i = SharedPreUtils.aF(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
      j = paramConfig.version.get();
    } while (j == i);
    if (QLog.isColorLevel()) {
      QLog.i("SPLASH_ConfigServlet", 2, "handleWebcgiWhiteListConfig, new version : " + j);
    }
    if ((paramConfig.msg_content_list != null) && (paramConfig.msg_content_list.size() > 0))
    {
      QLog.i("SPLASH_ConfigServlet", 1, "handleWebcgiWhiteListConfig, content_list.size : " + paramConfig.msg_content_list.size());
      paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
      if ((paramConfig != null) && (paramConfig.content.has()))
      {
        if (paramConfig.compress.get() != 1) {
          break label362;
        }
        paramConfig = OlympicUtil.a(paramConfig.content.get().toByteArray());
        if (paramConfig == null) {
          break label406;
        }
      }
    }
    for (;;)
    {
      try
      {
        paramConfig = new String(paramConfig, "UTF-8");
        if (paramConfig != null) {}
        try
        {
          if (QLog.isColorLevel()) {
            QLog.i("SPLASH_ConfigServlet", 2, "receive WebcgiWhiteList: " + paramConfig);
          }
          SharedPreferences.Editor localEditor = paramQQAppInterface.getApp().getSharedPreferences("sp_cgi_whitelist", 4).edit();
          paramConfig = new JSONObject(paramConfig);
          JSONArray localJSONArray = paramConfig.optJSONArray("whiteList");
          if (localJSONArray != null) {
            localEditor.putString("whitelist_config_json", localJSONArray.toString());
          }
          paramConfig = paramConfig.optJSONObject("jumpLimit");
          if (paramConfig != null) {
            localEditor.putString("max_verify_times", paramConfig.toString());
          }
          localEditor.commit();
        }
        catch (Exception paramConfig)
        {
          QLog.e("SPLASH_ConfigServlet", 1, "handleWebcgiWhiteListConfig failed" + paramConfig);
          continue;
        }
        SharedPreUtils.U(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, j);
        return;
      }
      catch (Exception paramConfig)
      {
        QLog.e("SPLASH_ConfigServlet", 1, "handleWebcgiWhiteListConfig|uncompress failed" + paramConfig);
        paramConfig = null;
        continue;
      }
      label362:
      paramConfig = paramConfig.content.get().toStringUtf8();
      continue;
      label406:
      paramConfig = null;
    }
  }
  
  /* Error */
  void q(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    // Byte code:
    //   0: aload_2
    //   1: getfield 90	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:type	Lcom/tencent/mobileqq/pb/PBInt32Field;
    //   4: invokevirtual 79	com/tencent/mobileqq/pb/PBInt32Field:get	()I
    //   7: sipush 191
    //   10: if_icmpeq +4 -> 14
    //   13: return
    //   14: aload_1
    //   15: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   18: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   21: invokestatic 2263	com/tencent/mobileqq/utils/SharedPreUtils:aL	(Landroid/content/Context;Ljava/lang/String;)I
    //   24: istore_3
    //   25: aload_2
    //   26: getfield 73	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:version	Lcom/tencent/mobileqq/pb/PBInt32Field;
    //   29: invokevirtual 79	com/tencent/mobileqq/pb/PBInt32Field:get	()I
    //   32: istore 4
    //   34: iload 4
    //   36: iload_3
    //   37: if_icmpeq -24 -> 13
    //   40: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   43: ifeq +30 -> 73
    //   46: ldc 63
    //   48: iconst_2
    //   49: new 122	java/lang/StringBuilder
    //   52: dup
    //   53: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   56: ldc_w 7120
    //   59: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   62: iload 4
    //   64: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   67: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   70: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   73: aload_2
    //   74: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   77: ifnull -64 -> 13
    //   80: aload_2
    //   81: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   84: invokevirtual 117	com/tencent/mobileqq/pb/PBRepeatMessageField:size	()I
    //   87: ifle -74 -> 13
    //   90: aload_2
    //   91: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   94: iconst_0
    //   95: invokevirtual 147	com/tencent/mobileqq/pb/PBRepeatMessageField:get	(I)Lcom/tencent/mobileqq/pb/MessageMicro;
    //   98: checkcast 149	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content
    //   101: astore_2
    //   102: aload_2
    //   103: ifnull -90 -> 13
    //   106: aload_2
    //   107: getfield 913	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:compress	Lcom/tencent/mobileqq/pb/PBUInt32Field;
    //   110: invokevirtual 156	com/tencent/mobileqq/pb/PBUInt32Field:get	()I
    //   113: iconst_1
    //   114: if_icmpne +349 -> 463
    //   117: aload_2
    //   118: getfield 917	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:content	Lcom/tencent/mobileqq/pb/PBBytesField;
    //   121: invokevirtual 922	com/tencent/mobileqq/pb/PBBytesField:get	()Lcom/tencent/mobileqq/pb/ByteStringMicro;
    //   124: invokevirtual 928	com/tencent/mobileqq/pb/ByteStringMicro:toByteArray	()[B
    //   127: invokestatic 933	com/tencent/mobileqq/olympic/utils/OlympicUtil:a	([B)[B
    //   130: astore_2
    //   131: aload_2
    //   132: ifnull +442 -> 574
    //   135: new 240	java/lang/String
    //   138: dup
    //   139: aload_2
    //   140: ldc_w 935
    //   143: invokespecial 938	java/lang/String:<init>	([BLjava/lang/String;)V
    //   146: astore_2
    //   147: aload_2
    //   148: ifnull -135 -> 13
    //   151: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   154: ifeq +29 -> 183
    //   157: ldc 63
    //   159: iconst_2
    //   160: new 122	java/lang/StringBuilder
    //   163: dup
    //   164: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   167: ldc_w 7122
    //   170: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   173: aload_2
    //   174: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   177: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   180: invokestatic 141	com/tencent/qphone/base/util/QLog:d	(Ljava/lang/String;ILjava/lang/String;)V
    //   183: new 242	org/json/JSONObject
    //   186: dup
    //   187: aload_2
    //   188: invokespecial 245	org/json/JSONObject:<init>	(Ljava/lang/String;)V
    //   191: astore 5
    //   193: aload 5
    //   195: ifnull -182 -> 13
    //   198: aload 5
    //   200: invokevirtual 7123	org/json/JSONObject:length	()I
    //   203: ifle -190 -> 13
    //   206: new 113	java/util/ArrayList
    //   209: dup
    //   210: invokespecial 114	java/util/ArrayList:<init>	()V
    //   213: astore_2
    //   214: aload 5
    //   216: invokevirtual 7126	org/json/JSONObject:keys	()Ljava/util/Iterator;
    //   219: astore 6
    //   221: aload 6
    //   223: invokeinterface 234 1 0
    //   228: ifeq +310 -> 538
    //   231: aload 6
    //   233: invokeinterface 238 1 0
    //   238: checkcast 240	java/lang/String
    //   241: astore 7
    //   243: aload 5
    //   245: aload 7
    //   247: invokevirtual 1093	org/json/JSONObject:optJSONObject	(Ljava/lang/String;)Lorg/json/JSONObject;
    //   250: astore 8
    //   252: new 5922	com/tencent/mobileqq/data/AppGuideTipsConfig
    //   255: dup
    //   256: invokespecial 5923	com/tencent/mobileqq/data/AppGuideTipsConfig:<init>	()V
    //   259: astore 9
    //   261: aload 9
    //   263: aload 7
    //   265: putfield 7129	com/tencent/mobileqq/data/AppGuideTipsConfig:tipsType	Ljava/lang/String;
    //   268: aload 9
    //   270: aload 8
    //   272: ldc_w 940
    //   275: invokevirtual 541	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
    //   278: putfield 5932	com/tencent/mobileqq/data/AppGuideTipsConfig:switchKey	Ljava/lang/String;
    //   281: aload 9
    //   283: aload 8
    //   285: ldc_w 5934
    //   288: invokevirtual 541	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
    //   291: invokestatic 487	java/lang/Integer:valueOf	(Ljava/lang/String;)Ljava/lang/Integer;
    //   294: invokevirtual 490	java/lang/Integer:intValue	()I
    //   297: putfield 5937	com/tencent/mobileqq/data/AppGuideTipsConfig:maxCount	I
    //   300: aload 9
    //   302: aload 8
    //   304: ldc_w 5939
    //   307: invokevirtual 541	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
    //   310: invokestatic 746	java/lang/Long:valueOf	(Ljava/lang/String;)Ljava/lang/Long;
    //   313: invokevirtual 750	java/lang/Long:longValue	()J
    //   316: putfield 5941	com/tencent/mobileqq/data/AppGuideTipsConfig:duration	J
    //   319: aload 9
    //   321: aload 8
    //   323: ldc_w 1298
    //   326: invokevirtual 541	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
    //   329: putfield 5944	com/tencent/mobileqq/data/AppGuideTipsConfig:tipsUrl	Ljava/lang/String;
    //   332: aload 9
    //   334: aload 8
    //   336: ldc_w 7131
    //   339: invokevirtual 541	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
    //   342: putfield 7133	com/tencent/mobileqq/data/AppGuideTipsConfig:opkey	Ljava/lang/String;
    //   345: aload 9
    //   347: aload 8
    //   349: ldc_w 5949
    //   352: invokevirtual 541	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
    //   355: putfield 5952	com/tencent/mobileqq/data/AppGuideTipsConfig:msgTypeStr	Ljava/lang/String;
    //   358: ldc_w 989
    //   361: aload 7
    //   363: invokevirtual 503	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   366: ifeq +143 -> 509
    //   369: aload 8
    //   371: ldc_w 1274
    //   374: invokevirtual 251	org/json/JSONObject:has	(Ljava/lang/String;)Z
    //   377: ifeq +100 -> 477
    //   380: aload 9
    //   382: aload 8
    //   384: ldc_w 1274
    //   387: invokevirtual 541	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
    //   390: putfield 5947	com/tencent/mobileqq/data/AppGuideTipsConfig:tipsMsg	Ljava/lang/String;
    //   393: aload 8
    //   395: ldc_w 1095
    //   398: invokevirtual 251	org/json/JSONObject:has	(Ljava/lang/String;)Z
    //   401: ifeq +92 -> 493
    //   404: aload 9
    //   406: aload 8
    //   408: ldc_w 1095
    //   411: invokevirtual 541	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
    //   414: putfield 7136	com/tencent/mobileqq/data/AppGuideTipsConfig:tipsHighLight	Ljava/lang/String;
    //   417: aload_2
    //   418: aload 9
    //   420: invokeinterface 170 2 0
    //   425: pop
    //   426: goto -205 -> 221
    //   429: astore_1
    //   430: ldc 63
    //   432: iconst_1
    //   433: new 122	java/lang/StringBuilder
    //   436: dup
    //   437: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   440: ldc_w 7138
    //   443: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   446: aload_1
    //   447: invokevirtual 134	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   450: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   453: invokestatic 615	com/tencent/qphone/base/util/QLog:e	(Ljava/lang/String;ILjava/lang/String;)V
    //   456: return
    //   457: astore_2
    //   458: aconst_null
    //   459: astore_2
    //   460: goto -313 -> 147
    //   463: aload_2
    //   464: getfield 917	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:content	Lcom/tencent/mobileqq/pb/PBBytesField;
    //   467: invokevirtual 922	com/tencent/mobileqq/pb/PBBytesField:get	()Lcom/tencent/mobileqq/pb/ByteStringMicro;
    //   470: invokevirtual 972	com/tencent/mobileqq/pb/ByteStringMicro:toStringUtf8	()Ljava/lang/String;
    //   473: astore_2
    //   474: goto -327 -> 147
    //   477: aload 9
    //   479: aload 8
    //   481: ldc_w 7140
    //   484: invokevirtual 541	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
    //   487: putfield 5947	com/tencent/mobileqq/data/AppGuideTipsConfig:tipsMsg	Ljava/lang/String;
    //   490: goto -97 -> 393
    //   493: aload 9
    //   495: aload 8
    //   497: ldc_w 7142
    //   500: invokevirtual 541	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
    //   503: putfield 7136	com/tencent/mobileqq/data/AppGuideTipsConfig:tipsHighLight	Ljava/lang/String;
    //   506: goto -89 -> 417
    //   509: aload 9
    //   511: aload 8
    //   513: ldc_w 7140
    //   516: invokevirtual 541	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
    //   519: putfield 5947	com/tencent/mobileqq/data/AppGuideTipsConfig:tipsMsg	Ljava/lang/String;
    //   522: aload 9
    //   524: aload 8
    //   526: ldc_w 7142
    //   529: invokevirtual 541	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
    //   532: putfield 7136	com/tencent/mobileqq/data/AppGuideTipsConfig:tipsHighLight	Ljava/lang/String;
    //   535: goto -118 -> 417
    //   538: aload_1
    //   539: sipush 217
    //   542: invokevirtual 183	com/tencent/mobileqq/app/QQAppInterface:getManager	(I)Lmqq/manager/Manager;
    //   545: checkcast 3743	com/tencent/mobileqq/activity/aio/AppGuideTipsManager
    //   548: astore 5
    //   550: aload 5
    //   552: aload_2
    //   553: invokevirtual 7143	com/tencent/mobileqq/activity/aio/AppGuideTipsManager:a	(Ljava/util/List;)V
    //   556: aload 5
    //   558: invokevirtual 3744	com/tencent/mobileqq/activity/aio/AppGuideTipsManager:a	()V
    //   561: aload_1
    //   562: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   565: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   568: iload 4
    //   570: invokestatic 7145	com/tencent/mobileqq/utils/SharedPreUtils:ab	(Landroid/content/Context;Ljava/lang/String;I)V
    //   573: return
    //   574: aconst_null
    //   575: astore_2
    //   576: goto -429 -> 147
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	579	0	this	ConfigServlet
    //   0	579	1	paramQQAppInterface	QQAppInterface
    //   0	579	2	paramConfig	ConfigurationService.Config
    //   24	14	3	i	int
    //   32	537	4	j	int
    //   191	366	5	localObject	Object
    //   219	13	6	localIterator	Iterator
    //   241	121	7	str	String
    //   250	275	8	localJSONObject	JSONObject
    //   259	264	9	localAppGuideTipsConfig	AppGuideTipsConfig
    // Exception table:
    //   from	to	target	type
    //   183	193	429	java/lang/Exception
    //   198	221	429	java/lang/Exception
    //   221	393	429	java/lang/Exception
    //   393	417	429	java/lang/Exception
    //   417	426	429	java/lang/Exception
    //   477	490	429	java/lang/Exception
    //   493	506	429	java/lang/Exception
    //   509	535	429	java/lang/Exception
    //   538	573	429	java/lang/Exception
    //   135	147	457	java/lang/Exception
  }
  
  void r(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if (paramConfig.type.get() != 194) {
      return;
    }
    int i = SharedPreUtils.av(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
    int j = paramConfig.version.get();
    if (QLog.isColorLevel()) {
      QLog.d("PobingSPLASH_ConfigServlet", 2, "handleTroopPobingConfig reqVersion=" + i + "version=" + j);
    }
    if ((i != j) && (paramConfig.msg_content_list != null) && (paramConfig.msg_content_list.size() > 0))
    {
      paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
      if (paramConfig != null)
      {
        if (paramConfig.compress.get() != 1) {
          break label359;
        }
        paramConfig = OlympicUtil.a(paramConfig.content.get().toByteArray());
        if (paramConfig == null) {
          break label403;
        }
      }
    }
    for (;;)
    {
      try
      {
        paramConfig = new String(paramConfig, "UTF-8");
        if (paramConfig != null)
        {
          if (QLog.isColorLevel()) {
            QLog.d("Pobing", 1, "handleTroopPobingConfig content" + paramConfig);
          }
          if (paramConfig == null) {}
        }
        try
        {
          Object localObject = new JSONObject(paramConfig);
          JSONArray localJSONArray = ((JSONObject)localObject).getJSONArray("left");
          localObject = ((JSONObject)localObject).getJSONArray("right");
          if (QLog.isColorLevel())
          {
            QLog.d("SPLASH_ConfigServlet", 1, "handleTroopPobingConfig content" + paramConfig + " left: " + localJSONArray);
            QLog.d("SPLASH_ConfigServlet", 1, "handleTroopPobingConfig content" + paramConfig + " right: " + localObject);
          }
          TroopPobingItemBuilder.a(paramQQAppInterface, jdField_a_of_type_JavaLangString, localJSONArray, (JSONArray)localObject);
          TroopPobingItemBuilder.a(paramQQAppInterface);
        }
        catch (Exception paramConfig)
        {
          QLog.e("SPLASH_ConfigServlet", 1, "handleTroopPobingConfig failed" + paramConfig);
          continue;
        }
        SharedPreUtils.K(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, j);
        return;
      }
      catch (Exception paramConfig)
      {
        if (QLog.isColorLevel()) {
          QLog.d("PobingSPLASH_ConfigServlet", 2, "handleTroopPobingConfig|uncompress failed");
        }
        paramConfig = null;
        continue;
      }
      label359:
      paramConfig = paramConfig.content.get().toStringUtf8();
      continue;
      label403:
      paramConfig = null;
    }
  }
  
  void s(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if (paramConfig.type.get() != 181) {}
    int i;
    int j;
    do
    {
      do
      {
        do
        {
          return;
          i = SharedPreUtils.aB(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
          j = paramConfig.version.get();
          if (QLog.isColorLevel()) {
            QLog.d("DoutuSPLASH_ConfigServlet", 2, "handleDoutuConfig reqVersion = " + i + ", version=" + j);
          }
        } while (i == j);
        SharedPreUtils.V(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, j);
      } while ((paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() <= 0));
      paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
    } while (paramConfig == null);
    if (paramConfig.compress.get() == 1)
    {
      paramConfig = OlympicUtil.a(paramConfig.content.get().toByteArray());
      if (paramConfig == null) {
        break label945;
      }
    }
    for (;;)
    {
      int k;
      try
      {
        for (;;)
        {
          paramConfig = new String(paramConfig, "UTF-8");
          if (paramConfig == null) {
            break label838;
          }
          if (QLog.isColorLevel()) {
            QLog.d("Doutu", 1, "handleDoutuConfig content" + paramConfig);
          }
          try
          {
            Object localObject = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(paramConfig.getBytes("utf-8")));
            paramConfig = ((Document)localObject).getElementsByTagName("doutu_config");
            if ((paramConfig == null) || (paramConfig.getLength() <= 0)) {
              break;
            }
            i = Integer.parseInt(((Document)localObject).getElementsByTagName("entry").item(0).getFirstChild().getNodeValue());
            l1 = Long.parseLong(((Document)localObject).getElementsByTagName("timeGap").item(0).getFirstChild().getNodeValue());
            j = Integer.parseInt(((Document)localObject).getElementsByTagName("entryCombo").item(0).getFirstChild().getNodeValue());
            paramConfig = ((Document)localObject).getElementsByTagName("resUrl").item(0).getFirstChild().getNodeValue();
            String str1 = ((Document)localObject).getElementsByTagName("resMd5").item(0).getFirstChild().getNodeValue();
            l2 = Long.parseLong(((Document)localObject).getElementsByTagName("comboDuration").item(0).getFirstChild().getNodeValue());
            l3 = Long.parseLong(((Document)localObject).getElementsByTagName("comboKeep").item(0).getFirstChild().getNodeValue());
            k = Integer.parseInt(((Document)localObject).getElementsByTagName("smartSwitch").item(0).getFirstChild().getNodeValue());
            m = Integer.parseInt(((Document)localObject).getElementsByTagName("smartHeadPicCount").item(0).getFirstChild().getNodeValue());
            localObject = paramQQAppInterface.getApp();
            String str2 = jdField_a_of_type_JavaLangString;
            if (i != 1) {
              break label802;
            }
            bool1 = true;
            SharedPreUtils.m((Context)localObject, str2, bool1);
            SharedPreUtils.c(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, l1);
            localObject = paramQQAppInterface.getApp();
            str2 = jdField_a_of_type_JavaLangString;
            if (j != 1) {
              break label808;
            }
            bool1 = true;
            SharedPreUtils.o((Context)localObject, str2, bool1);
            localObject = paramQQAppInterface.getApp();
            str2 = jdField_a_of_type_JavaLangString;
            if (k != 1) {
              break label814;
            }
            bool1 = true;
            SharedPreUtils.p((Context)localObject, str2, bool1);
            SharedPreUtils.o(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, paramConfig);
            SharedPreUtils.p(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, str1);
            SharedPreUtils.d(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, l2);
            SharedPreUtils.e(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, l3);
            SharedPreUtils.X(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, m);
            paramQQAppInterface = (DoutuManager)getAppRuntime().getManager(213);
            if (paramQQAppInterface == null) {
              break;
            }
            if (i != 1) {
              break label820;
            }
            bool1 = true;
          }
          catch (Exception paramQQAppInterface)
          {
            long l1;
            long l2;
            long l3;
            int m;
            label713:
            QLog.e("HotPicManager", 1, "handleDoutuConfig failed" + paramQQAppInterface);
            return;
          }
        }
        paramQQAppInterface.a(bool1, bool2, l1, l2, l3, bool3, m);
        paramQQAppInterface.b(true);
        return;
      }
      catch (Exception paramConfig)
      {
        if (QLog.isColorLevel()) {
          QLog.d("DoutuSPLASH_ConfigServlet", 2, "handleDoutuConfig|uncompress failed");
        }
        paramConfig = null;
        continue;
      }
      paramConfig = paramConfig.content.get().toStringUtf8();
      continue;
      label802:
      boolean bool1 = false;
      continue;
      label808:
      bool1 = false;
      continue;
      label814:
      bool1 = false;
      continue;
      label820:
      bool1 = false;
      label826:
      for (boolean bool2 = false; k != 1; bool2 = true)
      {
        bool3 = false;
        break label713;
        label838:
        if (QLog.isColorLevel()) {
          QLog.d("Doutu", 1, "handleDoutuConfig content is null");
        }
        SharedPreUtils.n(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
        SharedPreUtils.w(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
        SharedPreUtils.o(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
        SharedPreUtils.p(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
        SharedPreUtils.r(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
        SharedPreUtils.s(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
        SharedPreUtils.x(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
        SharedPreUtils.y(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
        SharedPreUtils.q(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
        return;
        paramConfig = null;
        break;
        if (j != 1) {
          break label826;
        }
      }
      label945:
      boolean bool3 = true;
    }
  }
  
  void t(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if (paramConfig.type.get() != 252) {}
    do
    {
      do
      {
        int i;
        int j;
        do
        {
          return;
          i = SharedPreUtils.aJ(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
          j = paramConfig.version.get();
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, "handleVideoRedbagConfig reqVersion = " + i + ", version=" + j);
          }
        } while (i == j);
        SharedPreUtils.aa(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, j);
      } while ((paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() <= 0));
      paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
    } while (paramConfig == null);
    if (paramConfig.compress.get() == 1)
    {
      paramConfig = OlympicUtil.a(paramConfig.content.get().toByteArray());
      if (paramConfig == null) {
        break label431;
      }
    }
    for (;;)
    {
      try
      {
        for (;;)
        {
          paramConfig = new String(paramConfig, "UTF-8");
          if (paramConfig == null) {
            break label395;
          }
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, "handleVideoRedbagConfig content" + paramConfig);
          }
          try
          {
            paramConfig = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(paramConfig.getBytes("utf-8")));
            Object localObject = paramConfig.getElementsByTagName("video_redbag_config");
            if ((localObject == null) || (((NodeList)localObject).getLength() <= 0)) {
              break;
            }
            localObject = paramConfig.getElementsByTagName("resUrl").item(0).getFirstChild().getNodeValue();
            paramConfig = paramConfig.getElementsByTagName("resMd5").item(0).getFirstChild().getNodeValue();
            SharedPreUtils.r(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, (String)localObject);
            SharedPreUtils.q(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, paramConfig);
            return;
          }
          catch (Exception paramQQAppInterface)
          {
            QLog.e("SPLASH_ConfigServlet", 1, "handleVideoRedbagConfig failed" + paramQQAppInterface);
            return;
          }
        }
      }
      catch (Exception paramConfig)
      {
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "handleVideoRedbagConfig|uncompress failed");
        }
        paramConfig = null;
        continue;
      }
      paramConfig = paramConfig.content.get().toStringUtf8();
      continue;
      label395:
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "handleVideoRedbagConfig content is null");
      }
      SharedPreUtils.u(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
      SharedPreUtils.t(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
      return;
      label431:
      paramConfig = null;
    }
  }
  
  void u(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if (paramConfig.type.get() != 247) {}
    do
    {
      do
      {
        int i;
        int j;
        do
        {
          return;
          i = SharedPreUtils.A(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
          j = paramConfig.version.get();
          if (QLog.isColorLevel()) {
            QLog.d("GreenVideoSPLASH_ConfigServlet", 2, "handleGreenVideoConfig reqVersion = " + i + ", version=" + j);
          }
        } while (i == j);
        SharedPreUtils.f(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, j);
      } while ((paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() <= 0));
      paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
    } while (paramConfig == null);
    if (paramConfig.compress.get() == 1)
    {
      paramConfig = OlympicUtil.a(paramConfig.content.get().toByteArray());
      if (paramConfig == null) {
        break label276;
      }
    }
    for (;;)
    {
      try
      {
        paramConfig = new String(paramConfig, "UTF-8");
        if (paramConfig == null) {
          break label252;
        }
        if (QLog.isColorLevel()) {
          QLog.d("GreenVideo", 1, "handleGreenVideoConfig content : " + paramConfig);
        }
        SharedPreUtils.e(paramQQAppInterface.getApp(), paramConfig);
        return;
      }
      catch (Exception paramConfig)
      {
        if (QLog.isColorLevel()) {
          QLog.d("GreenVideoSPLASH_ConfigServlet", 2, "handleGreenVideoConfig|uncompress failed");
        }
        paramConfig = null;
        continue;
      }
      paramConfig = paramConfig.content.get().toStringUtf8();
      continue;
      label252:
      if (QLog.isColorLevel()) {
        QLog.d("GreenVideo", 1, "handleGreenVideoConfig content is null");
      }
      SharedPreUtils.a(paramQQAppInterface.getApp());
      return;
      label276:
      paramConfig = null;
    }
  }
  
  void v(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    if (paramConfig.type.get() != 272) {}
    do
    {
      do
      {
        int i;
        int j;
        do
        {
          return;
          i = SharedPreUtils.C(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
          j = paramConfig.version.get();
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, "handleVideoCompressConfig reqVersion = " + i + ", version=" + j);
          }
        } while (i == j);
        SharedPreUtils.h(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, j);
      } while ((paramConfig.msg_content_list == null) || (paramConfig.msg_content_list.size() <= 0));
      paramConfig = (ConfigurationService.Content)paramConfig.msg_content_list.get(0);
    } while (paramConfig == null);
    if (paramConfig.compress.get() == 1)
    {
      paramConfig = OlympicUtil.a(paramConfig.content.get().toByteArray());
      if (paramConfig == null) {
        break label616;
      }
    }
    for (;;)
    {
      try
      {
        for (;;)
        {
          paramConfig = new String(paramConfig, "UTF-8");
          if (paramConfig == null) {
            break label590;
          }
          if (QLog.isColorLevel()) {
            QLog.d("SPLASH_ConfigServlet", 2, "handleVideoCompressConfig content" + paramConfig);
          }
          try
          {
            paramConfig = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(paramConfig.getBytes("utf-8")));
            Object localObject = paramConfig.getElementsByTagName("video_config");
            if ((localObject == null) || (((NodeList)localObject).getLength() <= 0)) {
              break;
            }
            localObject = new StringBuilder();
            if (paramConfig.getElementsByTagName("maxLength") != null)
            {
              ((StringBuilder)localObject).append(paramConfig.getElementsByTagName("maxLength").item(0).getFirstChild().getNodeValue());
              ((StringBuilder)localObject).append('|');
            }
            if (paramConfig.getElementsByTagName("maxFPS") != null)
            {
              ((StringBuilder)localObject).append(paramConfig.getElementsByTagName("maxFPS").item(0).getFirstChild().getNodeValue());
              ((StringBuilder)localObject).append('|');
            }
            if (paramConfig.getElementsByTagName("density") != null)
            {
              ((StringBuilder)localObject).append(paramConfig.getElementsByTagName("density").item(0).getFirstChild().getNodeValue());
              ((StringBuilder)localObject).append('|');
            }
            if (paramConfig.getElementsByTagName("minDensity") != null)
            {
              ((StringBuilder)localObject).append(paramConfig.getElementsByTagName("minDensity").item(0).getFirstChild().getNodeValue());
              ((StringBuilder)localObject).append('|');
            }
            if (paramConfig.getElementsByTagName("maxSize") != null) {
              ((StringBuilder)localObject).append(paramConfig.getElementsByTagName("maxSize").item(0).getFirstChild().getNodeValue());
            }
            SharedPreUtils.s(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString, ((StringBuilder)localObject).toString());
            return;
          }
          catch (Exception paramQQAppInterface)
          {
            QLog.e("SPLASH_ConfigServlet", 1, "handleVideoCompressConfig failed" + paramQQAppInterface);
            return;
          }
        }
      }
      catch (Exception paramConfig)
      {
        if (QLog.isColorLevel()) {
          QLog.d("SPLASH_ConfigServlet", 2, "handleVideoCompressConfig|uncompress failed");
        }
        paramConfig = null;
        continue;
      }
      paramConfig = paramConfig.content.get().toStringUtf8();
      continue;
      label590:
      if (QLog.isColorLevel()) {
        QLog.d("SPLASH_ConfigServlet", 2, "handleVideoCompressConfig content is null");
      }
      SharedPreUtils.v(paramQQAppInterface.getApp(), jdField_a_of_type_JavaLangString);
      return;
      label616:
      paramConfig = null;
    }
  }
  
  /* Error */
  void w(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    // Byte code:
    //   0: aload_1
    //   1: invokestatic 2239	com/tencent/mobileqq/stt/SttManager:a	(Lcom/tencent/mobileqq/app/QQAppInterface;)I
    //   4: istore 4
    //   6: aload_2
    //   7: getfield 73	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:version	Lcom/tencent/mobileqq/pb/PBInt32Field;
    //   10: invokevirtual 79	com/tencent/mobileqq/pb/PBInt32Field:get	()I
    //   13: istore_3
    //   14: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   17: ifeq +40 -> 57
    //   20: ldc 63
    //   22: iconst_2
    //   23: new 122	java/lang/StringBuilder
    //   26: dup
    //   27: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   30: ldc_w 7309
    //   33: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   36: iload 4
    //   38: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   41: ldc_w 6989
    //   44: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   47: iload_3
    //   48: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   51: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   54: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   57: iload 4
    //   59: iload_3
    //   60: if_icmpeq +157 -> 217
    //   63: aload_1
    //   64: bipush 16
    //   66: invokevirtual 183	com/tencent/mobileqq/app/QQAppInterface:getManager	(I)Lmqq/manager/Manager;
    //   69: checkcast 2238	com/tencent/mobileqq/stt/SttManager
    //   72: astore 5
    //   74: aload_2
    //   75: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   78: ifnull +216 -> 294
    //   81: aload_2
    //   82: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   85: invokevirtual 117	com/tencent/mobileqq/pb/PBRepeatMessageField:size	()I
    //   88: ifle +206 -> 294
    //   91: aload_2
    //   92: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   95: iconst_0
    //   96: invokevirtual 147	com/tencent/mobileqq/pb/PBRepeatMessageField:get	(I)Lcom/tencent/mobileqq/pb/MessageMicro;
    //   99: checkcast 149	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content
    //   102: astore_2
    //   103: aload_2
    //   104: ifnull +108 -> 212
    //   107: aload_2
    //   108: getfield 913	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:compress	Lcom/tencent/mobileqq/pb/PBUInt32Field;
    //   111: invokevirtual 156	com/tencent/mobileqq/pb/PBUInt32Field:get	()I
    //   114: iconst_1
    //   115: if_icmpne +135 -> 250
    //   118: aload_2
    //   119: getfield 917	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:content	Lcom/tencent/mobileqq/pb/PBBytesField;
    //   122: invokevirtual 922	com/tencent/mobileqq/pb/PBBytesField:get	()Lcom/tencent/mobileqq/pb/ByteStringMicro;
    //   125: invokevirtual 928	com/tencent/mobileqq/pb/ByteStringMicro:toByteArray	()[B
    //   128: invokestatic 933	com/tencent/mobileqq/olympic/utils/OlympicUtil:a	([B)[B
    //   131: astore_2
    //   132: aload_2
    //   133: ifnull +179 -> 312
    //   136: new 240	java/lang/String
    //   139: dup
    //   140: aload_2
    //   141: ldc_w 935
    //   144: invokespecial 938	java/lang/String:<init>	([BLjava/lang/String;)V
    //   147: astore_2
    //   148: aload_2
    //   149: ifnull +63 -> 212
    //   152: new 242	org/json/JSONObject
    //   155: dup
    //   156: aload_2
    //   157: invokespecial 245	org/json/JSONObject:<init>	(Ljava/lang/String;)V
    //   160: ldc_w 7311
    //   163: invokevirtual 255	org/json/JSONObject:getInt	(Ljava/lang/String;)I
    //   166: istore 4
    //   168: aload 5
    //   170: iload 4
    //   172: invokevirtual 7312	com/tencent/mobileqq/stt/SttManager:a	(I)V
    //   175: ldc 63
    //   177: iconst_1
    //   178: new 122	java/lang/StringBuilder
    //   181: dup
    //   182: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   185: ldc_w 7314
    //   188: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   191: aload_2
    //   192: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   195: ldc_w 7316
    //   198: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   201: iload 4
    //   203: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   206: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   209: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   212: aload_1
    //   213: iload_3
    //   214: invokestatic 7317	com/tencent/mobileqq/stt/SttManager:a	(Lcom/tencent/mobileqq/app/QQAppInterface;I)V
    //   217: return
    //   218: astore_2
    //   219: ldc 63
    //   221: iconst_1
    //   222: new 122	java/lang/StringBuilder
    //   225: dup
    //   226: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   229: ldc_w 7004
    //   232: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   235: aload_2
    //   236: invokevirtual 134	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   239: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   242: invokestatic 615	com/tencent/qphone/base/util/QLog:e	(Ljava/lang/String;ILjava/lang/String;)V
    //   245: aconst_null
    //   246: astore_2
    //   247: goto -99 -> 148
    //   250: aload_2
    //   251: getfield 917	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:content	Lcom/tencent/mobileqq/pb/PBBytesField;
    //   254: invokevirtual 922	com/tencent/mobileqq/pb/PBBytesField:get	()Lcom/tencent/mobileqq/pb/ByteStringMicro;
    //   257: invokevirtual 972	com/tencent/mobileqq/pb/ByteStringMicro:toStringUtf8	()Ljava/lang/String;
    //   260: astore_2
    //   261: goto -113 -> 148
    //   264: astore_2
    //   265: ldc 63
    //   267: iconst_1
    //   268: new 122	java/lang/StringBuilder
    //   271: dup
    //   272: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   275: ldc_w 7319
    //   278: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   281: aload_2
    //   282: invokevirtual 134	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   285: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   288: invokestatic 615	com/tencent/qphone/base/util/QLog:e	(Ljava/lang/String;ILjava/lang/String;)V
    //   291: goto -79 -> 212
    //   294: ldc 63
    //   296: iconst_1
    //   297: ldc_w 7321
    //   300: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   303: aload 5
    //   305: iconst_0
    //   306: invokevirtual 7312	com/tencent/mobileqq/stt/SttManager:a	(I)V
    //   309: goto -97 -> 212
    //   312: aconst_null
    //   313: astore_2
    //   314: goto -166 -> 148
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	317	0	this	ConfigServlet
    //   0	317	1	paramQQAppInterface	QQAppInterface
    //   0	317	2	paramConfig	ConfigurationService.Config
    //   13	201	3	i	int
    //   4	198	4	j	int
    //   72	232	5	localSttManager	SttManager
    // Exception table:
    //   from	to	target	type
    //   136	148	218	java/lang/Exception
    //   152	212	264	java/lang/Exception
  }
  
  /* Error */
  protected void x(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    // Byte code:
    //   0: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   3: ldc_w 2230
    //   6: iconst_0
    //   7: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   10: invokestatic 2228	com/tencent/mobileqq/nearby/NearbySPUtil:a	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
    //   13: checkcast 81	java/lang/Integer
    //   16: invokevirtual 490	java/lang/Integer:intValue	()I
    //   19: istore_3
    //   20: aload_2
    //   21: getfield 73	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:version	Lcom/tencent/mobileqq/pb/PBInt32Field;
    //   24: invokevirtual 79	com/tencent/mobileqq/pb/PBInt32Field:get	()I
    //   27: istore 4
    //   29: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   32: ifeq +74 -> 106
    //   35: ldc_w 7323
    //   38: iconst_2
    //   39: new 122	java/lang/StringBuilder
    //   42: dup
    //   43: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   46: ldc_w 7325
    //   49: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   52: iload_3
    //   53: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   56: ldc_w 6989
    //   59: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   62: iload 4
    //   64: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   67: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   70: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   73: ldc_w 7323
    //   76: iconst_2
    //   77: new 122	java/lang/StringBuilder
    //   80: dup
    //   81: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   84: ldc_w 7327
    //   87: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   90: aload_2
    //   91: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   94: invokevirtual 117	com/tencent/mobileqq/pb/PBRepeatMessageField:size	()I
    //   97: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   100: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   103: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   106: iload_3
    //   107: iload 4
    //   109: if_icmpeq +608 -> 717
    //   112: aload_2
    //   113: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   116: ifnull +601 -> 717
    //   119: aload_2
    //   120: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   123: invokevirtual 117	com/tencent/mobileqq/pb/PBRepeatMessageField:size	()I
    //   126: ifle +591 -> 717
    //   129: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   132: ifeq +66 -> 198
    //   135: iconst_0
    //   136: istore_3
    //   137: iload_3
    //   138: aload_2
    //   139: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   142: invokevirtual 117	com/tencent/mobileqq/pb/PBRepeatMessageField:size	()I
    //   145: if_icmpge +53 -> 198
    //   148: ldc_w 7323
    //   151: iconst_2
    //   152: new 122	java/lang/StringBuilder
    //   155: dup
    //   156: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   159: ldc_w 7329
    //   162: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   165: aload_2
    //   166: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   169: iload_3
    //   170: invokevirtual 147	com/tencent/mobileqq/pb/PBRepeatMessageField:get	(I)Lcom/tencent/mobileqq/pb/MessageMicro;
    //   173: checkcast 149	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content
    //   176: getfield 153	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:task_id	Lcom/tencent/mobileqq/pb/PBUInt32Field;
    //   179: invokevirtual 156	com/tencent/mobileqq/pb/PBUInt32Field:get	()I
    //   182: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   185: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   188: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   191: iload_3
    //   192: iconst_1
    //   193: iadd
    //   194: istore_3
    //   195: goto -58 -> 137
    //   198: aload_2
    //   199: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   202: iconst_0
    //   203: invokevirtual 147	com/tencent/mobileqq/pb/PBRepeatMessageField:get	(I)Lcom/tencent/mobileqq/pb/MessageMicro;
    //   206: checkcast 149	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content
    //   209: astore 7
    //   211: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   214: ifeq +37 -> 251
    //   217: ldc_w 7323
    //   220: iconst_2
    //   221: new 122	java/lang/StringBuilder
    //   224: dup
    //   225: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   228: ldc_w 7331
    //   231: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   234: aload 7
    //   236: getfield 153	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:task_id	Lcom/tencent/mobileqq/pb/PBUInt32Field;
    //   239: invokevirtual 156	com/tencent/mobileqq/pb/PBUInt32Field:get	()I
    //   242: invokevirtual 213	java/lang/StringBuilder:append	(I)Ljava/lang/StringBuilder;
    //   245: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   248: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   251: aload 7
    //   253: ifnull +464 -> 717
    //   256: aload 7
    //   258: getfield 913	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:compress	Lcom/tencent/mobileqq/pb/PBUInt32Field;
    //   261: invokevirtual 156	com/tencent/mobileqq/pb/PBUInt32Field:get	()I
    //   264: iconst_1
    //   265: if_icmpne +489 -> 754
    //   268: aload 7
    //   270: getfield 917	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:content	Lcom/tencent/mobileqq/pb/PBBytesField;
    //   273: invokevirtual 922	com/tencent/mobileqq/pb/PBBytesField:get	()Lcom/tencent/mobileqq/pb/ByteStringMicro;
    //   276: invokevirtual 928	com/tencent/mobileqq/pb/ByteStringMicro:toByteArray	()[B
    //   279: invokestatic 933	com/tencent/mobileqq/olympic/utils/OlympicUtil:a	([B)[B
    //   282: astore 7
    //   284: aload 7
    //   286: ifnull +528 -> 814
    //   289: new 240	java/lang/String
    //   292: dup
    //   293: aload 7
    //   295: ldc_w 935
    //   298: invokespecial 938	java/lang/String:<init>	([BLjava/lang/String;)V
    //   301: astore 7
    //   303: aload 7
    //   305: ifnull +412 -> 717
    //   308: invokestatic 120	com/tencent/qphone/base/util/QLog:isColorLevel	()Z
    //   311: ifeq +31 -> 342
    //   314: ldc_w 7323
    //   317: iconst_1
    //   318: new 122	java/lang/StringBuilder
    //   321: dup
    //   322: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   325: ldc_w 7333
    //   328: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   331: aload 7
    //   333: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   336: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   339: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   342: new 242	org/json/JSONObject
    //   345: dup
    //   346: aload 7
    //   348: invokespecial 245	org/json/JSONObject:<init>	(Ljava/lang/String;)V
    //   351: astore 7
    //   353: aload 7
    //   355: ldc_w 7335
    //   358: invokevirtual 7105	org/json/JSONObject:optJSONArray	(Ljava/lang/String;)Lorg/json/JSONArray;
    //   361: astore 8
    //   363: aload 8
    //   365: invokevirtual 1030	org/json/JSONArray:length	()I
    //   368: ifle +18 -> 386
    //   371: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   374: ldc_w 7337
    //   377: aload 8
    //   379: invokevirtual 5755	org/json/JSONArray:toString	()Ljava/lang/String;
    //   382: invokestatic 2233	com/tencent/mobileqq/nearby/NearbySPUtil:a	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Z
    //   385: pop
    //   386: aload 7
    //   388: ldc_w 7339
    //   391: invokevirtual 1093	org/json/JSONObject:optJSONObject	(Ljava/lang/String;)Lorg/json/JSONObject;
    //   394: astore 8
    //   396: aload 8
    //   398: ifnull +18 -> 416
    //   401: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   404: ldc_w 7341
    //   407: aload 8
    //   409: invokevirtual 7112	org/json/JSONObject:toString	()Ljava/lang/String;
    //   412: invokestatic 2233	com/tencent/mobileqq/nearby/NearbySPUtil:a	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Z
    //   415: pop
    //   416: aload 7
    //   418: ldc_w 7343
    //   421: invokevirtual 737	org/json/JSONObject:optInt	(Ljava/lang/String;)I
    //   424: istore_3
    //   425: aload 8
    //   427: ifnull +17 -> 444
    //   430: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   433: ldc_w 7345
    //   436: iload_3
    //   437: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   440: invokestatic 2233	com/tencent/mobileqq/nearby/NearbySPUtil:a	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Z
    //   443: pop
    //   444: aload 7
    //   446: ldc_w 7347
    //   449: invokevirtual 1093	org/json/JSONObject:optJSONObject	(Ljava/lang/String;)Lorg/json/JSONObject;
    //   452: astore 8
    //   454: aload 8
    //   456: ifnull +76 -> 532
    //   459: aload 8
    //   461: ldc_w 7349
    //   464: invokevirtual 737	org/json/JSONObject:optInt	(Ljava/lang/String;)I
    //   467: istore_3
    //   468: aload 8
    //   470: ldc_w 7351
    //   473: invokevirtual 737	org/json/JSONObject:optInt	(Ljava/lang/String;)I
    //   476: istore 4
    //   478: aload 8
    //   480: ldc_w 7353
    //   483: invokevirtual 737	org/json/JSONObject:optInt	(Ljava/lang/String;)I
    //   486: istore 5
    //   488: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   491: ldc_w 7355
    //   494: iload_3
    //   495: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   498: invokestatic 2233	com/tencent/mobileqq/nearby/NearbySPUtil:a	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Z
    //   501: pop
    //   502: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   505: ldc_w 7357
    //   508: iload 4
    //   510: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   513: invokestatic 2233	com/tencent/mobileqq/nearby/NearbySPUtil:a	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Z
    //   516: pop
    //   517: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   520: ldc_w 7359
    //   523: iload 5
    //   525: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   528: invokestatic 2233	com/tencent/mobileqq/nearby/NearbySPUtil:a	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Z
    //   531: pop
    //   532: aload 7
    //   534: ldc_w 7361
    //   537: invokevirtual 7105	org/json/JSONObject:optJSONArray	(Ljava/lang/String;)Lorg/json/JSONArray;
    //   540: astore 8
    //   542: aload 8
    //   544: ifnull +226 -> 770
    //   547: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   550: ldc_w 7363
    //   553: aload 8
    //   555: invokevirtual 5755	org/json/JSONArray:toString	()Ljava/lang/String;
    //   558: invokestatic 2233	com/tencent/mobileqq/nearby/NearbySPUtil:a	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Z
    //   561: pop
    //   562: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   565: ldc_w 2230
    //   568: aload_2
    //   569: getfield 73	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:version	Lcom/tencent/mobileqq/pb/PBInt32Field;
    //   572: invokevirtual 79	com/tencent/mobileqq/pb/PBInt32Field:get	()I
    //   575: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   578: invokestatic 2233	com/tencent/mobileqq/nearby/NearbySPUtil:a	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Z
    //   581: pop
    //   582: aload 7
    //   584: ldc_w 7365
    //   587: iconst_0
    //   588: invokevirtual 943	org/json/JSONObject:optInt	(Ljava/lang/String;I)I
    //   591: istore_3
    //   592: aload 7
    //   594: ldc_w 7367
    //   597: iconst_m1
    //   598: invokevirtual 943	org/json/JSONObject:optInt	(Ljava/lang/String;I)I
    //   601: istore 4
    //   603: aload 7
    //   605: ldc_w 7369
    //   608: iconst_0
    //   609: invokevirtual 943	org/json/JSONObject:optInt	(Ljava/lang/String;I)I
    //   612: istore 5
    //   614: aload 7
    //   616: ldc_w 7371
    //   619: iconst_0
    //   620: invokevirtual 943	org/json/JSONObject:optInt	(Ljava/lang/String;I)I
    //   623: istore 6
    //   625: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   628: ldc_w 7365
    //   631: iload_3
    //   632: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   635: invokestatic 2233	com/tencent/mobileqq/nearby/NearbySPUtil:a	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Z
    //   638: pop
    //   639: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   642: ldc_w 7367
    //   645: iload 4
    //   647: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   650: invokestatic 2233	com/tencent/mobileqq/nearby/NearbySPUtil:a	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Z
    //   653: pop
    //   654: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   657: ldc_w 7369
    //   660: iload 5
    //   662: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   665: invokestatic 2233	com/tencent/mobileqq/nearby/NearbySPUtil:a	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Z
    //   668: pop
    //   669: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   672: ldc_w 7371
    //   675: iload 6
    //   677: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   680: invokestatic 2233	com/tencent/mobileqq/nearby/NearbySPUtil:a	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Z
    //   683: pop
    //   684: aload 7
    //   686: ldc_w 7373
    //   689: invokevirtual 737	org/json/JSONObject:optInt	(Ljava/lang/String;)I
    //   692: istore_3
    //   693: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   696: ldc_w 7373
    //   699: iload_3
    //   700: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   703: invokestatic 2233	com/tencent/mobileqq/nearby/NearbySPUtil:a	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Z
    //   706: pop
    //   707: aload_1
    //   708: ldc_w 7375
    //   711: iconst_1
    //   712: iconst_1
    //   713: aconst_null
    //   714: invokevirtual 7379	com/tencent/mobileqq/app/QQAppInterface:notifyObservers	(Ljava/lang/Class;IZLandroid/os/Bundle;)V
    //   717: return
    //   718: astore 7
    //   720: ldc_w 7323
    //   723: iconst_1
    //   724: new 122	java/lang/StringBuilder
    //   727: dup
    //   728: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   731: ldc_w 7381
    //   734: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   737: aload 7
    //   739: invokevirtual 134	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   742: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   745: invokestatic 615	com/tencent/qphone/base/util/QLog:e	(Ljava/lang/String;ILjava/lang/String;)V
    //   748: aconst_null
    //   749: astore 7
    //   751: goto -448 -> 303
    //   754: aload 7
    //   756: getfield 917	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:content	Lcom/tencent/mobileqq/pb/PBBytesField;
    //   759: invokevirtual 922	com/tencent/mobileqq/pb/PBBytesField:get	()Lcom/tencent/mobileqq/pb/ByteStringMicro;
    //   762: invokevirtual 972	com/tencent/mobileqq/pb/ByteStringMicro:toStringUtf8	()Ljava/lang/String;
    //   765: astore 7
    //   767: goto -464 -> 303
    //   770: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   773: ldc_w 7363
    //   776: ldc 13
    //   778: invokestatic 2233	com/tencent/mobileqq/nearby/NearbySPUtil:a	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Z
    //   781: pop
    //   782: goto -220 -> 562
    //   785: astore_1
    //   786: ldc_w 7323
    //   789: iconst_1
    //   790: new 122	java/lang/StringBuilder
    //   793: dup
    //   794: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   797: ldc_w 7383
    //   800: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   803: aload_1
    //   804: invokevirtual 134	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   807: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   810: invokestatic 615	com/tencent/qphone/base/util/QLog:e	(Ljava/lang/String;ILjava/lang/String;)V
    //   813: return
    //   814: aconst_null
    //   815: astore 7
    //   817: goto -514 -> 303
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	820	0	this	ConfigServlet
    //   0	820	1	paramQQAppInterface	QQAppInterface
    //   0	820	2	paramConfig	ConfigurationService.Config
    //   19	681	3	i	int
    //   27	619	4	j	int
    //   486	175	5	k	int
    //   623	53	6	m	int
    //   209	476	7	localObject1	Object
    //   718	20	7	localException	Exception
    //   749	67	7	str	String
    //   361	193	8	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   289	303	718	java/lang/Exception
    //   342	386	785	java/lang/Exception
    //   386	396	785	java/lang/Exception
    //   401	416	785	java/lang/Exception
    //   416	425	785	java/lang/Exception
    //   430	444	785	java/lang/Exception
    //   444	454	785	java/lang/Exception
    //   459	532	785	java/lang/Exception
    //   532	542	785	java/lang/Exception
    //   547	562	785	java/lang/Exception
    //   562	717	785	java/lang/Exception
    //   770	782	785	java/lang/Exception
  }
  
  /* Error */
  void y(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    // Byte code:
    //   0: ldc_w 7385
    //   3: iconst_1
    //   4: ldc_w 7387
    //   7: iconst_0
    //   8: anewarray 65	java/lang/Object
    //   11: invokestatic 405	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   14: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   17: aload_2
    //   18: getfield 90	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:type	Lcom/tencent/mobileqq/pb/PBInt32Field;
    //   21: invokevirtual 79	com/tencent/mobileqq/pb/PBInt32Field:get	()I
    //   24: sipush 178
    //   27: if_icmpeq +4 -> 31
    //   30: return
    //   31: aload_1
    //   32: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   35: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   38: invokestatic 2242	com/tencent/mobileqq/utils/SharedPreUtils:aA	(Landroid/content/Context;Ljava/lang/String;)I
    //   41: istore_3
    //   42: aload_2
    //   43: getfield 73	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:version	Lcom/tencent/mobileqq/pb/PBInt32Field;
    //   46: invokevirtual 79	com/tencent/mobileqq/pb/PBInt32Field:get	()I
    //   49: istore 4
    //   51: iload_3
    //   52: iload 4
    //   54: if_icmpne +28 -> 82
    //   57: ldc_w 7385
    //   60: iconst_1
    //   61: ldc_w 7389
    //   64: iconst_1
    //   65: anewarray 65	java/lang/Object
    //   68: dup
    //   69: iconst_0
    //   70: iload_3
    //   71: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   74: aastore
    //   75: invokestatic 405	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   78: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   81: return
    //   82: aload_2
    //   83: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   86: ifnull +13 -> 99
    //   89: aload_2
    //   90: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   93: invokevirtual 117	com/tencent/mobileqq/pb/PBRepeatMessageField:size	()I
    //   96: ifne +44 -> 140
    //   99: ldc_w 7385
    //   102: iconst_1
    //   103: ldc_w 7391
    //   106: iconst_0
    //   107: anewarray 65	java/lang/Object
    //   110: invokestatic 405	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   113: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   116: aload_1
    //   117: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   120: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   123: aconst_null
    //   124: invokestatic 7393	com/tencent/mobileqq/utils/SharedPreUtils:n	(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V
    //   127: aload_1
    //   128: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   131: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   134: iload 4
    //   136: invokestatic 7395	com/tencent/mobileqq/utils/SharedPreUtils:Q	(Landroid/content/Context;Ljava/lang/String;I)V
    //   139: return
    //   140: aload_2
    //   141: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   144: iconst_0
    //   145: invokevirtual 147	com/tencent/mobileqq/pb/PBRepeatMessageField:get	(I)Lcom/tencent/mobileqq/pb/MessageMicro;
    //   148: checkcast 149	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content
    //   151: astore_2
    //   152: aload_2
    //   153: ifnonnull +21 -> 174
    //   156: ldc_w 7385
    //   159: iconst_1
    //   160: ldc_w 7397
    //   163: iconst_0
    //   164: anewarray 65	java/lang/Object
    //   167: invokestatic 405	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   170: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   173: return
    //   174: aload_2
    //   175: getfield 913	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:compress	Lcom/tencent/mobileqq/pb/PBUInt32Field;
    //   178: invokevirtual 156	com/tencent/mobileqq/pb/PBUInt32Field:get	()I
    //   181: iconst_1
    //   182: if_icmpne +174 -> 356
    //   185: aload_2
    //   186: getfield 917	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:content	Lcom/tencent/mobileqq/pb/PBBytesField;
    //   189: invokevirtual 922	com/tencent/mobileqq/pb/PBBytesField:get	()Lcom/tencent/mobileqq/pb/ByteStringMicro;
    //   192: invokevirtual 928	com/tencent/mobileqq/pb/ByteStringMicro:toByteArray	()[B
    //   195: invokestatic 933	com/tencent/mobileqq/olympic/utils/OlympicUtil:a	([B)[B
    //   198: astore 5
    //   200: aload 5
    //   202: ifnull +196 -> 398
    //   205: new 240	java/lang/String
    //   208: dup
    //   209: aload 5
    //   211: ldc_w 935
    //   214: invokespecial 938	java/lang/String:<init>	([BLjava/lang/String;)V
    //   217: astore_2
    //   218: aload_2
    //   219: ifnull -189 -> 30
    //   222: new 242	org/json/JSONObject
    //   225: dup
    //   226: aload_2
    //   227: invokespecial 245	org/json/JSONObject:<init>	(Ljava/lang/String;)V
    //   230: pop
    //   231: aload_1
    //   232: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   235: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   238: aload_2
    //   239: invokestatic 7393	com/tencent/mobileqq/utils/SharedPreUtils:n	(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V
    //   242: aload_1
    //   243: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   246: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   249: iload 4
    //   251: invokestatic 7395	com/tencent/mobileqq/utils/SharedPreUtils:Q	(Landroid/content/Context;Ljava/lang/String;I)V
    //   254: new 7399	com/tencent/mobileqq/activity/contacts/base/CardConfigManager
    //   257: dup
    //   258: aload_1
    //   259: invokespecial 7401	com/tencent/mobileqq/activity/contacts/base/CardConfigManager:<init>	(Lcom/tencent/mobileqq/app/QQAppInterface;)V
    //   262: invokevirtual 7404	com/tencent/mobileqq/activity/contacts/base/CardConfigManager:a	()Lcom/tencent/mobileqq/activity/contacts/base/CardConfigManager$CardConfigs;
    //   265: astore_2
    //   266: aload_2
    //   267: ifnull -237 -> 30
    //   270: aload_2
    //   271: getfield 7407	com/tencent/mobileqq/activity/contacts/base/CardConfigManager$CardConfigs:jdField_a_of_type_Boolean	Z
    //   274: ifeq -244 -> 30
    //   277: aload_1
    //   278: iconst_2
    //   279: invokevirtual 707	com/tencent/mobileqq/app/QQAppInterface:a	(I)Lcom/tencent/mobileqq/app/BusinessHandler;
    //   282: checkcast 7409	com/tencent/mobileqq/app/CardHandler
    //   285: iconst_1
    //   286: newarray short
    //   288: dup
    //   289: iconst_0
    //   290: sipush -23447
    //   293: sastore
    //   294: invokevirtual 7412	com/tencent/mobileqq/app/CardHandler:a	([S)V
    //   297: return
    //   298: astore_1
    //   299: ldc_w 7385
    //   302: iconst_1
    //   303: ldc_w 7414
    //   306: iconst_1
    //   307: anewarray 65	java/lang/Object
    //   310: dup
    //   311: iconst_0
    //   312: aload_1
    //   313: invokevirtual 612	java/lang/Exception:getMessage	()Ljava/lang/String;
    //   316: aastore
    //   317: invokestatic 405	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   320: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   323: return
    //   324: astore_2
    //   325: ldc_w 7385
    //   328: iconst_1
    //   329: ldc_w 7416
    //   332: iconst_1
    //   333: anewarray 65	java/lang/Object
    //   336: dup
    //   337: iconst_0
    //   338: aload 5
    //   340: arraylength
    //   341: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   344: aastore
    //   345: invokestatic 405	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   348: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   351: aconst_null
    //   352: astore_2
    //   353: goto -135 -> 218
    //   356: aload_2
    //   357: getfield 917	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:content	Lcom/tencent/mobileqq/pb/PBBytesField;
    //   360: invokevirtual 922	com/tencent/mobileqq/pb/PBBytesField:get	()Lcom/tencent/mobileqq/pb/ByteStringMicro;
    //   363: invokevirtual 972	com/tencent/mobileqq/pb/ByteStringMicro:toStringUtf8	()Ljava/lang/String;
    //   366: astore_2
    //   367: goto -149 -> 218
    //   370: astore_2
    //   371: ldc_w 7385
    //   374: iconst_1
    //   375: ldc_w 7418
    //   378: iconst_1
    //   379: anewarray 65	java/lang/Object
    //   382: dup
    //   383: iconst_0
    //   384: aload_2
    //   385: invokevirtual 612	java/lang/Exception:getMessage	()Ljava/lang/String;
    //   388: aastore
    //   389: invokestatic 405	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   392: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   395: goto -141 -> 254
    //   398: aconst_null
    //   399: astore_2
    //   400: goto -182 -> 218
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	403	0	this	ConfigServlet
    //   0	403	1	paramQQAppInterface	QQAppInterface
    //   0	403	2	paramConfig	ConfigurationService.Config
    //   41	30	3	i	int
    //   49	201	4	j	int
    //   198	141	5	arrayOfByte	byte[]
    // Exception table:
    //   from	to	target	type
    //   254	266	298	java/lang/Exception
    //   270	297	298	java/lang/Exception
    //   205	218	324	java/lang/Exception
    //   222	254	370	java/lang/Exception
  }
  
  /* Error */
  void z(QQAppInterface paramQQAppInterface, ConfigurationService.Config paramConfig)
  {
    // Byte code:
    //   0: aconst_null
    //   1: astore 7
    //   3: aconst_null
    //   4: astore 8
    //   6: iconst_0
    //   7: istore 5
    //   9: ldc_w 7420
    //   12: iconst_1
    //   13: ldc_w 7422
    //   16: iconst_0
    //   17: anewarray 65	java/lang/Object
    //   20: invokestatic 405	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   23: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   26: aload_1
    //   27: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   30: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   33: invokestatic 2252	com/tencent/mobileqq/activity/aio/photo/PhotoListConfigManager:a	(Landroid/content/Context;Ljava/lang/String;)I
    //   36: istore_3
    //   37: aload_2
    //   38: getfield 73	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:version	Lcom/tencent/mobileqq/pb/PBInt32Field;
    //   41: invokevirtual 79	com/tencent/mobileqq/pb/PBInt32Field:get	()I
    //   44: istore 6
    //   46: iload_3
    //   47: iload 6
    //   49: if_icmpeq +396 -> 445
    //   52: aload_2
    //   53: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   56: ifnull +365 -> 421
    //   59: aload_2
    //   60: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   63: invokevirtual 117	com/tencent/mobileqq/pb/PBRepeatMessageField:size	()I
    //   66: ifle +355 -> 421
    //   69: aload_2
    //   70: getfield 96	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Config:msg_content_list	Lcom/tencent/mobileqq/pb/PBRepeatMessageField;
    //   73: iconst_0
    //   74: invokevirtual 147	com/tencent/mobileqq/pb/PBRepeatMessageField:get	(I)Lcom/tencent/mobileqq/pb/MessageMicro;
    //   77: checkcast 149	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content
    //   80: astore_2
    //   81: aload_2
    //   82: ifnull +326 -> 408
    //   85: aload_2
    //   86: getfield 917	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:content	Lcom/tencent/mobileqq/pb/PBBytesField;
    //   89: invokevirtual 1369	com/tencent/mobileqq/pb/PBBytesField:has	()Z
    //   92: ifeq +316 -> 408
    //   95: aload_2
    //   96: getfield 913	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:compress	Lcom/tencent/mobileqq/pb/PBUInt32Field;
    //   99: invokevirtual 156	com/tencent/mobileqq/pb/PBUInt32Field:get	()I
    //   102: iconst_1
    //   103: if_icmpne +217 -> 320
    //   106: aload_2
    //   107: getfield 917	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:content	Lcom/tencent/mobileqq/pb/PBBytesField;
    //   110: invokevirtual 922	com/tencent/mobileqq/pb/PBBytesField:get	()Lcom/tencent/mobileqq/pb/ByteStringMicro;
    //   113: invokevirtual 928	com/tencent/mobileqq/pb/ByteStringMicro:toByteArray	()[B
    //   116: invokestatic 933	com/tencent/mobileqq/olympic/utils/OlympicUtil:a	([B)[B
    //   119: astore_2
    //   120: aload_2
    //   121: ifnull +393 -> 514
    //   124: new 240	java/lang/String
    //   127: dup
    //   128: aload_2
    //   129: ldc_w 935
    //   132: invokespecial 938	java/lang/String:<init>	([BLjava/lang/String;)V
    //   135: astore_2
    //   136: aload_2
    //   137: ifnull +215 -> 352
    //   140: new 242	org/json/JSONObject
    //   143: dup
    //   144: aload_2
    //   145: invokespecial 245	org/json/JSONObject:<init>	(Ljava/lang/String;)V
    //   148: astore 9
    //   150: ldc_w 7420
    //   153: iconst_1
    //   154: new 122	java/lang/StringBuilder
    //   157: dup
    //   158: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   161: ldc_w 7424
    //   164: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   167: aload_2
    //   168: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   171: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   174: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   177: aload 9
    //   179: ldc_w 7426
    //   182: invokevirtual 255	org/json/JSONObject:getInt	(Ljava/lang/String;)I
    //   185: istore_3
    //   186: aload 9
    //   188: ldc_w 7428
    //   191: invokevirtual 255	org/json/JSONObject:getInt	(Ljava/lang/String;)I
    //   194: istore 4
    //   196: aload 9
    //   198: ldc_w 7430
    //   201: invokevirtual 4354	org/json/JSONObject:getJSONArray	(Ljava/lang/String;)Lorg/json/JSONArray;
    //   204: astore 9
    //   206: aload 8
    //   208: astore_2
    //   209: aload 9
    //   211: ifnull +123 -> 334
    //   214: aload 8
    //   216: astore_2
    //   217: aload 9
    //   219: invokevirtual 1030	org/json/JSONArray:length	()I
    //   222: ifle +112 -> 334
    //   225: new 7432	java/util/HashSet
    //   228: dup
    //   229: invokespecial 7433	java/util/HashSet:<init>	()V
    //   232: astore_2
    //   233: iload 5
    //   235: aload 9
    //   237: invokevirtual 1030	org/json/JSONArray:length	()I
    //   240: if_icmpge +94 -> 334
    //   243: aload 9
    //   245: iload 5
    //   247: invokevirtual 7434	org/json/JSONArray:get	(I)Ljava/lang/Object;
    //   250: checkcast 242	org/json/JSONObject
    //   253: ldc_w 7436
    //   256: invokevirtual 541	org/json/JSONObject:getString	(Ljava/lang/String;)Ljava/lang/String;
    //   259: astore 7
    //   261: aload 7
    //   263: invokestatic 419	android/text/TextUtils:isEmpty	(Ljava/lang/CharSequence;)Z
    //   266: ifne +12 -> 278
    //   269: aload_2
    //   270: aload 7
    //   272: invokeinterface 7437 2 0
    //   277: pop
    //   278: iload 5
    //   280: iconst_1
    //   281: iadd
    //   282: istore 5
    //   284: goto -51 -> 233
    //   287: astore_2
    //   288: ldc_w 7420
    //   291: iconst_1
    //   292: new 122	java/lang/StringBuilder
    //   295: dup
    //   296: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   299: ldc_w 7439
    //   302: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   305: aload_2
    //   306: invokevirtual 134	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   309: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   312: invokestatic 615	com/tencent/qphone/base/util/QLog:e	(Ljava/lang/String;ILjava/lang/String;)V
    //   315: aconst_null
    //   316: astore_2
    //   317: goto -181 -> 136
    //   320: aload_2
    //   321: getfield 917	com/tencent/mobileqq/config/struct/splashproto/ConfigurationService$Content:content	Lcom/tencent/mobileqq/pb/PBBytesField;
    //   324: invokevirtual 922	com/tencent/mobileqq/pb/PBBytesField:get	()Lcom/tencent/mobileqq/pb/ByteStringMicro;
    //   327: invokevirtual 972	com/tencent/mobileqq/pb/ByteStringMicro:toStringUtf8	()Ljava/lang/String;
    //   330: astore_2
    //   331: goto -195 -> 136
    //   334: iload_3
    //   335: istore 5
    //   337: iload 4
    //   339: istore_3
    //   340: aload_1
    //   341: invokestatic 7442	com/tencent/mobileqq/activity/aio/photo/PhotoListConfigManager:a	(Lcom/tencent/mobileqq/app/QQAppInterface;)Lcom/tencent/mobileqq/activity/aio/photo/PhotoListConfigManager;
    //   344: aload_1
    //   345: iload 5
    //   347: iload_3
    //   348: aload_2
    //   349: invokevirtual 7445	com/tencent/mobileqq/activity/aio/photo/PhotoListConfigManager:a	(Lcom/tencent/mobileqq/app/QQAppInterface;IILjava/util/Set;)V
    //   352: aload_1
    //   353: invokevirtual 176	com/tencent/mobileqq/app/QQAppInterface:getApp	()Lcom/tencent/qphone/base/util/BaseApplication;
    //   356: getstatic 15	com/tencent/mobileqq/config/splashlogo/ConfigServlet:jdField_a_of_type_JavaLangString	Ljava/lang/String;
    //   359: iload 6
    //   361: invokestatic 7446	com/tencent/mobileqq/activity/aio/photo/PhotoListConfigManager:a	(Landroid/content/Context;Ljava/lang/String;I)V
    //   364: return
    //   365: astore_2
    //   366: iconst_0
    //   367: istore 4
    //   369: iconst_0
    //   370: istore_3
    //   371: ldc_w 7420
    //   374: iconst_1
    //   375: new 122	java/lang/StringBuilder
    //   378: dup
    //   379: invokespecial 123	java/lang/StringBuilder:<init>	()V
    //   382: ldc_w 7319
    //   385: invokevirtual 129	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   388: aload_2
    //   389: invokevirtual 134	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   392: invokevirtual 138	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   395: invokestatic 615	com/tencent/qphone/base/util/QLog:e	(Ljava/lang/String;ILjava/lang/String;)V
    //   398: aload 7
    //   400: astore_2
    //   401: iload 4
    //   403: istore 5
    //   405: goto -65 -> 340
    //   408: ldc_w 7420
    //   411: iconst_1
    //   412: ldc_w 7448
    //   415: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   418: goto -66 -> 352
    //   421: ldc_w 7420
    //   424: iconst_1
    //   425: ldc_w 7450
    //   428: invokestatic 218	com/tencent/qphone/base/util/QLog:i	(Ljava/lang/String;ILjava/lang/String;)V
    //   431: aload_1
    //   432: invokestatic 7442	com/tencent/mobileqq/activity/aio/photo/PhotoListConfigManager:a	(Lcom/tencent/mobileqq/app/QQAppInterface;)Lcom/tencent/mobileqq/activity/aio/photo/PhotoListConfigManager;
    //   435: aload_1
    //   436: iconst_0
    //   437: iconst_0
    //   438: aconst_null
    //   439: invokevirtual 7445	com/tencent/mobileqq/activity/aio/photo/PhotoListConfigManager:a	(Lcom/tencent/mobileqq/app/QQAppInterface;IILjava/util/Set;)V
    //   442: goto -90 -> 352
    //   445: ldc_w 7420
    //   448: iconst_1
    //   449: ldc_w 7452
    //   452: iconst_1
    //   453: anewarray 65	java/lang/Object
    //   456: dup
    //   457: iconst_0
    //   458: iload_3
    //   459: invokestatic 85	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   462: aastore
    //   463: invokestatic 405	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   466: invokestatic 615	com/tencent/qphone/base/util/QLog:e	(Ljava/lang/String;ILjava/lang/String;)V
    //   469: return
    //   470: astore_2
    //   471: iload_3
    //   472: istore 4
    //   474: iconst_0
    //   475: istore_3
    //   476: goto -105 -> 371
    //   479: astore_2
    //   480: iload_3
    //   481: istore 5
    //   483: iload 4
    //   485: istore_3
    //   486: iload 5
    //   488: istore 4
    //   490: goto -119 -> 371
    //   493: astore 8
    //   495: iload_3
    //   496: istore 5
    //   498: iload 4
    //   500: istore_3
    //   501: aload_2
    //   502: astore 7
    //   504: iload 5
    //   506: istore 4
    //   508: aload 8
    //   510: astore_2
    //   511: goto -140 -> 371
    //   514: aconst_null
    //   515: astore_2
    //   516: goto -380 -> 136
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	519	0	this	ConfigServlet
    //   0	519	1	paramQQAppInterface	QQAppInterface
    //   0	519	2	paramConfig	ConfigurationService.Config
    //   36	465	3	i	int
    //   194	313	4	j	int
    //   7	498	5	k	int
    //   44	316	6	m	int
    //   1	502	7	localObject1	Object
    //   4	211	8	localObject2	Object
    //   493	16	8	localException	Exception
    //   148	96	9	localObject3	Object
    // Exception table:
    //   from	to	target	type
    //   124	136	287	java/lang/Exception
    //   140	186	365	java/lang/Exception
    //   186	196	470	java/lang/Exception
    //   196	206	479	java/lang/Exception
    //   217	233	479	java/lang/Exception
    //   233	278	493	java/lang/Exception
  }
}


/* Location:           L:\local\mybackup\temp\qq_apk\com.tencent.mobileqq\classes.jar
 * Qualified Name:     com.tencent.mobileqq.config.splashlogo.ConfigServlet
 * JD-Core Version:    0.7.0.1
 */